// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package error

import (
	"io"
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"
)

func TestErrorChecker_ErrorDetection(t *testing.T) {
	errOp := func() error { return io.EOF }
	var a error
	var b withErroredMethod
	_, c := b.Get2()

	assert.NoError(t, a)        // want "error: use assert\\.NoError"
	assert.NoError(t, b.Get1()) // want "error: use assert\\.NoError"
	assert.NoError(t, c)        // want "error: use assert\\.NoError"
	assert.NoError(t, errOp())  // want "error: use assert\\.NoError"
}

func TestErrorChecker_ValidNils(t *testing.T) {
	var (
		ptr   *int
		iface any
		ch    chan error
		sl    []error
		fn    func()
		m     map[int]int
		uPtr  unsafe.Pointer
	)

	assert.Nil(t, ptr)
	assert.NotNil(t, ptr)
	assert.Nil(t, iface)
	assert.NotNil(t, iface)
	assert.Nil(t, ch)
	assert.NotNil(t, ch)
	assert.Nil(t, sl)
	assert.NotNil(t, sl)
	assert.Nil(t, fn)
	assert.NotNil(t, fn)
	assert.Nil(t, m)
	assert.NotNil(t, m)
	assert.Nil(t, uPtr)
	assert.NotNil(t, uPtr)
}

func TestErrorChecker(t *testing.T) {
	var err error

	// Invalid.
	{
		assert.NoError(t, err)                                   // want "error: use assert\\.NoError"
		assert.NoErrorf(t, err, "msg with args %d %s", 42, "42") // want "error: use assert\\.NoErrorf"
		assert.Error(t, err)                                     // want "error: use assert\\.Error"
		assert.Errorf(t, err, "msg with args %d %s", 42, "42")   // want "error: use assert\\.Errorf"
	}

	// Valid.
	{
		assert.NoError(t, err)
		assert.NoErrorf(t, err, "msg with args %d %s", 42, "42")
		assert.Error(t, err)
		assert.Errorf(t, err, "msg with args %d %s", 42, "42")
	}
}

type withErroredMethod struct{}

func (withErroredMethod) Get1() error        { return nil }
func (withErroredMethod) Get2() (int, error) { return 0, nil }
