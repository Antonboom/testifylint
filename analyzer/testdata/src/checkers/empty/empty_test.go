// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package empty

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestEmptyChecker_LenVarIndependence(t *testing.T) {
	var (
		arr    [0]int
		arrPtr *[0]int
		sl     []int
		mp     map[int]int
		str    string
		ch     chan int
	)

	assert.Equal(t, 0, len(arr))    // want "empty: use assert\\.Empty"
	assert.Equal(t, 0, len(arrPtr)) // want "empty: use assert\\.Empty"
	assert.Equal(t, 0, len(sl))     // want "empty: use assert\\.Empty"
	assert.Equal(t, 0, len(mp))     // want "empty: use assert\\.Empty"
	assert.Equal(t, 0, len(str))    // want "empty: use assert\\.Empty"
	assert.Equal(t, 0, len(ch))     // want "empty: use assert\\.Empty"
}

func TestEmptyChecker(t *testing.T) {
	var elems []string

	// assert.Empty cases.
	{
		// Invalid.
		assert.Len(t, elems, 0)                                            // want "empty: use assert\\.Empty"
		assert.Lenf(t, elems, 0, "msg with args %d %s", 42, "42")          // want "empty: use assert\\.Emptyf"
		assert.Equal(t, len(elems), 0)                                     // want "empty: use assert\\.Empty"
		assert.Equalf(t, len(elems), 0, "msg with args %d %s", 42, "42")   // want "empty: use assert\\.Emptyf"
		assert.Equal(t, 0, len(elems))                                     // want "empty: use assert\\.Empty"
		assert.Equalf(t, 0, len(elems), "msg with args %d %s", 42, "42")   // want "empty: use assert\\.Emptyf"
		assert.Less(t, len(elems), 1)                                      // want "empty: use assert\\.Empty"
		assert.Lessf(t, len(elems), 1, "msg with args %d %s", 42, "42")    // want "empty: use assert\\.Emptyf"
		assert.Greater(t, 1, len(elems))                                   // want "empty: use assert\\.Empty"
		assert.Greaterf(t, 1, len(elems), "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.True(t, len(elems) == 0)                                    // want "empty: use assert\\.Empty"
		assert.Truef(t, len(elems) == 0, "msg with args %d %s", 42, "42")  // want "empty: use assert\\.Emptyf"
		assert.True(t, 0 == len(elems))                                    // want "empty: use assert\\.Empty"
		assert.Truef(t, 0 == len(elems), "msg with args %d %s", 42, "42")  // want "empty: use assert\\.Emptyf"
		assert.True(t, len(elems) < 1)                                     // want "empty: use assert\\.Empty"
		assert.Truef(t, len(elems) < 1, "msg with args %d %s", 42, "42")   // want "empty: use assert\\.Emptyf"
		assert.True(t, 1 > len(elems))                                     // want "empty: use assert\\.Empty"
		assert.Truef(t, 1 > len(elems), "msg with args %d %s", 42, "42")   // want "empty: use assert\\.Emptyf"
		assert.False(t, len(elems) != 0)                                   // want "empty: use assert\\.Empty"
		assert.Falsef(t, len(elems) != 0, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.False(t, 0 != len(elems))                                   // want "empty: use assert\\.Empty"
		assert.Falsef(t, 0 != len(elems), "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.False(t, len(elems) >= 1)                                   // want "empty: use assert\\.Empty"
		assert.Falsef(t, len(elems) >= 1, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.False(t, 1 <= len(elems))                                   // want "empty: use assert\\.Empty"
		assert.Falsef(t, 1 <= len(elems), "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"

		// Valid.
		assert.Empty(t, elems)
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42")
	}

	// assert.NotEmpty cases.
	{
		// Invalid.
		assert.NotEqual(t, len(elems), 0)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEqualf(t, len(elems), 0, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEqual(t, 0, len(elems))                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEqualf(t, 0, len(elems), "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.Greater(t, len(elems), 0)                                    // want "empty: use assert\\.NotEmpty"
		assert.Greaterf(t, len(elems), 0, "msg with args %d %s", 42, "42")  // want "empty: use assert\\.NotEmptyf"
		assert.Less(t, 0, len(elems))                                       // want "empty: use assert\\.NotEmpty"
		assert.Lessf(t, 0, len(elems), "msg with args %d %s", 42, "42")     // want "empty: use assert\\.NotEmptyf"
		assert.True(t, len(elems) != 0)                                     // want "empty: use assert\\.NotEmpty"
		assert.Truef(t, len(elems) != 0, "msg with args %d %s", 42, "42")   // want "empty: use assert\\.NotEmptyf"
		assert.True(t, 0 != len(elems))                                     // want "empty: use assert\\.NotEmpty"
		assert.Truef(t, 0 != len(elems), "msg with args %d %s", 42, "42")   // want "empty: use assert\\.NotEmptyf"
		assert.True(t, len(elems) > 0)                                      // want "empty: use assert\\.NotEmpty"
		assert.Truef(t, len(elems) > 0, "msg with args %d %s", 42, "42")    // want "empty: use assert\\.NotEmptyf"
		assert.True(t, 0 < len(elems))                                      // want "empty: use assert\\.NotEmpty"
		assert.Truef(t, 0 < len(elems), "msg with args %d %s", 42, "42")    // want "empty: use assert\\.NotEmptyf"
		assert.False(t, len(elems) == 0)                                    // want "empty: use assert\\.NotEmpty"
		assert.Falsef(t, len(elems) == 0, "msg with args %d %s", 42, "42")  // want "empty: use assert\\.NotEmptyf"
		assert.False(t, 0 == len(elems))                                    // want "empty: use assert\\.NotEmpty"
		assert.Falsef(t, 0 == len(elems), "msg with args %d %s", 42, "42")  // want "empty: use assert\\.NotEmptyf"

		// Valid.
		assert.NotEmpty(t, elems)
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42")
	}
}
