// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package nilcompare

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNilCompareChecker(t *testing.T) {
	var value any
	var Row map[string]any

	// Invalid.
	{
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, value)                                           // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")         // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.Nil(t, Row["col"])                                      // want "nil-compare: use assert\\.Nil"
		assert.Nilf(t, Row["col"], "msg with args %d %s", 42, "42")    // want "nil-compare: use assert\\.Nilf"
		assert.NotNil(t, value)                                        // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, value, "msg with args %d %s", 42, "42")      // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, value)                                        // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, value, "msg with args %d %s", 42, "42")      // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, Row["col"])                                   // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, Row["col"], "msg with args %d %s", 42, "42") // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, Row["col"])                                   // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, Row["col"], "msg with args %d %s", 42, "42") // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, value)                                        // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, value, "msg with args %d %s", 42, "42")      // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, value)                                        // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, value, "msg with args %d %s", 42, "42")      // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, Row["col"])                                   // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, Row["col"], "msg with args %d %s", 42, "42") // want "nil-compare: use assert\\.NotNilf"
		assert.NotNil(t, Row["col"])                                   // want "nil-compare: use assert\\.NotNil"
		assert.NotNilf(t, Row["col"], "msg with args %d %s", 42, "42") // want "nil-compare: use assert\\.NotNilf"
	}

	// Valid.
	{
		assert.Nil(t, value)
		assert.Nilf(t, value, "msg with args %d %s", 42, "42")
		assert.NotNil(t, value)
		assert.NotNilf(t, value, "msg with args %d %s", 42, "42")
	}

	// Ignored.
	{
		assert.Equal(t, value, value)
		assert.Equalf(t, value, value, "msg with args %d %s", 42, "42")
		assert.Equal(t, nil, nil)
		assert.Equalf(t, nil, nil, "msg with args %d %s", 42, "42")
		assert.Equal(t, Row["col"], "foo")
		assert.Equalf(t, Row["col"], "foo", "msg with args %d %s", 42, "42")
		assert.Equal(t, "foo", Row["col"])
		assert.Equalf(t, "foo", Row["col"], "msg with args %d %s", 42, "42")
		assert.Equal(t, Row["col"], Row["col"])
		assert.Equalf(t, Row["col"], Row["col"], "msg with args %d %s", 42, "42")
		assert.EqualValues(t, value, value)
		assert.EqualValuesf(t, value, value, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, nil, nil)
		assert.EqualValuesf(t, nil, nil, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, Row["col"], "foo")
		assert.EqualValuesf(t, Row["col"], "foo", "msg with args %d %s", 42, "42")
		assert.EqualValues(t, "foo", Row["col"])
		assert.EqualValuesf(t, "foo", Row["col"], "msg with args %d %s", 42, "42")
		assert.EqualValues(t, Row["col"], Row["col"])
		assert.EqualValuesf(t, Row["col"], Row["col"], "msg with args %d %s", 42, "42")
		assert.Exactly(t, value, value)
		assert.Exactlyf(t, value, value, "msg with args %d %s", 42, "42")
		assert.Exactly(t, nil, nil)
		assert.Exactlyf(t, nil, nil, "msg with args %d %s", 42, "42")
		assert.Exactly(t, Row["col"], "foo")
		assert.Exactlyf(t, Row["col"], "foo", "msg with args %d %s", 42, "42")
		assert.Exactly(t, "foo", Row["col"])
		assert.Exactlyf(t, "foo", Row["col"], "msg with args %d %s", 42, "42")
		assert.Exactly(t, Row["col"], Row["col"])
		assert.Exactlyf(t, Row["col"], Row["col"], "msg with args %d %s", 42, "42")
		assert.NotEqual(t, value, value)
		assert.NotEqualf(t, value, value, "msg with args %d %s", 42, "42")
		assert.NotEqual(t, nil, nil)
		assert.NotEqualf(t, nil, nil, "msg with args %d %s", 42, "42")
		assert.NotEqual(t, Row["col"], "foo")
		assert.NotEqualf(t, Row["col"], "foo", "msg with args %d %s", 42, "42")
		assert.NotEqual(t, "foo", Row["col"])
		assert.NotEqualf(t, "foo", Row["col"], "msg with args %d %s", 42, "42")
		assert.NotEqual(t, Row["col"], Row["col"])
		assert.NotEqualf(t, Row["col"], Row["col"], "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, value, value)
		assert.NotEqualValuesf(t, value, value, "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, nil, nil)
		assert.NotEqualValuesf(t, nil, nil, "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, Row["col"], "foo")
		assert.NotEqualValuesf(t, Row["col"], "foo", "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, "foo", Row["col"])
		assert.NotEqualValuesf(t, "foo", Row["col"], "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, Row["col"], Row["col"])
		assert.NotEqualValuesf(t, Row["col"], Row["col"], "msg with args %d %s", 42, "42")
	}
}
