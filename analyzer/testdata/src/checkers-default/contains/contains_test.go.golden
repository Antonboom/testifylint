// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package contains

import (
	"bytes"
	"errors"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestContainsChecker(t *testing.T) {
	var (
		s           = "abc123"
		b           = []byte(s)
		errSentinel = errors.New("user not found")
	)

	// Invalid.
	{
		assert.Contains(t, s, "abc123")                                              // want "contains: use assert\\.Contains"
		assert.Containsf(t, s, "abc123", "msg with args %d %s", 42, "42")            // want "contains: use assert\\.Containsf"
		assert.Contains(t, string(b), "abc123")                                      // want "contains: use assert\\.Contains"
		assert.Containsf(t, string(b), "abc123", "msg with args %d %s", 42, "42")    // want "contains: use assert\\.Containsf"
		assert.Contains(t, s, "abc123")                                              // want "contains: use assert\\.Contains"
		assert.Containsf(t, s, "abc123", "msg with args %d %s", 42, "42")            // want "contains: use assert\\.Containsf"
		assert.Contains(t, string(b), "abc123")                                      // want "contains: use assert\\.Contains"
		assert.Containsf(t, string(b), "abc123", "msg with args %d %s", 42, "42")    // want "contains: use assert\\.Containsf"
		assert.NotContains(t, s, "abc123")                                           // want "contains: use assert\\.NotContains"
		assert.NotContainsf(t, s, "abc123", "msg with args %d %s", 42, "42")         // want "contains: use assert\\.NotContainsf"
		assert.NotContains(t, string(b), "abc123")                                   // want "contains: use assert\\.NotContains"
		assert.NotContainsf(t, string(b), "abc123", "msg with args %d %s", 42, "42") // want "contains: use assert\\.NotContainsf"
		assert.NotContains(t, s, "abc123")                                           // want "contains: use assert\\.NotContains"
		assert.NotContainsf(t, s, "abc123", "msg with args %d %s", 42, "42")         // want "contains: use assert\\.NotContainsf"
		assert.NotContains(t, string(b), "abc123")                                   // want "contains: use assert\\.NotContains"
		assert.NotContainsf(t, string(b), "abc123", "msg with args %d %s", 42, "42") // want "contains: use assert\\.NotContainsf"
	}

	// Valid.
	{
		assert.Contains(t, s, "abc123")
		assert.Containsf(t, s, "abc123", "msg with args %d %s", 42, "42")
		assert.Contains(t, string(b), "abc123")
		assert.Containsf(t, string(b), "abc123", "msg with args %d %s", 42, "42")
		assert.NotContains(t, s, "abc123")
		assert.NotContainsf(t, s, "abc123", "msg with args %d %s", 42, "42")
		assert.NotContains(t, string(b), "abc123")
		assert.NotContainsf(t, string(b), "abc123", "msg with args %d %s", 42, "42")
	}

	// Ignored.
	{
		assert.Contains(t, errSentinel.Error(), "user")
		assert.Containsf(t, errSentinel.Error(), "user", "msg with args %d %s", 42, "42")
		assert.True(t, bytes.Contains(b, []byte("a")))
		assert.Truef(t, bytes.Contains(b, []byte("a")), "msg with args %d %s", 42, "42")
		assert.False(t, !bytes.Contains(b, []byte("a")))
		assert.Falsef(t, !bytes.Contains(b, []byte("a")), "msg with args %d %s", 42, "42")
		assert.False(t, bytes.Contains(b, []byte("a")))
		assert.Falsef(t, bytes.Contains(b, []byte("a")), "msg with args %d %s", 42, "42")
		assert.True(t, !bytes.Contains(b, []byte("a")))
		assert.Truef(t, !bytes.Contains(b, []byte("a")), "msg with args %d %s", 42, "42")
	}
}
