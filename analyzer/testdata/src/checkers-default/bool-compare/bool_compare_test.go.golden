// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package boolcompare

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBoolCompareChecker(t *testing.T) {
	var predicate bool

	// assert.True cases.
	{
		// Invalid.
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.True(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"
		assert.True(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.True(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.True(t, predicate)                                   // want "bool-compare: use assert\\.True"
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Truef"

		// Valid.
		assert.True(t, predicate)
		assert.Truef(t, predicate, "msg with args %d %s", 42, "42")
	}

	// assert.False cases.
	{
		// Invalid.
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.False(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"
		assert.False(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.False(t, predicate)                                   // want "bool-compare: need to simplify the assertion"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: need to simplify the assertion"
		assert.False(t, predicate)                                   // want "bool-compare: use assert\\.False"
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42") // want "bool-compare: use assert\\.Falsef"

		// Valid.
		assert.False(t, predicate)
		assert.Falsef(t, predicate, "msg with args %d %s", 42, "42")
	}
}

func TestBoolCompareChecker_IgnoresStrangeCases(t *testing.T) {
	assert.Equal(t, true, true)
	assert.Equalf(t, true, true, "msg with args %d %s", 42, "42")
	assert.Equal(t, false, false)
	assert.Equalf(t, false, false, "msg with args %d %s", 42, "42")
	assert.NotEqual(t, true, true)
	assert.NotEqualf(t, true, true, "msg with args %d %s", 42, "42")
	assert.NotEqual(t, false, false)
	assert.NotEqualf(t, false, false, "msg with args %d %s", 42, "42")
	assert.True(t, true == true)
	assert.Truef(t, true == true, "msg with args %d %s", 42, "42")
	assert.True(t, false == false)
	assert.Truef(t, false == false, "msg with args %d %s", 42, "42")
	assert.False(t, true == true)
	assert.Falsef(t, true == true, "msg with args %d %s", 42, "42")
	assert.False(t, false == false)
	assert.Falsef(t, false == false, "msg with args %d %s", 42, "42")
	assert.True(t, true != true)
	assert.Truef(t, true != true, "msg with args %d %s", 42, "42")
	assert.True(t, false != false)
	assert.Truef(t, false != false, "msg with args %d %s", 42, "42")
	assert.False(t, true != true)
	assert.Falsef(t, true != true, "msg with args %d %s", 42, "42")
	assert.False(t, false != false)
	assert.Falsef(t, false != false, "msg with args %d %s", 42, "42")
}
