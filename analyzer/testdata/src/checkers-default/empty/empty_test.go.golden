// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package empty

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestEmptyChecker_LenVarIndependence(t *testing.T) {
	var (
		arr    [0]int
		arrPtr *[0]int
		sl     []int
		mp     map[int]int
		str    string
		ch     chan int
	)

	assert.Empty(t, arr)    // want "empty: use assert\\.Empty"
	assert.Empty(t, arrPtr) // want "empty: use assert\\.Empty"
	assert.Empty(t, sl)     // want "empty: use assert\\.Empty"
	assert.Empty(t, mp)     // want "empty: use assert\\.Empty"
	assert.Empty(t, str)    // want "empty: use assert\\.Empty"
	assert.Empty(t, ch)     // want "empty: use assert\\.Empty"
}

func TestEmptyChecker(t *testing.T) {
	var elems []string

	// assert.Empty cases.
	{
		// Invalid.
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"
		assert.Empty(t, elems)                                   // want "empty: use assert\\.Empty"
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.Emptyf"

		// Valid.
		assert.Empty(t, elems)
		assert.Emptyf(t, elems, "msg with args %d %s", 42, "42")
	}

	// assert.NotEmpty cases.
	{
		// Invalid.
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"
		assert.NotEmpty(t, elems)                                   // want "empty: use assert\\.NotEmpty"
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42") // want "empty: use assert\\.NotEmptyf"

		// Valid.
		assert.NotEmpty(t, elems)
		assert.NotEmptyf(t, elems, "msg with args %d %s", 42, "42")
	}
}
