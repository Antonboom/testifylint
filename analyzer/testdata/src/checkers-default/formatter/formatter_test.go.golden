// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package formatter

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

func TestFormatterChecker(t *testing.T) {
	var err error
	var args []any
	assert.Error(t, err, "Parse(%v) should fail.", args) // want "formatter: use assert\\.Errorf"

	assert.Equal(t, 1, 2)
	assert.Equal(t, 1, 2, "msg")                           // want "formatter: use assert\\.Equalf"
	assert.Equal(t, 1, 2, "msg with arg %d", 42)           // want "formatter: use assert\\.Equalf"
	assert.Equal(t, 1, 2, "msg with args %d %s", 42, "42") // want "formatter: use assert\\.Equalf"
	assert.Equalf(t, 1, 2, "msg")
	assert.Equalf(t, 1, 2, "msg with arg %d", 42)
	assert.Equalf(t, 1, 2, "msg with args %d %s", 42, "42")
}

func TestFormatterChecker_PrintfChecks(t *testing.T) {
	assert.Equalf(t, 1, 2, "msg with arg", "arg")        // want "formatter: assert\\.Equalf call has arguments but no formatting directives"
	assert.Equalf(t, 1, 2, "msg with arg: %w", nil)      // want "formatter: assert\\.Equalf does not support error-wrapping directive %w"
	assert.Equalf(t, 1, 2, "msg with args %d", 42, "42") // want "formatter: assert\\.Equalf call needs 1 arg but has 2 args"
	assert.Equalf(t, 1, 2, "msg with arg %[xd", 42)      // want "formatter: assert\\.Equalf format %\\[xd is missing closing \\]"

	assert.Equalf(t, 1, 2, "msg with arg %[3]*.[2*[1]f", 1, 2, 3) // want "formatter: assert\\.Equalf format has invalid argument index \\[2\\*\\[1\\]"

	assert.Equalf(t, 1, 2, "msg with arg %", 42)           // want "formatter: assert\\.Equalf format % is missing verb at end of string"
	assert.Equalf(t, 1, 2, "msg with arg %r", 42)          // want "formatter: assert\\.Equalf format %r has unknown verb r"
	assert.Equalf(t, 1, 2, "msg with arg %#s", 42)         // want "formatter: assert\\.Equalf format %#s has unrecognized flag #"
	assert.Equalf(t, 1, 2, "msg with arg %.*d x", "42", 3) // want "formatter: assert\\.Equalf format %.*d uses non-int \"42\" as argument of \\*"
	assert.Equalf(t, 1, 2, "msg with arg %d", assertTrue)  // want "formatter: assert\\.Equalf format %d arg assertTrue is a func value, not called"
	assert.Equalf(t, 1, 2, "msg with arg %d", "42")        // want "formatter: assert\\.Equalf format %d has arg \"42\" of wrong type string"

	assert.Equalf(t, 1, 2, "msg with args %s %s", "42") // want "formatter: assert\\.Equalf format %s reads arg #2, but call has 1 arg$"
}

type FormatterCheckerSuite struct {
	suite.Suite
}

func TestFormatterCheckerSuite(t *testing.T) {
	suite.Run(t, new(FormatterCheckerSuite))
}

func (suite *FormatterCheckerSuite) TestFuncNameInDiagnostic() {
	require.Equalf(suite.T(), 1, 2, "msg with arg", "arg") // want "formatter: require\\.Equalf call has arguments but no formatting directives"

	suite.Require().Equalf(1, 2, "msg with arg", "arg") // want "formatter: suite\\.Require\\(\\)\\.Equalf call has arguments but no formatting directives"
	suite.Equalf(1, 2, "msg with arg", "arg")           // want "formatter: suite\\.Equalf call has arguments but no formatting directives"

	assertObj := assert.New(suite.T())
	assertObj.Equalf(1, 2, "msg with arg", "arg") // want "formatter: assertObj\\.Equalf call has arguments but no formatting directives"

	requireObj := require.New(suite.T())
	requireObj.Equalf(1, 2, "msg with arg", "arg") // want "formatter: requireObj\\.Equalf call has arguments but no formatting directives"
}

func assertTrue(t *testing.T, v bool, arg1 string, arg2 ...interface{}) {
	t.Helper()
	assert.Truef(t, v, arg1, arg2) // want "formatter: missing \\.\\.\\. in args forwarded to printf-like function"
}

func TestFormatterChecker_AllAssertions(t *testing.T) {
	assert.Condition(t, nil)
	assert.Conditionf(t, nil, "simple msg")          // want "formatter: use assert\\.Conditionf"
	assert.Conditionf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Conditionf call has arguments but no formatting directives"
	assert.Contains(t, nil, nil)
	assert.Containsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Containsf"
	assert.Containsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Containsf call has arguments but no formatting directives"
	assert.DirExists(t, "")
	assert.DirExistsf(t, "", "simple msg")          // want "formatter: use assert\\.DirExistsf"
	assert.DirExistsf(t, "", "msg with arg", "arg") // want "formatter: assert\\.DirExistsf call has arguments but no formatting directives"
	assert.ElementsMatch(t, nil, nil)
	assert.ElementsMatchf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.ElementsMatchf"
	assert.ElementsMatchf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.ElementsMatchf call has arguments but no formatting directives"
	assert.Empty(t, nil)
	assert.Emptyf(t, nil, "simple msg")          // want "formatter: use assert\\.Emptyf"
	assert.Emptyf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Emptyf call has arguments but no formatting directives"
	assert.Equal(t, nil, nil)
	assert.Equalf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Equalf"
	assert.Equalf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Equalf call has arguments but no formatting directives"
	assert.EqualError(t, nil, "")
	assert.EqualErrorf(t, nil, "", "simple msg")          // want "formatter: use assert\\.EqualErrorf"
	assert.EqualErrorf(t, nil, "", "msg with arg", "arg") // want "formatter: assert\\.EqualErrorf call has arguments but no formatting directives"
	assert.EqualExportedValues(t, nil, nil)
	assert.EqualExportedValuesf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.EqualExportedValuesf"
	assert.EqualExportedValuesf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.EqualExportedValuesf call has arguments but no formatting directives"
	assert.EqualValues(t, nil, nil)
	assert.EqualValuesf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.EqualValuesf"
	assert.EqualValuesf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.EqualValuesf call has arguments but no formatting directives"
	assert.Error(t, nil)
	assert.Errorf(t, nil, "simple msg")          // want "formatter: use assert\\.Errorf"
	assert.Errorf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Errorf call has arguments but no formatting directives"
	assert.ErrorAs(t, nil, nil)
	assert.ErrorAsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.ErrorAsf"
	assert.ErrorAsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.ErrorAsf call has arguments but no formatting directives"
	assert.ErrorContains(t, nil, "")
	assert.ErrorContainsf(t, nil, "", "simple msg")          // want "formatter: use assert\\.ErrorContainsf"
	assert.ErrorContainsf(t, nil, "", "msg with arg", "arg") // want "formatter: assert\\.ErrorContainsf call has arguments but no formatting directives"
	assert.ErrorIs(t, nil, nil)
	assert.ErrorIsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.ErrorIsf"
	assert.ErrorIsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.ErrorIsf call has arguments but no formatting directives"
	assert.Eventually(t, nil, 0, 0)
	assert.Eventuallyf(t, nil, 0, 0, "simple msg")          // want "formatter: use assert\\.Eventuallyf"
	assert.Eventuallyf(t, nil, 0, 0, "msg with arg", "arg") // want "formatter: assert\\.Eventuallyf call has arguments but no formatting directives"
	assert.EventuallyWithT(t, nil, 0, 0)
	assert.EventuallyWithTf(t, nil, 0, 0, "simple msg")          // want "formatter: use assert\\.EventuallyWithTf"
	assert.EventuallyWithTf(t, nil, 0, 0, "msg with arg", "arg") // want "formatter: assert\\.EventuallyWithTf call has arguments but no formatting directives"
	assert.Exactly(t, nil, nil)
	assert.Exactlyf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Exactlyf"
	assert.Exactlyf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Exactlyf call has arguments but no formatting directives"
	assert.Fail(t, "")
	assert.Failf(t, "", "simple msg")          // want "formatter: use assert\\.Failf"
	assert.Failf(t, "", "msg with arg", "arg") // want "formatter: assert\\.Failf call has arguments but no formatting directives"
	assert.FailNow(t, "")
	assert.FailNowf(t, "", "simple msg")          // want "formatter: use assert\\.FailNowf"
	assert.FailNowf(t, "", "msg with arg", "arg") // want "formatter: assert\\.FailNowf call has arguments but no formatting directives"
	assert.False(t, false)
	assert.Falsef(t, false, "simple msg")          // want "formatter: use assert\\.Falsef"
	assert.Falsef(t, false, "msg with arg", "arg") // want "formatter: assert\\.Falsef call has arguments but no formatting directives"
	assert.FileExists(t, "")
	assert.FileExistsf(t, "", "simple msg")          // want "formatter: use assert\\.FileExistsf"
	assert.FileExistsf(t, "", "msg with arg", "arg") // want "formatter: assert\\.FileExistsf call has arguments but no formatting directives"
	assert.Implements(t, nil, nil)
	assert.Implementsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Implementsf"
	assert.Implementsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Implementsf call has arguments but no formatting directives"
	assert.InDelta(t, 0., 0., 0.)
	assert.InDeltaf(t, 0., 0., 0., "simple msg")          // want "formatter: use assert\\.InDeltaf"
	assert.InDeltaf(t, 0., 0., 0., "msg with arg", "arg") // want "formatter: assert\\.InDeltaf call has arguments but no formatting directives"
	assert.InDeltaMapValues(t, nil, nil, 0.)
	assert.InDeltaMapValuesf(t, nil, nil, 0., "simple msg")          // want "formatter: use assert\\.InDeltaMapValuesf"
	assert.InDeltaMapValuesf(t, nil, nil, 0., "msg with arg", "arg") // want "formatter: assert\\.InDeltaMapValuesf call has arguments but no formatting directives"
	assert.InDeltaSlice(t, nil, nil, 0.)
	assert.InDeltaSlicef(t, nil, nil, 0., "simple msg")          // want "formatter: use assert\\.InDeltaSlicef"
	assert.InDeltaSlicef(t, nil, nil, 0., "msg with arg", "arg") // want "formatter: assert\\.InDeltaSlicef call has arguments but no formatting directives"
	assert.InEpsilon(t, nil, nil, 0.)
	assert.InEpsilonf(t, nil, nil, 0., "simple msg")          // want "formatter: use assert\\.InEpsilonf"
	assert.InEpsilonf(t, nil, nil, 0., "msg with arg", "arg") // want "formatter: assert\\.InEpsilonf call has arguments but no formatting directives"
	assert.InEpsilonSlice(t, nil, nil, 0.)
	assert.InEpsilonSlicef(t, nil, nil, 0., "simple msg")          // want "formatter: use assert\\.InEpsilonSlicef"
	assert.InEpsilonSlicef(t, nil, nil, 0., "msg with arg", "arg") // want "formatter: assert\\.InEpsilonSlicef call has arguments but no formatting directives"
	assert.IsType(t, nil, nil)
	assert.IsTypef(t, nil, nil, "simple msg")          // want "formatter: use assert\\.IsTypef"
	assert.IsTypef(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.IsTypef call has arguments but no formatting directives"
	assert.JSONEq(t, "", "")
	assert.JSONEqf(t, "", "", "simple msg")          // want "formatter: use assert\\.JSONEqf"
	assert.JSONEqf(t, "", "", "msg with arg", "arg") // want "formatter: assert\\.JSONEqf call has arguments but no formatting directives"
	assert.Len(t, nil, 0)
	assert.Lenf(t, nil, 0, "simple msg")          // want "formatter: use assert\\.Lenf"
	assert.Lenf(t, nil, 0, "msg with arg", "arg") // want "formatter: assert\\.Lenf call has arguments but no formatting directives"
	assert.Never(t, nil, 0, 0)
	assert.Neverf(t, nil, 0, 0, "simple msg")          // want "formatter: use assert\\.Neverf"
	assert.Neverf(t, nil, 0, 0, "msg with arg", "arg") // want "formatter: assert\\.Neverf call has arguments but no formatting directives"
	assert.Nil(t, nil)
	assert.Nilf(t, nil, "simple msg")          // want "formatter: use assert\\.Nilf"
	assert.Nilf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Nilf call has arguments but no formatting directives"
	assert.NoDirExists(t, "")
	assert.NoDirExistsf(t, "", "simple msg")          // want "formatter: use assert\\.NoDirExistsf"
	assert.NoDirExistsf(t, "", "msg with arg", "arg") // want "formatter: assert\\.NoDirExistsf call has arguments but no formatting directives"
	assert.NoError(t, nil)
	assert.NoErrorf(t, nil, "simple msg")          // want "formatter: use assert\\.NoErrorf"
	assert.NoErrorf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.NoErrorf call has arguments but no formatting directives"
	assert.NoFileExists(t, "")
	assert.NoFileExistsf(t, "", "simple msg")          // want "formatter: use assert\\.NoFileExistsf"
	assert.NoFileExistsf(t, "", "msg with arg", "arg") // want "formatter: assert\\.NoFileExistsf call has arguments but no formatting directives"
	assert.NotContains(t, nil, nil)
	assert.NotContainsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotContainsf"
	assert.NotContainsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotContainsf call has arguments but no formatting directives"
	assert.NotEmpty(t, nil)
	assert.NotEmptyf(t, nil, "simple msg")          // want "formatter: use assert\\.NotEmptyf"
	assert.NotEmptyf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.NotEmptyf call has arguments but no formatting directives"
	assert.NotEqual(t, nil, nil)
	assert.NotEqualf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotEqualf"
	assert.NotEqualf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotEqualf call has arguments but no formatting directives"
	assert.NotEqualValues(t, nil, nil)
	assert.NotEqualValuesf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotEqualValuesf"
	assert.NotEqualValuesf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotEqualValuesf call has arguments but no formatting directives"
	assert.NotErrorIs(t, nil, nil)
	assert.NotErrorIsf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotErrorIsf"
	assert.NotErrorIsf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotErrorIsf call has arguments but no formatting directives"
	assert.NotNil(t, nil)
	assert.NotNilf(t, nil, "simple msg")          // want "formatter: use assert\\.NotNilf"
	assert.NotNilf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.NotNilf call has arguments but no formatting directives"
	assert.NotPanics(t, nil)
	assert.NotPanicsf(t, nil, "simple msg")          // want "formatter: use assert\\.NotPanicsf"
	assert.NotPanicsf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.NotPanicsf call has arguments but no formatting directives"
	assert.NotRegexp(t, nil, "")
	assert.NotRegexpf(t, nil, "", "simple msg")          // want "formatter: use assert\\.NotRegexpf"
	assert.NotRegexpf(t, nil, "", "msg with arg", "arg") // want "formatter: assert\\.NotRegexpf call has arguments but no formatting directives"
	assert.NotSame(t, nil, nil)
	assert.NotSamef(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotSamef"
	assert.NotSamef(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotSamef call has arguments but no formatting directives"
	assert.NotSubset(t, nil, nil)
	assert.NotSubsetf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.NotSubsetf"
	assert.NotSubsetf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.NotSubsetf call has arguments but no formatting directives"
	assert.NotZero(t, nil)
	assert.NotZerof(t, nil, "simple msg")          // want "formatter: use assert\\.NotZerof"
	assert.NotZerof(t, nil, "msg with arg", "arg") // want "formatter: assert\\.NotZerof call has arguments but no formatting directives"
	assert.Panics(t, nil)
	assert.Panicsf(t, nil, "simple msg")          // want "formatter: use assert\\.Panicsf"
	assert.Panicsf(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Panicsf call has arguments but no formatting directives"
	assert.PanicsWithError(t, "", nil)
	assert.PanicsWithErrorf(t, "", nil, "simple msg")          // want "formatter: use assert\\.PanicsWithErrorf"
	assert.PanicsWithErrorf(t, "", nil, "msg with arg", "arg") // want "formatter: assert\\.PanicsWithErrorf call has arguments but no formatting directives"
	assert.PanicsWithValue(t, nil, nil)
	assert.PanicsWithValuef(t, nil, nil, "simple msg")          // want "formatter: use assert\\.PanicsWithValuef"
	assert.PanicsWithValuef(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.PanicsWithValuef call has arguments but no formatting directives"
	assert.Regexp(t, nil, nil)
	assert.Regexpf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Regexpf"
	assert.Regexpf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Regexpf call has arguments but no formatting directives"
	assert.Same(t, nil, nil)
	assert.Samef(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Samef"
	assert.Samef(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Samef call has arguments but no formatting directives"
	assert.Subset(t, nil, nil)
	assert.Subsetf(t, nil, nil, "simple msg")          // want "formatter: use assert\\.Subsetf"
	assert.Subsetf(t, nil, nil, "msg with arg", "arg") // want "formatter: assert\\.Subsetf call has arguments but no formatting directives"
	assert.True(t, true)
	assert.Truef(t, true, "simple msg")          // want "formatter: use assert\\.Truef"
	assert.Truef(t, true, "msg with arg", "arg") // want "formatter: assert\\.Truef call has arguments but no formatting directives"
	assert.WithinDuration(t, time.Time{}, time.Time{}, 0)
	assert.WithinDurationf(t, time.Time{}, time.Time{}, 0, "simple msg")          // want "formatter: use assert\\.WithinDurationf"
	assert.WithinDurationf(t, time.Time{}, time.Time{}, 0, "msg with arg", "arg") // want "formatter: assert\\.WithinDurationf call has arguments but no formatting directives"
	assert.WithinRange(t, time.Time{}, time.Time{}, time.Time{})
	assert.WithinRangef(t, time.Time{}, time.Time{}, time.Time{}, "simple msg")          // want "formatter: use assert\\.WithinRangef"
	assert.WithinRangef(t, time.Time{}, time.Time{}, time.Time{}, "msg with arg", "arg") // want "formatter: assert\\.WithinRangef call has arguments but no formatting directives"
	assert.YAMLEq(t, "", "")
	assert.YAMLEqf(t, "", "", "simple msg")          // want "formatter: use assert\\.YAMLEqf"
	assert.YAMLEqf(t, "", "", "msg with arg", "arg") // want "formatter: assert\\.YAMLEqf call has arguments but no formatting directives"
	assert.Zero(t, nil)
	assert.Zerof(t, nil, "simple msg")          // want "formatter: use assert\\.Zerof"
	assert.Zerof(t, nil, "msg with arg", "arg") // want "formatter: assert\\.Zerof call has arguments but no formatting directives"
}

func TestFormatterChecker_Ignored(t *testing.T) {
	assert.ObjectsAreEqual(nil, nil)
	assert.ObjectsAreEqualValues(nil, nil)
	assert.ObjectsExportedFieldsAreEqual(nil, nil)
}
