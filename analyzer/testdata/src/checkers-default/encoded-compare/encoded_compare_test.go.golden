// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package encodedcompare

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestEncodedCompareChecker(t *testing.T) {
	var respBody, raw, hexString, toJSON, expJSON, resultJSON, jsonb, resJson string
	var conf, expectedYAML, expYaml, ymlResult, yamlResult, expYML, outputYaml string
	var respBytes, resultJSONBytes []byte
	w := httptest.NewRecorder()
	var batch interface{ ParentSummary() []byte }
	var res [1]struct{ Data []byte }
	var output bytes.Buffer
	var respJSONRawMessage json.RawMessage

	const expBody = `{"status":"healthy","message":"","peer_count":1}`

	// Invalid.
	{
		assert.JSONEq(t, `{"name":"name","value":1000}`, respBody)                                                                                 // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"name":"name","value":1000}`, respBody, "msg with args %d %s", 42, "42")                                               // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, expBody, respBody)                                                                                                        // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expBody, respBody, "msg with args %d %s", 42, "42")                                                                      // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `{"status":404,"message":"abc"}`, string(respBytes))                                                                      // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"status":404,"message":"abc"}`, string(respBytes), "msg with args %d %s", 42, "42")                                    // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `{"message":"success"}`, w.Body.String())                                                                                 // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"message":"success"}`, w.Body.String(), "msg with args %d %s", 42, "42")                                               // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, "{\n  \"first\": \"Tobi\",\n  \"last\": \"Ferret\"\n}", w.Body.String())                                                  // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, "{\n  \"first\": \"Tobi\",\n  \"last\": \"Ferret\"\n}", w.Body.String(), "msg with args %d %s", 42, "42")                // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, "{\n\t\"msg\": \"hello world\"\n}", respBody)                                                                             // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, "{\n\t\"msg\": \"hello world\"\n}", respBody, "msg with args %d %s", 42, "42")                                           // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, fmt.Sprintf(`{"value":"%s","valuePtr":"%s"}`, hexString, hexString), string(respBytes))                                   // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, fmt.Sprintf(`{"value":"%s","valuePtr":"%s"}`, hexString, hexString), string(respBytes), "msg with args %d %s", 42, "42") // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `[{"@id":"a","b":[{"@id":"c"}]}]`, toJSON)                                                                                // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `[{"@id":"a","b":[{"@id":"c"}]}]`, toJSON, "msg with args %d %s", 42, "42")                                              // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, "{\"FirstName\":\"john\",\"LastName\":\"doe\",\"Age\":26,\"Height\":182.88}", resJson)                                    // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, "{\"FirstName\":\"john\",\"LastName\":\"doe\",\"Age\":26,\"Height\":182.88}", resJson, "msg with args %d %s", 42, "42")  // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, expJSON, resultJSON)                                                                                                      // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, resultJSON, "msg with args %d %s", 42, "42")                                                                    // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, jsonb, respBody)                                                                                                          // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, jsonb, respBody, "msg with args %d %s", 42, "42")                                                                        // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, respBody, jsonb)                                                                                                          // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, respBody, jsonb, "msg with args %d %s", 42, "42")                                                                        // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, expJSON, resJson)                                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, resJson, "msg with args %d %s", 42, "42")                                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.YAMLEq(t, expectedYAML, conf)                                                                                                       // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expectedYAML, conf, "msg with args %d %s", 42, "42")                                                                     // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, expYaml, conf)                                                                                                            // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYaml, conf, "msg with args %d %s", 42, "42")                                                                          // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, ymlResult, conf)                                                                                                          // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, ymlResult, conf, "msg with args %d %s", 42, "42")                                                                        // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, yamlResult, conf)                                                                                                         // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, yamlResult, conf, "msg with args %d %s", 42, "42")                                                                       // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, expYML, conf)                                                                                                             // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYML, conf, "msg with args %d %s", 42, "42")                                                                           // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, conf, expectedYAML)                                                                                                       // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, conf, expectedYAML, "msg with args %d %s", 42, "42")                                                                     // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, outputYaml, output.String())                                                                                              // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, outputYaml, output.String(), "msg with args %d %s", 42, "42")                                                            // want "encoded-compare: use assert\\.YAMLEqf"
		assert.JSONEq(t, `{"uuid": "b65b1a22-db6d-4f5a-9b3d-7302368a82e6"}`, string(batch.ParentSummary()))                                        // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"uuid": "b65b1a22-db6d-4f5a-9b3d-7302368a82e6"}`, string(batch.ParentSummary()), "msg with args %d %s", 42, "42")      // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, string(res[0].Data), `{"name":"new"}`)                                                                                    // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, string(res[0].Data), `{"name":"new"}`, "msg with args %d %s", 42, "42")                                                  // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, raw, string(resultJSONBytes))                                                                                             // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, raw, string(resultJSONBytes), "msg with args %d %s", 42, "42")                                                           // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, raw, raw)                                                                                                                 // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, raw, raw, "msg with args %d %s", 42, "42")                                                                               // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, "{}", respBody)                                                                                                           // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, "{}", respBody, "msg with args %d %s", 42, "42")                                                                         // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, respBody, "null")                                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, respBody, "null", "msg with args %d %s", 42, "42")                                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `["more","raw","things"]`, string(resultJSONBytes))                                                                       // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `["more","raw","things"]`, string(resultJSONBytes), "msg with args %d %s", 42, "42")                                     // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, "{}", string(resultJSONBytes))                                                                                            // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, "{}", string(resultJSONBytes), "msg with args %d %s", 42, "42")                                                          // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, expJSON, string(resultJSONBytes))                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, string(resultJSONBytes), "msg with args %d %s", 42, "42")                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.YAMLEq(t, expYaml, string(respBytes))                                                                                               // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYaml, string(respBytes), "msg with args %d %s", 42, "42")                                                             // want "encoded-compare: use assert\\.YAMLEqf"
		assert.JSONEq(t, expJSON, string(resultJSONBytes))                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, string(resultJSONBytes), "msg with args %d %s", 42, "42")                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, raw, jsonb)                                                                                                               // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, raw, jsonb, "msg with args %d %s", 42, "42")                                                                             // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `{"status":"healthy","message":"","peer_count":1}`, string(respBytes))                                                    // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"status":"healthy","message":"","peer_count":1}`, string(respBytes), "msg with args %d %s", 42, "42")                  // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `{"foo":"bar"}`, w.Body.String())                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"foo":"bar"}`, w.Body.String(), "msg with args %d %s", 42, "42")                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, `{"bar":"foo"}`, w.Body.String())                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, `{"bar":"foo"}`, w.Body.String(), "msg with args %d %s", 42, "42")                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.YAMLEq(t, expYaml, string(respBytes))                                                                                               // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYaml, string(respBytes), "msg with args %d %s", 42, "42")                                                             // want "encoded-compare: use assert\\.YAMLEqf"
		assert.JSONEq(t, expJSON, resJson)                                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, resJson, "msg with args %d %s", 42, "42")                                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.JSONEq(t, expJSON, resJson)                                                                                                         // want "encoded-compare: use assert\\.JSONEq"
		assert.JSONEqf(t, expJSON, resJson, "msg with args %d %s", 42, "42")                                                                       // want "encoded-compare: use assert\\.JSONEqf"
		assert.YAMLEq(t, expYaml, conf)                                                                                                            // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYaml, conf, "msg with args %d %s", 42, "42")                                                                          // want "encoded-compare: use assert\\.YAMLEqf"
		assert.YAMLEq(t, expYaml, conf)                                                                                                            // want "encoded-compare: use assert\\.YAMLEq"
		assert.YAMLEqf(t, expYaml, conf, "msg with args %d %s", 42, "42")                                                                          // want "encoded-compare: use assert\\.YAMLEqf"
		assert.Equal(t, ` // want "encoded-compare: use assert\.JSONEq"
{
	"id": 123,
	"method": "get_prop",
	"params": ["power","sat"]
}
`, raw)
		assert.Equal(t, ` // want "encoded-compare: use assert\.JSONEq"
{
	"id": 123,
	"method": "get_prop",
	"params": ["power","sat"]
}
`, raw, "msg with args %d %s", 42, "42")
	}

	// Valid.
	{
		assert.JSONEq(t, `{"name":"name","value":1000}`, respBody)
		assert.JSONEqf(t, `{"name":"name","value":1000}`, respBody, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, expJSON, resultJSON)
		assert.JSONEqf(t, expJSON, resultJSON, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, `{"foo":"bar"}`, `{"foo":"bar"}`)
		assert.JSONEqf(t, `{"foo":"bar"}`, `{"foo":"bar"}`, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, `{"message":"success"}`, w.Body.String())
		assert.JSONEqf(t, `{"message":"success"}`, w.Body.String(), "msg with args %d %s", 42, "42")
		assert.JSONEq(t, fmt.Sprintf(`{"value":"%s"}`, hexString), resJson)
		assert.JSONEqf(t, fmt.Sprintf(`{"value":"%s"}`, hexString), resJson, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, "{\n  \"first\": \"Tobi\",\n  \"last\": \"Ferret\"\n}", w.Body.String())
		assert.JSONEqf(t, "{\n  \"first\": \"Tobi\",\n  \"last\": \"Ferret\"\n}", w.Body.String(), "msg with args %d %s", 42, "42")
		assert.YAMLEq(t, expYaml, conf)
		assert.YAMLEqf(t, expYaml, conf, "msg with args %d %s", 42, "42")
	}

	// Ignored.
	{
		assert.Equal(t, "{{ .StepName }}", "use", "command name incorrect")
		assert.Equalf(t, "{{ .StepName }}", "use", "command name incorrect", "msg with args %d %s", 42, "42")
		assert.Equal(t, json.RawMessage{}, respBody)
		assert.Equalf(t, json.RawMessage{}, respBody, "msg with args %d %s", 42, "42")
		assert.Equal(t, json.RawMessage(nil), respBody)
		assert.Equalf(t, json.RawMessage(nil), respBody, "msg with args %d %s", 42, "42")
		assert.Equal(t, raw, raw)
		assert.Equalf(t, raw, raw, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, raw, raw)
		assert.EqualValuesf(t, raw, raw, "msg with args %d %s", 42, "42")
		assert.Exactly(t, raw, raw)
		assert.Exactlyf(t, raw, raw, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, raw, raw)
		assert.JSONEqf(t, raw, raw, "msg with args %d %s", 42, "42")
		assert.Equal(t, string(respBytes), raw)
		assert.Equalf(t, string(respBytes), raw, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, raw, string(respBytes))
		assert.EqualValuesf(t, raw, string(respBytes), "msg with args %d %s", 42, "42")
		assert.Exactly(t, string(respBytes), raw)
		assert.Exactlyf(t, string(respBytes), raw, "msg with args %d %s", 42, "42")
		assert.JSONEq(t, raw, string(respBytes))
		assert.JSONEqf(t, raw, string(respBytes), "msg with args %d %s", 42, "42")
		assert.NotEqual(t, raw, resultJSON)
		assert.NotEqualf(t, raw, resultJSON, "msg with args %d %s", 42, "42")
		assert.NotEqualValues(t, resultJSON, resultJSON)
		assert.NotEqualValuesf(t, resultJSON, resultJSON, "msg with args %d %s", 42, "42")
		assert.YAMLEq(t, `
kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1
images:
  - name: foo
    newName: bar
  - name: bar
    newName: baz
    newTag: "123"
`, conf)
		assert.YAMLEqf(t, `
kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1
images:
  - name: foo
    newName: bar
  - name: bar
    newName: baz
    newTag: "123"
`, conf, "msg with args %d %s", 42, "42")
		assert.YAMLEq(t, "kind: Kustomization", "kind: Kustomization")
		assert.YAMLEqf(t, "kind: Kustomization", "kind: Kustomization", "msg with args %d %s", 42, "42")
		assert.YAMLEq(t, raw, conf)
		assert.YAMLEqf(t, raw, conf, "msg with args %d %s", 42, "42")
		assert.YAMLEq(t, raw, string(respBytes))
		assert.YAMLEqf(t, raw, string(respBytes), "msg with args %d %s", 42, "42")
		assert.Equal(t, 42, resultJSON)
		assert.Equalf(t, 42, resultJSON, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, 42, resultJSON)
		assert.EqualValuesf(t, 42, resultJSON, "msg with args %d %s", 42, "42")
		assert.Exactly(t, 42, resultJSON)
		assert.Exactlyf(t, 42, resultJSON, "msg with args %d %s", 42, "42")
		assert.Equal(t, 42, conf)
		assert.Equalf(t, 42, conf, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, 42, conf)
		assert.EqualValuesf(t, 42, conf, "msg with args %d %s", 42, "42")
		assert.Exactly(t, 42, conf)
		assert.Exactlyf(t, 42, conf, "msg with args %d %s", 42, "42")
		assert.Equal(t, `{"foo":"bar"}`, respJSONRawMessage)
		assert.Equalf(t, `{"foo":"bar"}`, respJSONRawMessage, "msg with args %d %s", 42, "42")
		assert.Exactly(t, `{"foo":"bar"}`, respJSONRawMessage)
		assert.Exactlyf(t, `{"foo":"bar"}`, respJSONRawMessage, "msg with args %d %s", 42, "42")
		assert.EqualValues(t, `{"foo":"bar"}`, respJSONRawMessage)
		assert.EqualValuesf(t, `{"foo":"bar"}`, respJSONRawMessage, "msg with args %d %s", 42, "42")
	}
}
