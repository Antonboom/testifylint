// Code generated by testifylint/internal/testgen. DO NOT EDIT.

package floatcompare

import (
	"math"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFloatCompareChecker(t *testing.T) {
	var result float64

	// Invalid.
	{
		assert.Equal(t, 42.42, result)                                     // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
		assert.Equalf(t, 42.42, result, "msg with args %d %s", 42, "42")   // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)f"
		assert.True(t, 42.42 == result)                                    // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
		assert.Truef(t, 42.42 == result, "msg with args %d %s", 42, "42")  // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)f"
		assert.False(t, 42.42 != result)                                   // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
		assert.Falsef(t, 42.42 != result, "msg with args %d %s", 42, "42") // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)f"
	}

	// Valid.
	{
		assert.InDelta(t, 42.42, result, 0.0001)
		assert.InDeltaf(t, 42.42, result, 0.0001, "msg with args %d %s", 42, "42")
		assert.InEpsilon(t, 42.42, result, 0.0002)
		assert.InEpsilonf(t, 42.42, result, 0.0002, "msg with args %d %s", 42, "42")
	}

	// Unsupported.
	{
		assert.NotEqual(t, 42.42, result)
		assert.NotEqualf(t, 42.42, result, "msg with args %d %s", 42, "42")
		assert.Greater(t, 42.42, result)
		assert.Greaterf(t, 42.42, result, "msg with args %d %s", 42, "42")
		assert.GreaterOrEqual(t, 42.42, result)
		assert.GreaterOrEqualf(t, 42.42, result, "msg with args %d %s", 42, "42")
		assert.Less(t, 42.42, result)
		assert.Lessf(t, 42.42, result, "msg with args %d %s", 42, "42")
		assert.LessOrEqual(t, 42.42, result)
		assert.LessOrEqualf(t, 42.42, result, "msg with args %d %s", 42, "42")
		assert.True(t, 42.42 != result)
		assert.Truef(t, 42.42 != result, "msg with args %d %s", 42, "42")
		assert.True(t, 42.42 > result)
		assert.Truef(t, 42.42 > result, "msg with args %d %s", 42, "42")
		assert.True(t, 42.42 >= result)
		assert.Truef(t, 42.42 >= result, "msg with args %d %s", 42, "42")
		assert.True(t, 42.42 < result)
		assert.Truef(t, 42.42 < result, "msg with args %d %s", 42, "42")
		assert.True(t, 42.42 <= result)
		assert.Truef(t, 42.42 <= result, "msg with args %d %s", 42, "42")
		assert.False(t, 42.42 == result)
		assert.Falsef(t, 42.42 == result, "msg with args %d %s", 42, "42")
		assert.False(t, 42.42 <= result)
		assert.Falsef(t, 42.42 <= result, "msg with args %d %s", 42, "42")
		assert.False(t, 42.42 < result)
		assert.Falsef(t, 42.42 < result, "msg with args %d %s", 42, "42")
		assert.False(t, 42.42 <= result)
		assert.Falsef(t, 42.42 <= result, "msg with args %d %s", 42, "42")
		assert.False(t, 42.42 > result)
		assert.Falsef(t, 42.42 > result, "msg with args %d %s", 42, "42")
	}
}

func TestFloatCompareChecker_NoFloatNoWorries(t *testing.T) {
	var result int64

	assert.Equal(t, 42, result)
	assert.Equalf(t, 42, result, "msg with args %d %s", 42, "42")
	assert.True(t, 42 == result)
	assert.Truef(t, 42 == result, "msg with args %d %s", 42, "42")
	assert.False(t, 42 != result)
	assert.Falsef(t, 42 != result, "msg with args %d %s", 42, "42")
}

func TestFloatCompareChecker_Float32Detection(t *testing.T) {
	type number float32
	type withFloat32 struct{ value float32 }
	floatOp := func() float32 { return 0. }

	var a float32
	var b number
	var cc withFloat32
	d := float32(1.01)
	const e = float32(2.02)
	f := new(withFloat32)
	var g *float32
	var h withFloat32Method

	assert.Equal(t, 42.42, a)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, b)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, cc.value)                       // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, d)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, e)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, (*f).value)                     // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, *g)                             // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, h.Calculate())                  // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, floatOp())                      // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, number(a)+b)                    // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, cc.value-(*f).value)            // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, d*e/a)                          // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, math.Round(float64(floatOp()))) // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
}

type withFloat32Method struct{}              //
func (withFloat32Method) Calculate() float32 { return 0. }

func TestFloatCompareChecker_Float64Detection(t *testing.T) {
	type number float64
	type withFloat64 struct{ value float64 }
	floatOp := func() float64 { return 0. }

	var a float64
	var b number
	var cc withFloat64
	d := float64(1.01)
	const e = float64(2.02)
	f := new(withFloat64)
	var g *float64
	var h withFloat64Method

	assert.Equal(t, 42.42, a)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, b)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, cc.value)                       // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, d)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, e)                              // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, (*f).value)                     // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, *g)                             // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, h.Calculate())                  // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, floatOp())                      // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, number(a)+b)                    // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, cc.value-(*f).value)            // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, d*e/a)                          // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
	assert.Equal(t, 42.42, math.Round(float64(floatOp()))) // want "float-compare: use assert\\.InEpsilon \\(or InDelta\\)"
}

type withFloat64Method struct{}              //
func (withFloat64Method) Calculate() float64 { return 0. }
