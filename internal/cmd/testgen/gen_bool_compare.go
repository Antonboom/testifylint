package main

import "text/template"

type BoolCompareCasesGenerator struct{}

func (g BoolCompareCasesGenerator) Template() *template.Template {
	return boolCmpCasesTmpl
}

func (g BoolCompareCasesGenerator) Data() any {
	type test struct {
		InvalidChecks []Check
		ValidChecks   []Check
	}

	return struct {
		Pkgs    []string
		VarSets [][]any
		True    test
		False   test
	}{
		Pkgs: []string{"assert", "require"},
		VarSets: [][]any{
			{"a"}, {"b.b"}, {"c"}, {"d"}, {"*e"}, {"*f"}, {"g.TheyKilledKenny()"}, {"boolOp()"},
		},
		True: test{
			InvalidChecks: []Check{
				{Fn: "Equal", Argsf: "t, %s, true", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "Equal", Argsf: "t, true, %s", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "NotEqual", Argsf: "t, %s, false", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "NotEqual", Argsf: "t, false, %s", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "True", Argsf: "t, %s == true", ReportMsgf: "need to simplify the check"},
				{Fn: "True", Argsf: "t, true == %s", ReportMsgf: "need to simplify the check"},
				{Fn: "False", Argsf: "t, %s == false", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "False", Argsf: "t, false == %s", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "False", Argsf: "t, %s != true", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "False", Argsf: "t, true != %s", ReportMsgf: "use %s.%s", ProposedFn: "True"},
				{Fn: "True", Argsf: "t, %s != false", ReportMsgf: "need to simplify the check"},
				{Fn: "True", Argsf: "t, false != %s", ReportMsgf: "need to simplify the check"},
				{Fn: "False", Argsf: "t, !%s", ReportMsgf: "use %s.%s", ProposedFn: "True"},
			},
			ValidChecks: []Check{
				{Fn: "True", Argsf: "t, %s"},
			},
		},
		False: test{
			InvalidChecks: []Check{
				{Fn: "Equal", Argsf: "t, %s, false", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "Equal", Argsf: "t, false, %s", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "NotEqual", Argsf: "t, %s, true", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "NotEqual", Argsf: "t, true, %s", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "False", Argsf: "t, %s == true", ReportMsgf: "need to simplify the check"},
				{Fn: "False", Argsf: "t, true == %s", ReportMsgf: "need to simplify the check"},
				{Fn: "True", Argsf: "t, %s == false", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "True", Argsf: "t, false == %s", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "True", Argsf: "t, %s != true", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "True", Argsf: "t, true != %s", ReportMsgf: "use %s.%s", ProposedFn: "False"},
				{Fn: "False", Argsf: "t, %s != false", ReportMsgf: "need to simplify the check"},
				{Fn: "False", Argsf: "t, false != %s", ReportMsgf: "need to simplify the check"},
				{Fn: "True", Argsf: "t, !%s", ReportMsgf: "use %s.%s", ProposedFn: "False"},
			},
			ValidChecks: []Check{
				{Fn: "False", Argsf: "t, %s"},
			},
		},
	}
}

var boolCmpCasesTmpl = template.Must(template.New("boolCmpCasesTmpl").
	Funcs(template.FuncMap{
		"ExpandCheck": ExpandCheck,
	}).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestBoolCompare_True(t *testing.T) {
	type withBool struct{ b bool }
	boolOp := func() bool { return true }

	var a bool
	var b withBool
	c := true
	const d = false
	e := new(bool)
	var f *bool
	var g withBoolMethod
	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.True.InvalidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.True.ValidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
	})
	{{ end }}}

func TestBoolCompare_False(t *testing.T) {
	type withBool struct{ b bool }
	boolOp := func() bool { return true }

	var a bool
	var b withBool
	c := true
	const d = false
	e := new(bool)
	var f *bool
	var g withBoolMethod
	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.False.InvalidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.False.ValidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
	})
	{{ end }}}

type withBoolMethod struct{}

func (withBoolMethod) TheyKilledKenny() bool { return false }
`))
