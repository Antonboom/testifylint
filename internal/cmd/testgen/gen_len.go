package main

import "text/template"

type LenCasesGenerator struct{}

func (g LenCasesGenerator) Template() *template.Template {
	return lenCasesTmpl
}

func (g LenCasesGenerator) Data() any {
	return struct {
		Pkgs              []string
		VarSets           [][]any
		InvalidChecks     []Check
		ValidChecks       []Check
		ValidLenLenChecks []Check
	}{
		Pkgs: []string{"assert", "require"},
		VarSets: [][]any{
			{"a"}, {"b.i"}, {"c"}, {"d"}, {"*e"}, {"f.Count()"}, {"intOp()"},
		},
		InvalidChecks: []Check{
			{Fn: "Equal", Argsf: "t, len(arr), %s", ReportMsgf: "use %s.%s", ProposedFn: "Len"},
			{Fn: "Equal", Argsf: "t, %s, len(arr)", ReportMsgf: "use %s.%s", ProposedFn: "Len"},
			{Fn: "True", Argsf: "t, len(arr) == %s", ReportMsgf: "use %s.%s", ProposedFn: "Len"},
			{Fn: "True", Argsf: "t, %s == len(arr)", ReportMsgf: "use %s.%s", ProposedFn: "Len"},
		},
		ValidChecks: []Check{
			{Fn: "Len", Argsf: "t, arr, %s"},
			//{Fn: "NotEqual", Argsf: "t, len(arr), %s"}, // "expected-actual" case.
			{Fn: "NotEqual", Argsf: "t, %s, len(arr)"},
			{Fn: "Greater", Argsf: "t, len(arr), %s"},
			{Fn: "Greater", Argsf: "t, %s, len(arr)"},
			{Fn: "GreaterOrEqual", Argsf: "t, len(arr), %s"},
			{Fn: "GreaterOrEqual", Argsf: "t, %s, len(arr)"},
			{Fn: "Less", Argsf: "t, len(arr), %s"},
			{Fn: "Less", Argsf: "t, %s, len(arr)"},
			{Fn: "LessOrEqual", Argsf: "t, len(arr), %s"},
			{Fn: "LessOrEqual", Argsf: "t, %s, len(arr)"},
		},
		ValidLenLenChecks: []Check{
			{Fn: "Equal", Argsf: "t, len(arr), len(arr)"},
			{Fn: "NotEqual", Argsf: "t, len(arr), len(arr)"},
			{Fn: "Greater", Argsf: "t, len(arr), len(arr)"},
			{Fn: "GreaterOrEqual", Argsf: "t, len(arr), len(arr)"},
			{Fn: "Less", Argsf: "t, len(arr), len(arr)"},
			{Fn: "LessOrEqual", Argsf: "t, len(arr), len(arr)"},
		},
	}
}

var lenCasesTmpl = template.Must(template.New("lenCasesTmpl").
	Funcs(template.FuncMap{
		"ExpandCheck": ExpandCheck,
	}).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLen(t *testing.T) {
	type withInt struct{ i int }
	intOp := func() int { return 42 }

	var a int
	var b withInt
	c := 1
	const d = 2
	e := new(int)
	var f withIntMethod

	arr := [...]int{1, 2, 3}
	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		{
		{{- range $ci, $check := $.ValidLenLenChecks }}
			{{ ExpandCheck $check $pkg nil }}
		{{ end }}}
	})
	{{ end }}}

type withIntMethod struct{}

func (withIntMethod) Count() int { return 1 }
`))
