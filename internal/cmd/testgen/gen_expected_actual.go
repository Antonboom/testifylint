package main

import "text/template"

type ExpectedActualCasesGenerator struct{}

func (g ExpectedActualCasesGenerator) Template() *template.Template {
	return expectedActualCasesTmpl
}

func (g ExpectedActualCasesGenerator) Data() any {
	type test struct {
		VarSets       [][]any
		InvalidChecks []Check
		ValidChecks   []Check
	}

	return struct {
		Pkgs   []string
		Basic  test
		String test
	}{
		Pkgs: []string{"assert", "require"},
		Basic: test{
			VarSets: [][]any{
				{"uint(11)"}, {"uint8(12)"}, {"uint16(13)"}, {"uint32(14)"}, {"uint64(15)"},
				{"21"}, {"int8(22)"}, {"int16(23)"}, {"int32(24)"}, {"int64(25)"},
				{"float32(31.)"}, {"float64(32.)"},
				{"complex64(41 - 0.707i)"}, {"complex128(42 - 0.707i)"},
				{`"string"`}, {"'r'"},

				{"a"}, {"b"}, {"c"}, {"d"}, {"e"}, {"f"}, {"g"}, {"h"},
				{"i"}, {"j"}, {"k"}, {"l"}, {"m"}, {"n"}, {"o"}, {"p"},

				{"aa"}, {"bb"}, {"cc"}, {"dd"}, {"ee"}, {"ff"}, {"gg"}, {"hh"},
				{"ii"}, {"jj"}, {"kk"}, {"ll"}, {"mm"}, {"nn"}, {"oo"}, {"pp"},

				{"Monday"}, {"DayMonday"},

				{"expected"}, {"tt.expected"}, {"ttp.expected"},
			},
			InvalidChecks: []Check{
				{Fn: "Equal", Argsf: "t, result, %s", ReportMsgf: "need to reverse actual and expected values"},
				{Fn: "NotEqual", Argsf: "t, result, %s", ReportMsgf: "need to reverse actual and expected values"},
			},
			ValidChecks: []Check{
				{Fn: "Equal", Argsf: "t, %s, result"},
				{Fn: "NotEqual", Argsf: "t, %s, result"},
			},
		},
		String: test{
			VarSets: [][]any{
				{`"string"`}, {"o"}, {"oo"}, {"string(DayNameMonday)"},
				{"expected"}, {"tt.expected"}, {"ttp.expected"},
			},
			InvalidChecks: []Check{
				{Fn: "JSONEq", Argsf: "t, result, %s", ReportMsgf: "need to reverse actual and expected values"},
				{Fn: "YAMLEq", Argsf: "t, result, %s", ReportMsgf: "need to reverse actual and expected values"},
			},
			ValidChecks: []Check{
				{Fn: "JSONEq", Argsf: "t, %s, result"},
				{Fn: "YAMLEq", Argsf: "t, %s, result"},
			},
		},
	}
}

var expectedActualCasesTmpl = template.Must(template.New("expectedActualCasesTmpl").
	Funcs(template.FuncMap{
		"ExpandCheck": ExpandCheck,
	}).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConfusedWithExpectedActual(t *testing.T) {
	var result string

	const (
		a = uint(11)
		b = uint8(12)
		c = uint16(13)
		d = uint32(14)
		e = uint64(15)

		f = int(21)
		g = int8(22)
		h = int16(23)
		i = int32(24)
		j = int64(25)

		k = float32(31.)
		l = float64(32.)

		m = complex64(41 - 0.707i)
		n = complex128(42 - 0.707i)

		o = "string"
		p = 'r'
	)

	const (
		aa uint   = 11
		bb uint8  = 12
		cc uint16 = 13
		dd uint32 = 14
		ee uint64 = 15

		ff int   = 21
		gg int8  = 22
		hh int16 = 23
		ii int32 = 24
		jj int64 = 25

		kk float32 = 31.
		ll float64 = 32.

		mm complex64  = 41 - 0.707i
		nn complex128 = 42 - 0.707i

		oo string = "string"
		pp rune   = 'r'
	)

	const (
		Sunday = iota
		Monday
	)

	type Day int
	const (
		DaySunday = iota
		DayMonday
	)

	type DayName string
	const DayNameMonday DayName = "Monday"

	var expected string
	var tt struct{ expected string }
	ttp := &struct{ expected string }{}
	{{ range $pi, $pkg := $.Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{
			{{- range $vi, $vars := $.Basic.VarSets }}
			{
				{{- range $ci, $check := $.Basic.InvalidChecks }}
				{{ ExpandCheck $check $pkg $vars }}
				{{ end }}}
			{{ end }}
			// Valid {{ $pkg }}s.
			{{ range $vi, $vars := $.Basic.VarSets }}
			{
				{{- range $ci, $check := $.Basic.ValidChecks }}
				{{ ExpandCheck $check $pkg $vars }}
				{{ end }}}
			{{ end }}}
		
		// String.

		{
			{{- range $vi, $vars := $.String.VarSets }}
			{
				{{- range $ci, $check := $.String.InvalidChecks }}
				{{ ExpandCheck $check $pkg $vars }}
				{{ end }}}
			{{ end }}
			// Valid {{ $pkg }}s.
			{{ range $vi, $vars := $.String.VarSets }}
			{
				{{- range $ci, $check := $.String.ValidChecks }}
				{{ ExpandCheck $check $pkg $vars }}
				{{ end }}}
			{{ end }}}
	})
	{{ end }}}
`))
