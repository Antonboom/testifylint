package main

import "text/template"

type EmptyCasesGenerator struct {
}

func (g EmptyCasesGenerator) Template() *template.Template {
	return emptyCasesTmpl
}

func (g EmptyCasesGenerator) Data() any {
	return struct {
		Pkgs          []string
		Vars          []string
		InvalidChecks []Check
		ValidChecks   []Check
	}{
		Pkgs: []string{"assert", "require"},
		Vars: []string{"a", "aPtr", "s", "m", "ss", "c"},
		InvalidChecks: []Check{
			{Fn: "Len", Args: []string{"t", "%s", "0"}, DynamicArgIndex: 1, ReportedMsg: "use %s.Empty"},
			{Fn: "Equal", Args: []string{"t", "len(%s)", "0"}, DynamicArgIndex: 1, ReportedMsg: "use %s.Empty"},
			{Fn: "Equal", Args: []string{"t", "0", "len(%s)"}, DynamicArgIndex: 2, ReportedMsg: "use %s.Empty"},
			{Fn: "True", Args: []string{"t", "len(%s) == 0"}, DynamicArgIndex: 1, ReportedMsg: "use %s.Empty"},
			{Fn: "True", Args: []string{"t", "0 == len(%s)"}, DynamicArgIndex: 1, ReportedMsg: "use %s.Empty"},
		},
		ValidChecks: []Check{
			{Fn: "Empty", Args: []string{"t", "%s"}, DynamicArgIndex: 1},
		},
	}
}

var emptyCasesTmpl = template.Must(template.New("emptyCasesTmpl").Funcs(fm).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEmptyAsserts(t *testing.T) {
	var (
		a    [0]int
		aPtr *[0]int
		s    []int
		m    map[int]int
		ss   string
		c    chan int
	)
	{{ range $i, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $i, $var := $.Vars }}
		{
			{{- range $i, $check := $.InvalidChecks }}
			{{ ExpandCheck $check $pkg $var }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{ range $i, $var := $.Vars }}
		{
			{{- range $i, $check := $.ValidChecks }}
			{{ ExpandCheck $check $pkg $var }}
			{{ end }}}
		{{ end -}}
	})
	{{ end }}}
`))
