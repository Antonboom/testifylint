package main

import "text/template"

type EmptyCasesGenerator struct{}

func (g EmptyCasesGenerator) Template() *template.Template {
	return emptyCasesTmpl
}

func (g EmptyCasesGenerator) Data() any {
	type test struct {
		InvalidChecks []Check
		ValidChecks   []Check
	}

	return struct {
		Pkgs     []string
		VarSets  [][]any
		Empty    test
		NotEmpty test
	}{
		Pkgs: []string{"assert", "require"},
		VarSets: [][]any{
			{"arr"}, {"arrPtr"}, {"sl"}, {"mp"}, {"str"}, {"ch"}, // TODO: keep only arr like in len-gen
		},
		Empty: test{
			InvalidChecks: []Check{
				{Fn: "Len", Argsf: "t, %s, 0", ReportMsgf: "use %s.%s", ProposedFn: "Empty"},
				{Fn: "Equal", Argsf: "t, len(%s), 0", ReportMsgf: "use %s.%s", ProposedFn: "Empty"},
				{Fn: "Equal", Argsf: "t, 0, len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "Empty"},
				{Fn: "True", Argsf: "t, len(%s) == 0", ReportMsgf: "use %s.%s", ProposedFn: "Empty"},
				{Fn: "True", Argsf: "t, 0 == len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "Empty"},
			},
			ValidChecks: []Check{
				{Fn: "Empty", Argsf: "t, %s"},
			},
		},
		NotEmpty: test{
			InvalidChecks: []Check{
				{Fn: "NotEqual", Argsf: "t, len(%s), 0", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "NotEqual", Argsf: "t, 0, len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "Greater", Argsf: "t, len(%s), 0", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "GreaterOrEqual", Argsf: "t, len(%s), 1", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, len(%s) != 0", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, 0 != len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, len(%s) > 0", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, 0 < len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, len(%s) >= 1", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
				{Fn: "True", Argsf: "t, 1 <= len(%s)", ReportMsgf: "use %s.%s", ProposedFn: "NotEmpty"},
			},
			ValidChecks: []Check{
				{Fn: "NotEmpty", Argsf: "t, %s"},
			},
		},
	}
}

var emptyCasesTmpl = template.Must(template.New("emptyCasesTmpl").
	Funcs(template.FuncMap{
		"ExpandCheck": ExpandCheck,
	}).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEmptyAsserts(t *testing.T) {
	var (
		arr    [0]int
		arrPtr *[0]int
		sl     []int
		mp     map[int]int
		str    string
		ch     chan int
	)
	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.Empty.InvalidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{ range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.Empty.ValidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end -}}
	})
	{{ end }}}

func TestNotEmptyAsserts(t *testing.T) {
	var (
		arr    [0]int
		arrPtr *[0]int
		sl     []int
		mp     map[int]int
		str    string
		ch     chan int
	)
	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{{- range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.NotEmpty.InvalidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end }}
		// Valid {{ $pkg }}s.
		{{ range $vi, $vars := $.VarSets }}
		{
			{{- range $ci, $check := $.NotEmpty.ValidChecks }}
			{{ ExpandCheck $check $pkg $vars }}
			{{ end }}}
		{{ end -}}
	})
	{{ end }}}
`))
