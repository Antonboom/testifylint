package main

import (
	"strings"
	"text/template"
)

type ErrorIsCasesGenerator struct{}

func (g ErrorIsCasesGenerator) Data() any {
	return struct {
		InvalidChecks []Check
		ValidChecks   []Check
	}{
		InvalidChecks: []Check{
			{
				Fn:         "Error",
				Argsf:      "err, errSentinel",
				ReportMsgf: "error-is: invalid usage of %[1]s.Error, use %[1]s.%[2]s instead",
				ProposedFn: "ErrorIs",
			},
			{
				Fn:         "NoError",
				Argsf:      "err, errSentinel",
				ReportMsgf: "error-is: invalid usage of %[1]s.NoError, use %[1]s.%[2]s instead",
				ProposedFn: "NotErrorIs",
			},
		},
		ValidChecks: []Check{
			{Fn: "Error", Argsf: "err"},
			{Fn: "ErrorIs", Argsf: "err, errSentinel"},
			{Fn: "NoError", Argsf: "err"},
			{Fn: "NotErrorIs", Argsf: "err, errSentinel"},
		},
	}
}

func (g ErrorIsCasesGenerator) ErroredTemplate() *template.Template {
	return template.Must(template.New("ErrorIsCasesGenerator.ErroredTemplate").
		Funcs(fm).
		Parse(errorIsCasesTmplText))
}

func (g ErrorIsCasesGenerator) GoldenTemplate() *template.Template {
	return template.Must(template.New("ErrorIsCasesGenerator.GoldenTemplate").
		Funcs(fm).
		Parse(strings.ReplaceAll(errorIsCasesTmplText, "NewCheckerExpander", "NewCheckerExpander.AsGolden")))
}

const errorIsCasesTmplText = `// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

func TestErrorInsteadOfErrorIs(t *testing.T) {
	var errSentinel = errors.New("user not found")
	var err error

	t.Run("assert", func(t *testing.T) {
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutFFuncs.Expand $check "assert" nil }}
			{{ end }}}
		
		// Valid asserts.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.Expand $check "assert" nil }}
			{{ end }}}
	})

	t.Run("assertObj", func(t *testing.T) {
		ass := assert.New(t)

		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "ass" nil }}
			{{ end }}}
		
		// Valid asserts.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "ass" nil }}
			{{ end }}}
	})

	t.Run("require", func(t *testing.T) {
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutFFuncs.Expand $check "require" nil }}
			{{ end }}}
		
		// Valid requires.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.Expand $check "require" nil }}
			{{ end }}}
	})

	t.Run("requireObj", func(t *testing.T) {
		r := require.New(t)

		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "r" nil }}
			{{ end }}}
		
		// Valid requires.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "r" nil }}
			{{ end }}}
	})
}

type ErrorInsteadOfErrorIsSuite struct {
	suite.Suite
}

func (s *ErrorInsteadOfErrorIsSuite) TestAssert() {
	var errSentinel = errors.New("user not found")
	var err error

	{
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "s" nil }}
			{{ end }}}
		
		// Valid asserts.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "s" nil }}
			{{ end }}}
	}

	{
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "s.Assert()" nil }}
			{{ end }}}
		
		// Valid asserts.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "s.Assert()" nil }}
			{{ end }}}
	}

	{
		ass := s.Assert()

		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "ass" nil }}
			{{ end }}}
		
		// Valid asserts.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "ass" nil }}
			{{ end }}}
	}
}

func (s *ErrorInsteadOfErrorIsSuite) TestRequire() {
	var errSentinel = errors.New("user not found")
	var err error

	{
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "s.Require()" nil }}
			{{ end }}}
		
		// Valid requires.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "s.Require()" nil }}
			{{ end }}}
	}

	{
		req := s.Require()

		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ NewCheckerExpander.WithoutTArg.WithoutFFuncs.Expand $check "req" nil }}
			{{ end }}}
		
		// Valid requires.
	
		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ NewCheckerExpander.WithoutTArg.Expand $check "req" nil }}
			{{ end }}}
	}
}`
