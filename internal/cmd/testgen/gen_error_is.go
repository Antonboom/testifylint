package main

import "text/template"

type ErrorIsCasesGenerator struct{}

func (g ErrorIsCasesGenerator) Template() *template.Template {
	return errorIsCasesTmpl
}

func (g ErrorIsCasesGenerator) Data() any {
	return struct {
		Pkgs          []string
		InvalidChecks []Check
		ValidChecks   []Check
	}{
		Pkgs: []string{"assert", "require"},
		InvalidChecks: []Check{
			{
				Fn:           "Error",
				ArgsTmpl:     "t, err, errSentinel",
				ReportedMsgf: "invalid usage of %[1]s.Error, use %[1]s.%[2]s instead",
				ProposedFn:   "ErrorIs",
			},
			{
				Fn:           "NoError",
				ArgsTmpl:     "t, err, errSentinel",
				ReportedMsgf: "invalid usage of %[1]s.NoError, use %[1]s.%[2]s instead",
				ProposedFn:   "NotErrorIs",
			},
		},
		ValidChecks: []Check{
			{Fn: "ErrorIs", ArgsTmpl: "t, err, errSentinel"},
			{Fn: "NotErrorIs", ArgsTmpl: "t, err, errSentinel"},
		},
	}
}

var errorIsCasesTmpl = template.Must(template.New("errorIsCasesTmpl").
	Funcs(template.FuncMap{
		"ExpandCheck": ExpandCheckWithoutF,
	}).
	Parse(`// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestErrorInsteadOfErrorIs(t *testing.T) {
	var errSentinel = errors.New("user not found")
	var err error

	{{ range $pi, $pkg := .Pkgs }}
	t.Run("{{ $pkg }}", func(t *testing.T) {
		{
			{{- range $ci, $check := $.InvalidChecks }}
			{{ ExpandCheck $check $pkg nil }}
			{{ end }}}
		
		// Valid {{ $pkg }}s.

		{
			{{- range $ci, $check := $.ValidChecks }}
			{{ ExpandCheck $check $pkg nil }}
			{{ end }}}
	})
	{{ end }}}
`))
