// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

func TestConfusedWithExpectedActual(t *testing.T) {
	var result string

	const (
		a = uint(11)
		b = uint8(12)
		c = uint16(13)
		d = uint32(14)
		e = uint64(15)

		f = int(21)
		g = int8(22)
		h = int16(23)
		i = int32(24)
		j = int64(25)

		k = float32(31.)
		l = float64(32.)

		m = complex64(41 - 0.707i)
		n = complex128(42 - 0.707i)

		o = "string"
		p = 'r'
	)

	const (
		aa uint   = 11
		bb uint8  = 12
		cc uint16 = 13
		dd uint32 = 14
		ee uint64 = 15

		ff int   = 21
		gg int8  = 22
		hh int16 = 23
		ii int32 = 24
		jj int64 = 25

		kk float32 = 31.
		ll float64 = 32.

		mm complex64  = 41 - 0.707i
		nn complex128 = 42 - 0.707i

		oo string = "string"
		pp rune   = 'r'
	)

	const (
		Sunday = iota
		Monday
	)

	type Day int
	const (
		DaySunday = iota
		DayMonday
	)

	type DayName string
	const DayNameMonday DayName = "Monday"

	var expected string
	var tt struct{ expected string }
	ttp := &struct{ expected string }{}

	t.Run("assert", func(t *testing.T) {
		// Basic.
		{
			{
				assert.Equal(t, uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, 21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, 21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, 21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, 21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, 21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, 21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, 21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, 21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, 21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, 21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, 'r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, 'r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, 'r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, 'r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, 'r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, 'r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, 'r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, 'r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, 'r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, 'r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.Equal(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.Equal(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.Equalf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.NotEqual(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assert.Equal(t, uint(11), result)
				assert.Equal(t, uint(11), result, "msg")
				assert.Equal(t, uint(11), result, "msg with arg %d", 42)
				assert.Equalf(t, uint(11), result, "msg")
				assert.Equalf(t, uint(11), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint(11), result)
				assert.NotEqual(t, uint(11), result, "msg")
				assert.NotEqual(t, uint(11), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint(11), result, "msg")
				assert.NotEqualf(t, uint(11), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint8(12), result)
				assert.Equal(t, uint8(12), result, "msg")
				assert.Equal(t, uint8(12), result, "msg with arg %d", 42)
				assert.Equalf(t, uint8(12), result, "msg")
				assert.Equalf(t, uint8(12), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint8(12), result)
				assert.NotEqual(t, uint8(12), result, "msg")
				assert.NotEqual(t, uint8(12), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint8(12), result, "msg")
				assert.NotEqualf(t, uint8(12), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint16(13), result)
				assert.Equal(t, uint16(13), result, "msg")
				assert.Equal(t, uint16(13), result, "msg with arg %d", 42)
				assert.Equalf(t, uint16(13), result, "msg")
				assert.Equalf(t, uint16(13), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint16(13), result)
				assert.NotEqual(t, uint16(13), result, "msg")
				assert.NotEqual(t, uint16(13), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint16(13), result, "msg")
				assert.NotEqualf(t, uint16(13), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint32(14), result)
				assert.Equal(t, uint32(14), result, "msg")
				assert.Equal(t, uint32(14), result, "msg with arg %d", 42)
				assert.Equalf(t, uint32(14), result, "msg")
				assert.Equalf(t, uint32(14), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint32(14), result)
				assert.NotEqual(t, uint32(14), result, "msg")
				assert.NotEqual(t, uint32(14), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint32(14), result, "msg")
				assert.NotEqualf(t, uint32(14), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint64(15), result)
				assert.Equal(t, uint64(15), result, "msg")
				assert.Equal(t, uint64(15), result, "msg with arg %d", 42)
				assert.Equalf(t, uint64(15), result, "msg")
				assert.Equalf(t, uint64(15), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint64(15), result)
				assert.NotEqual(t, uint64(15), result, "msg")
				assert.NotEqual(t, uint64(15), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint64(15), result, "msg")
				assert.NotEqualf(t, uint64(15), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, 21, result)
				assert.Equal(t, 21, result, "msg")
				assert.Equal(t, 21, result, "msg with arg %d", 42)
				assert.Equalf(t, 21, result, "msg")
				assert.Equalf(t, 21, result, "msg with arg %d", 42)

				assert.NotEqual(t, 21, result)
				assert.NotEqual(t, 21, result, "msg")
				assert.NotEqual(t, 21, result, "msg with arg %d", 42)
				assert.NotEqualf(t, 21, result, "msg")
				assert.NotEqualf(t, 21, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int8(22), result)
				assert.Equal(t, int8(22), result, "msg")
				assert.Equal(t, int8(22), result, "msg with arg %d", 42)
				assert.Equalf(t, int8(22), result, "msg")
				assert.Equalf(t, int8(22), result, "msg with arg %d", 42)

				assert.NotEqual(t, int8(22), result)
				assert.NotEqual(t, int8(22), result, "msg")
				assert.NotEqual(t, int8(22), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int8(22), result, "msg")
				assert.NotEqualf(t, int8(22), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int16(23), result)
				assert.Equal(t, int16(23), result, "msg")
				assert.Equal(t, int16(23), result, "msg with arg %d", 42)
				assert.Equalf(t, int16(23), result, "msg")
				assert.Equalf(t, int16(23), result, "msg with arg %d", 42)

				assert.NotEqual(t, int16(23), result)
				assert.NotEqual(t, int16(23), result, "msg")
				assert.NotEqual(t, int16(23), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int16(23), result, "msg")
				assert.NotEqualf(t, int16(23), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int32(24), result)
				assert.Equal(t, int32(24), result, "msg")
				assert.Equal(t, int32(24), result, "msg with arg %d", 42)
				assert.Equalf(t, int32(24), result, "msg")
				assert.Equalf(t, int32(24), result, "msg with arg %d", 42)

				assert.NotEqual(t, int32(24), result)
				assert.NotEqual(t, int32(24), result, "msg")
				assert.NotEqual(t, int32(24), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int32(24), result, "msg")
				assert.NotEqualf(t, int32(24), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int64(25), result)
				assert.Equal(t, int64(25), result, "msg")
				assert.Equal(t, int64(25), result, "msg with arg %d", 42)
				assert.Equalf(t, int64(25), result, "msg")
				assert.Equalf(t, int64(25), result, "msg with arg %d", 42)

				assert.NotEqual(t, int64(25), result)
				assert.NotEqual(t, int64(25), result, "msg")
				assert.NotEqual(t, int64(25), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int64(25), result, "msg")
				assert.NotEqualf(t, int64(25), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, float32(31.), result)
				assert.Equal(t, float32(31.), result, "msg")
				assert.Equal(t, float32(31.), result, "msg with arg %d", 42)
				assert.Equalf(t, float32(31.), result, "msg")
				assert.Equalf(t, float32(31.), result, "msg with arg %d", 42)

				assert.NotEqual(t, float32(31.), result)
				assert.NotEqual(t, float32(31.), result, "msg")
				assert.NotEqual(t, float32(31.), result, "msg with arg %d", 42)
				assert.NotEqualf(t, float32(31.), result, "msg")
				assert.NotEqualf(t, float32(31.), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, float64(32.), result)
				assert.Equal(t, float64(32.), result, "msg")
				assert.Equal(t, float64(32.), result, "msg with arg %d", 42)
				assert.Equalf(t, float64(32.), result, "msg")
				assert.Equalf(t, float64(32.), result, "msg with arg %d", 42)

				assert.NotEqual(t, float64(32.), result)
				assert.NotEqual(t, float64(32.), result, "msg")
				assert.NotEqual(t, float64(32.), result, "msg with arg %d", 42)
				assert.NotEqualf(t, float64(32.), result, "msg")
				assert.NotEqualf(t, float64(32.), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, complex64(41-0.707i), result)
				assert.Equal(t, complex64(41-0.707i), result, "msg")
				assert.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				assert.Equalf(t, complex64(41-0.707i), result, "msg")
				assert.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42)

				assert.NotEqual(t, complex64(41-0.707i), result)
				assert.NotEqual(t, complex64(41-0.707i), result, "msg")
				assert.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg")
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, complex128(42-0.707i), result)
				assert.Equal(t, complex128(42-0.707i), result, "msg")
				assert.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				assert.Equalf(t, complex128(42-0.707i), result, "msg")
				assert.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42)

				assert.NotEqual(t, complex128(42-0.707i), result)
				assert.NotEqual(t, complex128(42-0.707i), result, "msg")
				assert.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg")
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, "string", result)
				assert.Equal(t, "string", result, "msg")
				assert.Equal(t, "string", result, "msg with arg %d", 42)
				assert.Equalf(t, "string", result, "msg")
				assert.Equalf(t, "string", result, "msg with arg %d", 42)

				assert.NotEqual(t, "string", result)
				assert.NotEqual(t, "string", result, "msg")
				assert.NotEqual(t, "string", result, "msg with arg %d", 42)
				assert.NotEqualf(t, "string", result, "msg")
				assert.NotEqualf(t, "string", result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, 'r', result)
				assert.Equal(t, 'r', result, "msg")
				assert.Equal(t, 'r', result, "msg with arg %d", 42)
				assert.Equalf(t, 'r', result, "msg")
				assert.Equalf(t, 'r', result, "msg with arg %d", 42)

				assert.NotEqual(t, 'r', result)
				assert.NotEqual(t, 'r', result, "msg")
				assert.NotEqual(t, 'r', result, "msg with arg %d", 42)
				assert.NotEqualf(t, 'r', result, "msg")
				assert.NotEqualf(t, 'r', result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, a, result)
				assert.Equal(t, a, result, "msg")
				assert.Equal(t, a, result, "msg with arg %d", 42)
				assert.Equalf(t, a, result, "msg")
				assert.Equalf(t, a, result, "msg with arg %d", 42)

				assert.NotEqual(t, a, result)
				assert.NotEqual(t, a, result, "msg")
				assert.NotEqual(t, a, result, "msg with arg %d", 42)
				assert.NotEqualf(t, a, result, "msg")
				assert.NotEqualf(t, a, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, b, result)
				assert.Equal(t, b, result, "msg")
				assert.Equal(t, b, result, "msg with arg %d", 42)
				assert.Equalf(t, b, result, "msg")
				assert.Equalf(t, b, result, "msg with arg %d", 42)

				assert.NotEqual(t, b, result)
				assert.NotEqual(t, b, result, "msg")
				assert.NotEqual(t, b, result, "msg with arg %d", 42)
				assert.NotEqualf(t, b, result, "msg")
				assert.NotEqualf(t, b, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, c, result)
				assert.Equal(t, c, result, "msg")
				assert.Equal(t, c, result, "msg with arg %d", 42)
				assert.Equalf(t, c, result, "msg")
				assert.Equalf(t, c, result, "msg with arg %d", 42)

				assert.NotEqual(t, c, result)
				assert.NotEqual(t, c, result, "msg")
				assert.NotEqual(t, c, result, "msg with arg %d", 42)
				assert.NotEqualf(t, c, result, "msg")
				assert.NotEqualf(t, c, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, d, result)
				assert.Equal(t, d, result, "msg")
				assert.Equal(t, d, result, "msg with arg %d", 42)
				assert.Equalf(t, d, result, "msg")
				assert.Equalf(t, d, result, "msg with arg %d", 42)

				assert.NotEqual(t, d, result)
				assert.NotEqual(t, d, result, "msg")
				assert.NotEqual(t, d, result, "msg with arg %d", 42)
				assert.NotEqualf(t, d, result, "msg")
				assert.NotEqualf(t, d, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, e, result)
				assert.Equal(t, e, result, "msg")
				assert.Equal(t, e, result, "msg with arg %d", 42)
				assert.Equalf(t, e, result, "msg")
				assert.Equalf(t, e, result, "msg with arg %d", 42)

				assert.NotEqual(t, e, result)
				assert.NotEqual(t, e, result, "msg")
				assert.NotEqual(t, e, result, "msg with arg %d", 42)
				assert.NotEqualf(t, e, result, "msg")
				assert.NotEqualf(t, e, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, f, result)
				assert.Equal(t, f, result, "msg")
				assert.Equal(t, f, result, "msg with arg %d", 42)
				assert.Equalf(t, f, result, "msg")
				assert.Equalf(t, f, result, "msg with arg %d", 42)

				assert.NotEqual(t, f, result)
				assert.NotEqual(t, f, result, "msg")
				assert.NotEqual(t, f, result, "msg with arg %d", 42)
				assert.NotEqualf(t, f, result, "msg")
				assert.NotEqualf(t, f, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, g, result)
				assert.Equal(t, g, result, "msg")
				assert.Equal(t, g, result, "msg with arg %d", 42)
				assert.Equalf(t, g, result, "msg")
				assert.Equalf(t, g, result, "msg with arg %d", 42)

				assert.NotEqual(t, g, result)
				assert.NotEqual(t, g, result, "msg")
				assert.NotEqual(t, g, result, "msg with arg %d", 42)
				assert.NotEqualf(t, g, result, "msg")
				assert.NotEqualf(t, g, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, h, result)
				assert.Equal(t, h, result, "msg")
				assert.Equal(t, h, result, "msg with arg %d", 42)
				assert.Equalf(t, h, result, "msg")
				assert.Equalf(t, h, result, "msg with arg %d", 42)

				assert.NotEqual(t, h, result)
				assert.NotEqual(t, h, result, "msg")
				assert.NotEqual(t, h, result, "msg with arg %d", 42)
				assert.NotEqualf(t, h, result, "msg")
				assert.NotEqualf(t, h, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, i, result)
				assert.Equal(t, i, result, "msg")
				assert.Equal(t, i, result, "msg with arg %d", 42)
				assert.Equalf(t, i, result, "msg")
				assert.Equalf(t, i, result, "msg with arg %d", 42)

				assert.NotEqual(t, i, result)
				assert.NotEqual(t, i, result, "msg")
				assert.NotEqual(t, i, result, "msg with arg %d", 42)
				assert.NotEqualf(t, i, result, "msg")
				assert.NotEqualf(t, i, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, j, result)
				assert.Equal(t, j, result, "msg")
				assert.Equal(t, j, result, "msg with arg %d", 42)
				assert.Equalf(t, j, result, "msg")
				assert.Equalf(t, j, result, "msg with arg %d", 42)

				assert.NotEqual(t, j, result)
				assert.NotEqual(t, j, result, "msg")
				assert.NotEqual(t, j, result, "msg with arg %d", 42)
				assert.NotEqualf(t, j, result, "msg")
				assert.NotEqualf(t, j, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, k, result)
				assert.Equal(t, k, result, "msg")
				assert.Equal(t, k, result, "msg with arg %d", 42)
				assert.Equalf(t, k, result, "msg")
				assert.Equalf(t, k, result, "msg with arg %d", 42)

				assert.NotEqual(t, k, result)
				assert.NotEqual(t, k, result, "msg")
				assert.NotEqual(t, k, result, "msg with arg %d", 42)
				assert.NotEqualf(t, k, result, "msg")
				assert.NotEqualf(t, k, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, l, result)
				assert.Equal(t, l, result, "msg")
				assert.Equal(t, l, result, "msg with arg %d", 42)
				assert.Equalf(t, l, result, "msg")
				assert.Equalf(t, l, result, "msg with arg %d", 42)

				assert.NotEqual(t, l, result)
				assert.NotEqual(t, l, result, "msg")
				assert.NotEqual(t, l, result, "msg with arg %d", 42)
				assert.NotEqualf(t, l, result, "msg")
				assert.NotEqualf(t, l, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, m, result)
				assert.Equal(t, m, result, "msg")
				assert.Equal(t, m, result, "msg with arg %d", 42)
				assert.Equalf(t, m, result, "msg")
				assert.Equalf(t, m, result, "msg with arg %d", 42)

				assert.NotEqual(t, m, result)
				assert.NotEqual(t, m, result, "msg")
				assert.NotEqual(t, m, result, "msg with arg %d", 42)
				assert.NotEqualf(t, m, result, "msg")
				assert.NotEqualf(t, m, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, n, result)
				assert.Equal(t, n, result, "msg")
				assert.Equal(t, n, result, "msg with arg %d", 42)
				assert.Equalf(t, n, result, "msg")
				assert.Equalf(t, n, result, "msg with arg %d", 42)

				assert.NotEqual(t, n, result)
				assert.NotEqual(t, n, result, "msg")
				assert.NotEqual(t, n, result, "msg with arg %d", 42)
				assert.NotEqualf(t, n, result, "msg")
				assert.NotEqualf(t, n, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, o, result)
				assert.Equal(t, o, result, "msg")
				assert.Equal(t, o, result, "msg with arg %d", 42)
				assert.Equalf(t, o, result, "msg")
				assert.Equalf(t, o, result, "msg with arg %d", 42)

				assert.NotEqual(t, o, result)
				assert.NotEqual(t, o, result, "msg")
				assert.NotEqual(t, o, result, "msg with arg %d", 42)
				assert.NotEqualf(t, o, result, "msg")
				assert.NotEqualf(t, o, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, p, result)
				assert.Equal(t, p, result, "msg")
				assert.Equal(t, p, result, "msg with arg %d", 42)
				assert.Equalf(t, p, result, "msg")
				assert.Equalf(t, p, result, "msg with arg %d", 42)

				assert.NotEqual(t, p, result)
				assert.NotEqual(t, p, result, "msg")
				assert.NotEqual(t, p, result, "msg with arg %d", 42)
				assert.NotEqualf(t, p, result, "msg")
				assert.NotEqualf(t, p, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, aa, result)
				assert.Equal(t, aa, result, "msg")
				assert.Equal(t, aa, result, "msg with arg %d", 42)
				assert.Equalf(t, aa, result, "msg")
				assert.Equalf(t, aa, result, "msg with arg %d", 42)

				assert.NotEqual(t, aa, result)
				assert.NotEqual(t, aa, result, "msg")
				assert.NotEqual(t, aa, result, "msg with arg %d", 42)
				assert.NotEqualf(t, aa, result, "msg")
				assert.NotEqualf(t, aa, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, bb, result)
				assert.Equal(t, bb, result, "msg")
				assert.Equal(t, bb, result, "msg with arg %d", 42)
				assert.Equalf(t, bb, result, "msg")
				assert.Equalf(t, bb, result, "msg with arg %d", 42)

				assert.NotEqual(t, bb, result)
				assert.NotEqual(t, bb, result, "msg")
				assert.NotEqual(t, bb, result, "msg with arg %d", 42)
				assert.NotEqualf(t, bb, result, "msg")
				assert.NotEqualf(t, bb, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, cc, result)
				assert.Equal(t, cc, result, "msg")
				assert.Equal(t, cc, result, "msg with arg %d", 42)
				assert.Equalf(t, cc, result, "msg")
				assert.Equalf(t, cc, result, "msg with arg %d", 42)

				assert.NotEqual(t, cc, result)
				assert.NotEqual(t, cc, result, "msg")
				assert.NotEqual(t, cc, result, "msg with arg %d", 42)
				assert.NotEqualf(t, cc, result, "msg")
				assert.NotEqualf(t, cc, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, dd, result)
				assert.Equal(t, dd, result, "msg")
				assert.Equal(t, dd, result, "msg with arg %d", 42)
				assert.Equalf(t, dd, result, "msg")
				assert.Equalf(t, dd, result, "msg with arg %d", 42)

				assert.NotEqual(t, dd, result)
				assert.NotEqual(t, dd, result, "msg")
				assert.NotEqual(t, dd, result, "msg with arg %d", 42)
				assert.NotEqualf(t, dd, result, "msg")
				assert.NotEqualf(t, dd, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ee, result)
				assert.Equal(t, ee, result, "msg")
				assert.Equal(t, ee, result, "msg with arg %d", 42)
				assert.Equalf(t, ee, result, "msg")
				assert.Equalf(t, ee, result, "msg with arg %d", 42)

				assert.NotEqual(t, ee, result)
				assert.NotEqual(t, ee, result, "msg")
				assert.NotEqual(t, ee, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ee, result, "msg")
				assert.NotEqualf(t, ee, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ff, result)
				assert.Equal(t, ff, result, "msg")
				assert.Equal(t, ff, result, "msg with arg %d", 42)
				assert.Equalf(t, ff, result, "msg")
				assert.Equalf(t, ff, result, "msg with arg %d", 42)

				assert.NotEqual(t, ff, result)
				assert.NotEqual(t, ff, result, "msg")
				assert.NotEqual(t, ff, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ff, result, "msg")
				assert.NotEqualf(t, ff, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, gg, result)
				assert.Equal(t, gg, result, "msg")
				assert.Equal(t, gg, result, "msg with arg %d", 42)
				assert.Equalf(t, gg, result, "msg")
				assert.Equalf(t, gg, result, "msg with arg %d", 42)

				assert.NotEqual(t, gg, result)
				assert.NotEqual(t, gg, result, "msg")
				assert.NotEqual(t, gg, result, "msg with arg %d", 42)
				assert.NotEqualf(t, gg, result, "msg")
				assert.NotEqualf(t, gg, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, hh, result)
				assert.Equal(t, hh, result, "msg")
				assert.Equal(t, hh, result, "msg with arg %d", 42)
				assert.Equalf(t, hh, result, "msg")
				assert.Equalf(t, hh, result, "msg with arg %d", 42)

				assert.NotEqual(t, hh, result)
				assert.NotEqual(t, hh, result, "msg")
				assert.NotEqual(t, hh, result, "msg with arg %d", 42)
				assert.NotEqualf(t, hh, result, "msg")
				assert.NotEqualf(t, hh, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ii, result)
				assert.Equal(t, ii, result, "msg")
				assert.Equal(t, ii, result, "msg with arg %d", 42)
				assert.Equalf(t, ii, result, "msg")
				assert.Equalf(t, ii, result, "msg with arg %d", 42)

				assert.NotEqual(t, ii, result)
				assert.NotEqual(t, ii, result, "msg")
				assert.NotEqual(t, ii, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ii, result, "msg")
				assert.NotEqualf(t, ii, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, jj, result)
				assert.Equal(t, jj, result, "msg")
				assert.Equal(t, jj, result, "msg with arg %d", 42)
				assert.Equalf(t, jj, result, "msg")
				assert.Equalf(t, jj, result, "msg with arg %d", 42)

				assert.NotEqual(t, jj, result)
				assert.NotEqual(t, jj, result, "msg")
				assert.NotEqual(t, jj, result, "msg with arg %d", 42)
				assert.NotEqualf(t, jj, result, "msg")
				assert.NotEqualf(t, jj, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, kk, result)
				assert.Equal(t, kk, result, "msg")
				assert.Equal(t, kk, result, "msg with arg %d", 42)
				assert.Equalf(t, kk, result, "msg")
				assert.Equalf(t, kk, result, "msg with arg %d", 42)

				assert.NotEqual(t, kk, result)
				assert.NotEqual(t, kk, result, "msg")
				assert.NotEqual(t, kk, result, "msg with arg %d", 42)
				assert.NotEqualf(t, kk, result, "msg")
				assert.NotEqualf(t, kk, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ll, result)
				assert.Equal(t, ll, result, "msg")
				assert.Equal(t, ll, result, "msg with arg %d", 42)
				assert.Equalf(t, ll, result, "msg")
				assert.Equalf(t, ll, result, "msg with arg %d", 42)

				assert.NotEqual(t, ll, result)
				assert.NotEqual(t, ll, result, "msg")
				assert.NotEqual(t, ll, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ll, result, "msg")
				assert.NotEqualf(t, ll, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, mm, result)
				assert.Equal(t, mm, result, "msg")
				assert.Equal(t, mm, result, "msg with arg %d", 42)
				assert.Equalf(t, mm, result, "msg")
				assert.Equalf(t, mm, result, "msg with arg %d", 42)

				assert.NotEqual(t, mm, result)
				assert.NotEqual(t, mm, result, "msg")
				assert.NotEqual(t, mm, result, "msg with arg %d", 42)
				assert.NotEqualf(t, mm, result, "msg")
				assert.NotEqualf(t, mm, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, nn, result)
				assert.Equal(t, nn, result, "msg")
				assert.Equal(t, nn, result, "msg with arg %d", 42)
				assert.Equalf(t, nn, result, "msg")
				assert.Equalf(t, nn, result, "msg with arg %d", 42)

				assert.NotEqual(t, nn, result)
				assert.NotEqual(t, nn, result, "msg")
				assert.NotEqual(t, nn, result, "msg with arg %d", 42)
				assert.NotEqualf(t, nn, result, "msg")
				assert.NotEqualf(t, nn, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, oo, result)
				assert.Equal(t, oo, result, "msg")
				assert.Equal(t, oo, result, "msg with arg %d", 42)
				assert.Equalf(t, oo, result, "msg")
				assert.Equalf(t, oo, result, "msg with arg %d", 42)

				assert.NotEqual(t, oo, result)
				assert.NotEqual(t, oo, result, "msg")
				assert.NotEqual(t, oo, result, "msg with arg %d", 42)
				assert.NotEqualf(t, oo, result, "msg")
				assert.NotEqualf(t, oo, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, pp, result)
				assert.Equal(t, pp, result, "msg")
				assert.Equal(t, pp, result, "msg with arg %d", 42)
				assert.Equalf(t, pp, result, "msg")
				assert.Equalf(t, pp, result, "msg with arg %d", 42)

				assert.NotEqual(t, pp, result)
				assert.NotEqual(t, pp, result, "msg")
				assert.NotEqual(t, pp, result, "msg with arg %d", 42)
				assert.NotEqualf(t, pp, result, "msg")
				assert.NotEqualf(t, pp, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, Monday, result)
				assert.Equal(t, Monday, result, "msg")
				assert.Equal(t, Monday, result, "msg with arg %d", 42)
				assert.Equalf(t, Monday, result, "msg")
				assert.Equalf(t, Monday, result, "msg with arg %d", 42)

				assert.NotEqual(t, Monday, result)
				assert.NotEqual(t, Monday, result, "msg")
				assert.NotEqual(t, Monday, result, "msg with arg %d", 42)
				assert.NotEqualf(t, Monday, result, "msg")
				assert.NotEqualf(t, Monday, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, DayMonday, result)
				assert.Equal(t, DayMonday, result, "msg")
				assert.Equal(t, DayMonday, result, "msg with arg %d", 42)
				assert.Equalf(t, DayMonday, result, "msg")
				assert.Equalf(t, DayMonday, result, "msg with arg %d", 42)

				assert.NotEqual(t, DayMonday, result)
				assert.NotEqual(t, DayMonday, result, "msg")
				assert.NotEqual(t, DayMonday, result, "msg with arg %d", 42)
				assert.NotEqualf(t, DayMonday, result, "msg")
				assert.NotEqualf(t, DayMonday, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, expected, result)
				assert.Equal(t, expected, result, "msg")
				assert.Equal(t, expected, result, "msg with arg %d", 42)
				assert.Equalf(t, expected, result, "msg")
				assert.Equalf(t, expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, expected, result)
				assert.NotEqual(t, expected, result, "msg")
				assert.NotEqual(t, expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, expected, result, "msg")
				assert.NotEqualf(t, expected, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, tt.expected, result)
				assert.Equal(t, tt.expected, result, "msg")
				assert.Equal(t, tt.expected, result, "msg with arg %d", 42)
				assert.Equalf(t, tt.expected, result, "msg")
				assert.Equalf(t, tt.expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, tt.expected, result)
				assert.NotEqual(t, tt.expected, result, "msg")
				assert.NotEqual(t, tt.expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, tt.expected, result, "msg")
				assert.NotEqualf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ttp.expected, result)
				assert.Equal(t, ttp.expected, result, "msg")
				assert.Equal(t, ttp.expected, result, "msg with arg %d", 42)
				assert.Equalf(t, ttp.expected, result, "msg")
				assert.Equalf(t, ttp.expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, ttp.expected, result)
				assert.NotEqual(t, ttp.expected, result, "msg")
				assert.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ttp.expected, result, "msg")
				assert.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.
		{
			{
				assert.JSONEq(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assert.YAMLEq(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assert.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assert.JSONEq(t, "string", result)
				assert.JSONEq(t, "string", result, "msg")
				assert.JSONEq(t, "string", result, "msg with arg %d", 42)
				assert.JSONEqf(t, "string", result, "msg")
				assert.JSONEqf(t, "string", result, "msg with arg %d", 42)

				assert.YAMLEq(t, "string", result)
				assert.YAMLEq(t, "string", result, "msg")
				assert.YAMLEq(t, "string", result, "msg with arg %d", 42)
				assert.YAMLEqf(t, "string", result, "msg")
				assert.YAMLEqf(t, "string", result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, o, result)
				assert.JSONEq(t, o, result, "msg")
				assert.JSONEq(t, o, result, "msg with arg %d", 42)
				assert.JSONEqf(t, o, result, "msg")
				assert.JSONEqf(t, o, result, "msg with arg %d", 42)

				assert.YAMLEq(t, o, result)
				assert.YAMLEq(t, o, result, "msg")
				assert.YAMLEq(t, o, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, o, result, "msg")
				assert.YAMLEqf(t, o, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, oo, result)
				assert.JSONEq(t, oo, result, "msg")
				assert.JSONEq(t, oo, result, "msg with arg %d", 42)
				assert.JSONEqf(t, oo, result, "msg")
				assert.JSONEqf(t, oo, result, "msg with arg %d", 42)

				assert.YAMLEq(t, oo, result)
				assert.YAMLEq(t, oo, result, "msg")
				assert.YAMLEq(t, oo, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, oo, result, "msg")
				assert.YAMLEqf(t, oo, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, string(DayNameMonday), result)
				assert.JSONEq(t, string(DayNameMonday), result, "msg")
				assert.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				assert.JSONEqf(t, string(DayNameMonday), result, "msg")
				assert.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)

				assert.YAMLEq(t, string(DayNameMonday), result)
				assert.YAMLEq(t, string(DayNameMonday), result, "msg")
				assert.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg")
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, expected, result)
				assert.JSONEq(t, expected, result, "msg")
				assert.JSONEq(t, expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, expected, result, "msg")
				assert.JSONEqf(t, expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, expected, result)
				assert.YAMLEq(t, expected, result, "msg")
				assert.YAMLEq(t, expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, expected, result, "msg")
				assert.YAMLEqf(t, expected, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, tt.expected, result)
				assert.JSONEq(t, tt.expected, result, "msg")
				assert.JSONEq(t, tt.expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, tt.expected, result, "msg")
				assert.JSONEqf(t, tt.expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, tt.expected, result)
				assert.YAMLEq(t, tt.expected, result, "msg")
				assert.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, tt.expected, result, "msg")
				assert.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, ttp.expected, result)
				assert.JSONEq(t, ttp.expected, result, "msg")
				assert.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, ttp.expected, result, "msg")
				assert.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, ttp.expected, result)
				assert.YAMLEq(t, ttp.expected, result, "msg")
				assert.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, ttp.expected, result, "msg")
				assert.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})

	t.Run("require", func(t *testing.T) {
		// Basic.
		{
			{
				require.Equal(t, uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, 21, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, 21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, 21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, 21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, 21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, 21, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, 21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, 21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, 21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, 21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, 'r', result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, 'r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, 'r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, 'r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, 'r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, 'r', result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, 'r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, 'r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, 'r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, 'r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, a, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, a, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, b, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, b, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, c, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, c, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, d, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, d, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, e, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, e, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, f, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, f, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, g, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, g, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, h, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, h, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, i, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, i, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, j, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, j, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, k, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, k, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, l, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, l, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, m, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, m, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, n, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, n, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, p, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, p, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.Equal(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.Equal(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.Equalf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.NotEqual(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				require.Equal(t, uint(11), result)
				require.Equal(t, uint(11), result, "msg")
				require.Equal(t, uint(11), result, "msg with arg %d", 42)
				require.Equalf(t, uint(11), result, "msg")
				require.Equalf(t, uint(11), result, "msg with arg %d", 42)

				require.NotEqual(t, uint(11), result)
				require.NotEqual(t, uint(11), result, "msg")
				require.NotEqual(t, uint(11), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint(11), result, "msg")
				require.NotEqualf(t, uint(11), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint8(12), result)
				require.Equal(t, uint8(12), result, "msg")
				require.Equal(t, uint8(12), result, "msg with arg %d", 42)
				require.Equalf(t, uint8(12), result, "msg")
				require.Equalf(t, uint8(12), result, "msg with arg %d", 42)

				require.NotEqual(t, uint8(12), result)
				require.NotEqual(t, uint8(12), result, "msg")
				require.NotEqual(t, uint8(12), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint8(12), result, "msg")
				require.NotEqualf(t, uint8(12), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint16(13), result)
				require.Equal(t, uint16(13), result, "msg")
				require.Equal(t, uint16(13), result, "msg with arg %d", 42)
				require.Equalf(t, uint16(13), result, "msg")
				require.Equalf(t, uint16(13), result, "msg with arg %d", 42)

				require.NotEqual(t, uint16(13), result)
				require.NotEqual(t, uint16(13), result, "msg")
				require.NotEqual(t, uint16(13), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint16(13), result, "msg")
				require.NotEqualf(t, uint16(13), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint32(14), result)
				require.Equal(t, uint32(14), result, "msg")
				require.Equal(t, uint32(14), result, "msg with arg %d", 42)
				require.Equalf(t, uint32(14), result, "msg")
				require.Equalf(t, uint32(14), result, "msg with arg %d", 42)

				require.NotEqual(t, uint32(14), result)
				require.NotEqual(t, uint32(14), result, "msg")
				require.NotEqual(t, uint32(14), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint32(14), result, "msg")
				require.NotEqualf(t, uint32(14), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint64(15), result)
				require.Equal(t, uint64(15), result, "msg")
				require.Equal(t, uint64(15), result, "msg with arg %d", 42)
				require.Equalf(t, uint64(15), result, "msg")
				require.Equalf(t, uint64(15), result, "msg with arg %d", 42)

				require.NotEqual(t, uint64(15), result)
				require.NotEqual(t, uint64(15), result, "msg")
				require.NotEqual(t, uint64(15), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint64(15), result, "msg")
				require.NotEqualf(t, uint64(15), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, 21, result)
				require.Equal(t, 21, result, "msg")
				require.Equal(t, 21, result, "msg with arg %d", 42)
				require.Equalf(t, 21, result, "msg")
				require.Equalf(t, 21, result, "msg with arg %d", 42)

				require.NotEqual(t, 21, result)
				require.NotEqual(t, 21, result, "msg")
				require.NotEqual(t, 21, result, "msg with arg %d", 42)
				require.NotEqualf(t, 21, result, "msg")
				require.NotEqualf(t, 21, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int8(22), result)
				require.Equal(t, int8(22), result, "msg")
				require.Equal(t, int8(22), result, "msg with arg %d", 42)
				require.Equalf(t, int8(22), result, "msg")
				require.Equalf(t, int8(22), result, "msg with arg %d", 42)

				require.NotEqual(t, int8(22), result)
				require.NotEqual(t, int8(22), result, "msg")
				require.NotEqual(t, int8(22), result, "msg with arg %d", 42)
				require.NotEqualf(t, int8(22), result, "msg")
				require.NotEqualf(t, int8(22), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int16(23), result)
				require.Equal(t, int16(23), result, "msg")
				require.Equal(t, int16(23), result, "msg with arg %d", 42)
				require.Equalf(t, int16(23), result, "msg")
				require.Equalf(t, int16(23), result, "msg with arg %d", 42)

				require.NotEqual(t, int16(23), result)
				require.NotEqual(t, int16(23), result, "msg")
				require.NotEqual(t, int16(23), result, "msg with arg %d", 42)
				require.NotEqualf(t, int16(23), result, "msg")
				require.NotEqualf(t, int16(23), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int32(24), result)
				require.Equal(t, int32(24), result, "msg")
				require.Equal(t, int32(24), result, "msg with arg %d", 42)
				require.Equalf(t, int32(24), result, "msg")
				require.Equalf(t, int32(24), result, "msg with arg %d", 42)

				require.NotEqual(t, int32(24), result)
				require.NotEqual(t, int32(24), result, "msg")
				require.NotEqual(t, int32(24), result, "msg with arg %d", 42)
				require.NotEqualf(t, int32(24), result, "msg")
				require.NotEqualf(t, int32(24), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int64(25), result)
				require.Equal(t, int64(25), result, "msg")
				require.Equal(t, int64(25), result, "msg with arg %d", 42)
				require.Equalf(t, int64(25), result, "msg")
				require.Equalf(t, int64(25), result, "msg with arg %d", 42)

				require.NotEqual(t, int64(25), result)
				require.NotEqual(t, int64(25), result, "msg")
				require.NotEqual(t, int64(25), result, "msg with arg %d", 42)
				require.NotEqualf(t, int64(25), result, "msg")
				require.NotEqualf(t, int64(25), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, float32(31.), result)
				require.Equal(t, float32(31.), result, "msg")
				require.Equal(t, float32(31.), result, "msg with arg %d", 42)
				require.Equalf(t, float32(31.), result, "msg")
				require.Equalf(t, float32(31.), result, "msg with arg %d", 42)

				require.NotEqual(t, float32(31.), result)
				require.NotEqual(t, float32(31.), result, "msg")
				require.NotEqual(t, float32(31.), result, "msg with arg %d", 42)
				require.NotEqualf(t, float32(31.), result, "msg")
				require.NotEqualf(t, float32(31.), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, float64(32.), result)
				require.Equal(t, float64(32.), result, "msg")
				require.Equal(t, float64(32.), result, "msg with arg %d", 42)
				require.Equalf(t, float64(32.), result, "msg")
				require.Equalf(t, float64(32.), result, "msg with arg %d", 42)

				require.NotEqual(t, float64(32.), result)
				require.NotEqual(t, float64(32.), result, "msg")
				require.NotEqual(t, float64(32.), result, "msg with arg %d", 42)
				require.NotEqualf(t, float64(32.), result, "msg")
				require.NotEqualf(t, float64(32.), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, complex64(41-0.707i), result)
				require.Equal(t, complex64(41-0.707i), result, "msg")
				require.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				require.Equalf(t, complex64(41-0.707i), result, "msg")
				require.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42)

				require.NotEqual(t, complex64(41-0.707i), result)
				require.NotEqual(t, complex64(41-0.707i), result, "msg")
				require.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				require.NotEqualf(t, complex64(41-0.707i), result, "msg")
				require.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, complex128(42-0.707i), result)
				require.Equal(t, complex128(42-0.707i), result, "msg")
				require.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				require.Equalf(t, complex128(42-0.707i), result, "msg")
				require.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42)

				require.NotEqual(t, complex128(42-0.707i), result)
				require.NotEqual(t, complex128(42-0.707i), result, "msg")
				require.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				require.NotEqualf(t, complex128(42-0.707i), result, "msg")
				require.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, "string", result)
				require.Equal(t, "string", result, "msg")
				require.Equal(t, "string", result, "msg with arg %d", 42)
				require.Equalf(t, "string", result, "msg")
				require.Equalf(t, "string", result, "msg with arg %d", 42)

				require.NotEqual(t, "string", result)
				require.NotEqual(t, "string", result, "msg")
				require.NotEqual(t, "string", result, "msg with arg %d", 42)
				require.NotEqualf(t, "string", result, "msg")
				require.NotEqualf(t, "string", result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, 'r', result)
				require.Equal(t, 'r', result, "msg")
				require.Equal(t, 'r', result, "msg with arg %d", 42)
				require.Equalf(t, 'r', result, "msg")
				require.Equalf(t, 'r', result, "msg with arg %d", 42)

				require.NotEqual(t, 'r', result)
				require.NotEqual(t, 'r', result, "msg")
				require.NotEqual(t, 'r', result, "msg with arg %d", 42)
				require.NotEqualf(t, 'r', result, "msg")
				require.NotEqualf(t, 'r', result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, a, result)
				require.Equal(t, a, result, "msg")
				require.Equal(t, a, result, "msg with arg %d", 42)
				require.Equalf(t, a, result, "msg")
				require.Equalf(t, a, result, "msg with arg %d", 42)

				require.NotEqual(t, a, result)
				require.NotEqual(t, a, result, "msg")
				require.NotEqual(t, a, result, "msg with arg %d", 42)
				require.NotEqualf(t, a, result, "msg")
				require.NotEqualf(t, a, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, b, result)
				require.Equal(t, b, result, "msg")
				require.Equal(t, b, result, "msg with arg %d", 42)
				require.Equalf(t, b, result, "msg")
				require.Equalf(t, b, result, "msg with arg %d", 42)

				require.NotEqual(t, b, result)
				require.NotEqual(t, b, result, "msg")
				require.NotEqual(t, b, result, "msg with arg %d", 42)
				require.NotEqualf(t, b, result, "msg")
				require.NotEqualf(t, b, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, c, result)
				require.Equal(t, c, result, "msg")
				require.Equal(t, c, result, "msg with arg %d", 42)
				require.Equalf(t, c, result, "msg")
				require.Equalf(t, c, result, "msg with arg %d", 42)

				require.NotEqual(t, c, result)
				require.NotEqual(t, c, result, "msg")
				require.NotEqual(t, c, result, "msg with arg %d", 42)
				require.NotEqualf(t, c, result, "msg")
				require.NotEqualf(t, c, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, d, result)
				require.Equal(t, d, result, "msg")
				require.Equal(t, d, result, "msg with arg %d", 42)
				require.Equalf(t, d, result, "msg")
				require.Equalf(t, d, result, "msg with arg %d", 42)

				require.NotEqual(t, d, result)
				require.NotEqual(t, d, result, "msg")
				require.NotEqual(t, d, result, "msg with arg %d", 42)
				require.NotEqualf(t, d, result, "msg")
				require.NotEqualf(t, d, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, e, result)
				require.Equal(t, e, result, "msg")
				require.Equal(t, e, result, "msg with arg %d", 42)
				require.Equalf(t, e, result, "msg")
				require.Equalf(t, e, result, "msg with arg %d", 42)

				require.NotEqual(t, e, result)
				require.NotEqual(t, e, result, "msg")
				require.NotEqual(t, e, result, "msg with arg %d", 42)
				require.NotEqualf(t, e, result, "msg")
				require.NotEqualf(t, e, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, f, result)
				require.Equal(t, f, result, "msg")
				require.Equal(t, f, result, "msg with arg %d", 42)
				require.Equalf(t, f, result, "msg")
				require.Equalf(t, f, result, "msg with arg %d", 42)

				require.NotEqual(t, f, result)
				require.NotEqual(t, f, result, "msg")
				require.NotEqual(t, f, result, "msg with arg %d", 42)
				require.NotEqualf(t, f, result, "msg")
				require.NotEqualf(t, f, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, g, result)
				require.Equal(t, g, result, "msg")
				require.Equal(t, g, result, "msg with arg %d", 42)
				require.Equalf(t, g, result, "msg")
				require.Equalf(t, g, result, "msg with arg %d", 42)

				require.NotEqual(t, g, result)
				require.NotEqual(t, g, result, "msg")
				require.NotEqual(t, g, result, "msg with arg %d", 42)
				require.NotEqualf(t, g, result, "msg")
				require.NotEqualf(t, g, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, h, result)
				require.Equal(t, h, result, "msg")
				require.Equal(t, h, result, "msg with arg %d", 42)
				require.Equalf(t, h, result, "msg")
				require.Equalf(t, h, result, "msg with arg %d", 42)

				require.NotEqual(t, h, result)
				require.NotEqual(t, h, result, "msg")
				require.NotEqual(t, h, result, "msg with arg %d", 42)
				require.NotEqualf(t, h, result, "msg")
				require.NotEqualf(t, h, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, i, result)
				require.Equal(t, i, result, "msg")
				require.Equal(t, i, result, "msg with arg %d", 42)
				require.Equalf(t, i, result, "msg")
				require.Equalf(t, i, result, "msg with arg %d", 42)

				require.NotEqual(t, i, result)
				require.NotEqual(t, i, result, "msg")
				require.NotEqual(t, i, result, "msg with arg %d", 42)
				require.NotEqualf(t, i, result, "msg")
				require.NotEqualf(t, i, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, j, result)
				require.Equal(t, j, result, "msg")
				require.Equal(t, j, result, "msg with arg %d", 42)
				require.Equalf(t, j, result, "msg")
				require.Equalf(t, j, result, "msg with arg %d", 42)

				require.NotEqual(t, j, result)
				require.NotEqual(t, j, result, "msg")
				require.NotEqual(t, j, result, "msg with arg %d", 42)
				require.NotEqualf(t, j, result, "msg")
				require.NotEqualf(t, j, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, k, result)
				require.Equal(t, k, result, "msg")
				require.Equal(t, k, result, "msg with arg %d", 42)
				require.Equalf(t, k, result, "msg")
				require.Equalf(t, k, result, "msg with arg %d", 42)

				require.NotEqual(t, k, result)
				require.NotEqual(t, k, result, "msg")
				require.NotEqual(t, k, result, "msg with arg %d", 42)
				require.NotEqualf(t, k, result, "msg")
				require.NotEqualf(t, k, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, l, result)
				require.Equal(t, l, result, "msg")
				require.Equal(t, l, result, "msg with arg %d", 42)
				require.Equalf(t, l, result, "msg")
				require.Equalf(t, l, result, "msg with arg %d", 42)

				require.NotEqual(t, l, result)
				require.NotEqual(t, l, result, "msg")
				require.NotEqual(t, l, result, "msg with arg %d", 42)
				require.NotEqualf(t, l, result, "msg")
				require.NotEqualf(t, l, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, m, result)
				require.Equal(t, m, result, "msg")
				require.Equal(t, m, result, "msg with arg %d", 42)
				require.Equalf(t, m, result, "msg")
				require.Equalf(t, m, result, "msg with arg %d", 42)

				require.NotEqual(t, m, result)
				require.NotEqual(t, m, result, "msg")
				require.NotEqual(t, m, result, "msg with arg %d", 42)
				require.NotEqualf(t, m, result, "msg")
				require.NotEqualf(t, m, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, n, result)
				require.Equal(t, n, result, "msg")
				require.Equal(t, n, result, "msg with arg %d", 42)
				require.Equalf(t, n, result, "msg")
				require.Equalf(t, n, result, "msg with arg %d", 42)

				require.NotEqual(t, n, result)
				require.NotEqual(t, n, result, "msg")
				require.NotEqual(t, n, result, "msg with arg %d", 42)
				require.NotEqualf(t, n, result, "msg")
				require.NotEqualf(t, n, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, o, result)
				require.Equal(t, o, result, "msg")
				require.Equal(t, o, result, "msg with arg %d", 42)
				require.Equalf(t, o, result, "msg")
				require.Equalf(t, o, result, "msg with arg %d", 42)

				require.NotEqual(t, o, result)
				require.NotEqual(t, o, result, "msg")
				require.NotEqual(t, o, result, "msg with arg %d", 42)
				require.NotEqualf(t, o, result, "msg")
				require.NotEqualf(t, o, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, p, result)
				require.Equal(t, p, result, "msg")
				require.Equal(t, p, result, "msg with arg %d", 42)
				require.Equalf(t, p, result, "msg")
				require.Equalf(t, p, result, "msg with arg %d", 42)

				require.NotEqual(t, p, result)
				require.NotEqual(t, p, result, "msg")
				require.NotEqual(t, p, result, "msg with arg %d", 42)
				require.NotEqualf(t, p, result, "msg")
				require.NotEqualf(t, p, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, aa, result)
				require.Equal(t, aa, result, "msg")
				require.Equal(t, aa, result, "msg with arg %d", 42)
				require.Equalf(t, aa, result, "msg")
				require.Equalf(t, aa, result, "msg with arg %d", 42)

				require.NotEqual(t, aa, result)
				require.NotEqual(t, aa, result, "msg")
				require.NotEqual(t, aa, result, "msg with arg %d", 42)
				require.NotEqualf(t, aa, result, "msg")
				require.NotEqualf(t, aa, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, bb, result)
				require.Equal(t, bb, result, "msg")
				require.Equal(t, bb, result, "msg with arg %d", 42)
				require.Equalf(t, bb, result, "msg")
				require.Equalf(t, bb, result, "msg with arg %d", 42)

				require.NotEqual(t, bb, result)
				require.NotEqual(t, bb, result, "msg")
				require.NotEqual(t, bb, result, "msg with arg %d", 42)
				require.NotEqualf(t, bb, result, "msg")
				require.NotEqualf(t, bb, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, cc, result)
				require.Equal(t, cc, result, "msg")
				require.Equal(t, cc, result, "msg with arg %d", 42)
				require.Equalf(t, cc, result, "msg")
				require.Equalf(t, cc, result, "msg with arg %d", 42)

				require.NotEqual(t, cc, result)
				require.NotEqual(t, cc, result, "msg")
				require.NotEqual(t, cc, result, "msg with arg %d", 42)
				require.NotEqualf(t, cc, result, "msg")
				require.NotEqualf(t, cc, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, dd, result)
				require.Equal(t, dd, result, "msg")
				require.Equal(t, dd, result, "msg with arg %d", 42)
				require.Equalf(t, dd, result, "msg")
				require.Equalf(t, dd, result, "msg with arg %d", 42)

				require.NotEqual(t, dd, result)
				require.NotEqual(t, dd, result, "msg")
				require.NotEqual(t, dd, result, "msg with arg %d", 42)
				require.NotEqualf(t, dd, result, "msg")
				require.NotEqualf(t, dd, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ee, result)
				require.Equal(t, ee, result, "msg")
				require.Equal(t, ee, result, "msg with arg %d", 42)
				require.Equalf(t, ee, result, "msg")
				require.Equalf(t, ee, result, "msg with arg %d", 42)

				require.NotEqual(t, ee, result)
				require.NotEqual(t, ee, result, "msg")
				require.NotEqual(t, ee, result, "msg with arg %d", 42)
				require.NotEqualf(t, ee, result, "msg")
				require.NotEqualf(t, ee, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ff, result)
				require.Equal(t, ff, result, "msg")
				require.Equal(t, ff, result, "msg with arg %d", 42)
				require.Equalf(t, ff, result, "msg")
				require.Equalf(t, ff, result, "msg with arg %d", 42)

				require.NotEqual(t, ff, result)
				require.NotEqual(t, ff, result, "msg")
				require.NotEqual(t, ff, result, "msg with arg %d", 42)
				require.NotEqualf(t, ff, result, "msg")
				require.NotEqualf(t, ff, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, gg, result)
				require.Equal(t, gg, result, "msg")
				require.Equal(t, gg, result, "msg with arg %d", 42)
				require.Equalf(t, gg, result, "msg")
				require.Equalf(t, gg, result, "msg with arg %d", 42)

				require.NotEqual(t, gg, result)
				require.NotEqual(t, gg, result, "msg")
				require.NotEqual(t, gg, result, "msg with arg %d", 42)
				require.NotEqualf(t, gg, result, "msg")
				require.NotEqualf(t, gg, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, hh, result)
				require.Equal(t, hh, result, "msg")
				require.Equal(t, hh, result, "msg with arg %d", 42)
				require.Equalf(t, hh, result, "msg")
				require.Equalf(t, hh, result, "msg with arg %d", 42)

				require.NotEqual(t, hh, result)
				require.NotEqual(t, hh, result, "msg")
				require.NotEqual(t, hh, result, "msg with arg %d", 42)
				require.NotEqualf(t, hh, result, "msg")
				require.NotEqualf(t, hh, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ii, result)
				require.Equal(t, ii, result, "msg")
				require.Equal(t, ii, result, "msg with arg %d", 42)
				require.Equalf(t, ii, result, "msg")
				require.Equalf(t, ii, result, "msg with arg %d", 42)

				require.NotEqual(t, ii, result)
				require.NotEqual(t, ii, result, "msg")
				require.NotEqual(t, ii, result, "msg with arg %d", 42)
				require.NotEqualf(t, ii, result, "msg")
				require.NotEqualf(t, ii, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, jj, result)
				require.Equal(t, jj, result, "msg")
				require.Equal(t, jj, result, "msg with arg %d", 42)
				require.Equalf(t, jj, result, "msg")
				require.Equalf(t, jj, result, "msg with arg %d", 42)

				require.NotEqual(t, jj, result)
				require.NotEqual(t, jj, result, "msg")
				require.NotEqual(t, jj, result, "msg with arg %d", 42)
				require.NotEqualf(t, jj, result, "msg")
				require.NotEqualf(t, jj, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, kk, result)
				require.Equal(t, kk, result, "msg")
				require.Equal(t, kk, result, "msg with arg %d", 42)
				require.Equalf(t, kk, result, "msg")
				require.Equalf(t, kk, result, "msg with arg %d", 42)

				require.NotEqual(t, kk, result)
				require.NotEqual(t, kk, result, "msg")
				require.NotEqual(t, kk, result, "msg with arg %d", 42)
				require.NotEqualf(t, kk, result, "msg")
				require.NotEqualf(t, kk, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ll, result)
				require.Equal(t, ll, result, "msg")
				require.Equal(t, ll, result, "msg with arg %d", 42)
				require.Equalf(t, ll, result, "msg")
				require.Equalf(t, ll, result, "msg with arg %d", 42)

				require.NotEqual(t, ll, result)
				require.NotEqual(t, ll, result, "msg")
				require.NotEqual(t, ll, result, "msg with arg %d", 42)
				require.NotEqualf(t, ll, result, "msg")
				require.NotEqualf(t, ll, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, mm, result)
				require.Equal(t, mm, result, "msg")
				require.Equal(t, mm, result, "msg with arg %d", 42)
				require.Equalf(t, mm, result, "msg")
				require.Equalf(t, mm, result, "msg with arg %d", 42)

				require.NotEqual(t, mm, result)
				require.NotEqual(t, mm, result, "msg")
				require.NotEqual(t, mm, result, "msg with arg %d", 42)
				require.NotEqualf(t, mm, result, "msg")
				require.NotEqualf(t, mm, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, nn, result)
				require.Equal(t, nn, result, "msg")
				require.Equal(t, nn, result, "msg with arg %d", 42)
				require.Equalf(t, nn, result, "msg")
				require.Equalf(t, nn, result, "msg with arg %d", 42)

				require.NotEqual(t, nn, result)
				require.NotEqual(t, nn, result, "msg")
				require.NotEqual(t, nn, result, "msg with arg %d", 42)
				require.NotEqualf(t, nn, result, "msg")
				require.NotEqualf(t, nn, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, oo, result)
				require.Equal(t, oo, result, "msg")
				require.Equal(t, oo, result, "msg with arg %d", 42)
				require.Equalf(t, oo, result, "msg")
				require.Equalf(t, oo, result, "msg with arg %d", 42)

				require.NotEqual(t, oo, result)
				require.NotEqual(t, oo, result, "msg")
				require.NotEqual(t, oo, result, "msg with arg %d", 42)
				require.NotEqualf(t, oo, result, "msg")
				require.NotEqualf(t, oo, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, pp, result)
				require.Equal(t, pp, result, "msg")
				require.Equal(t, pp, result, "msg with arg %d", 42)
				require.Equalf(t, pp, result, "msg")
				require.Equalf(t, pp, result, "msg with arg %d", 42)

				require.NotEqual(t, pp, result)
				require.NotEqual(t, pp, result, "msg")
				require.NotEqual(t, pp, result, "msg with arg %d", 42)
				require.NotEqualf(t, pp, result, "msg")
				require.NotEqualf(t, pp, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, Monday, result)
				require.Equal(t, Monday, result, "msg")
				require.Equal(t, Monday, result, "msg with arg %d", 42)
				require.Equalf(t, Monday, result, "msg")
				require.Equalf(t, Monday, result, "msg with arg %d", 42)

				require.NotEqual(t, Monday, result)
				require.NotEqual(t, Monday, result, "msg")
				require.NotEqual(t, Monday, result, "msg with arg %d", 42)
				require.NotEqualf(t, Monday, result, "msg")
				require.NotEqualf(t, Monday, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, DayMonday, result)
				require.Equal(t, DayMonday, result, "msg")
				require.Equal(t, DayMonday, result, "msg with arg %d", 42)
				require.Equalf(t, DayMonday, result, "msg")
				require.Equalf(t, DayMonday, result, "msg with arg %d", 42)

				require.NotEqual(t, DayMonday, result)
				require.NotEqual(t, DayMonday, result, "msg")
				require.NotEqual(t, DayMonday, result, "msg with arg %d", 42)
				require.NotEqualf(t, DayMonday, result, "msg")
				require.NotEqualf(t, DayMonday, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, expected, result)
				require.Equal(t, expected, result, "msg")
				require.Equal(t, expected, result, "msg with arg %d", 42)
				require.Equalf(t, expected, result, "msg")
				require.Equalf(t, expected, result, "msg with arg %d", 42)

				require.NotEqual(t, expected, result)
				require.NotEqual(t, expected, result, "msg")
				require.NotEqual(t, expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, expected, result, "msg")
				require.NotEqualf(t, expected, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, tt.expected, result)
				require.Equal(t, tt.expected, result, "msg")
				require.Equal(t, tt.expected, result, "msg with arg %d", 42)
				require.Equalf(t, tt.expected, result, "msg")
				require.Equalf(t, tt.expected, result, "msg with arg %d", 42)

				require.NotEqual(t, tt.expected, result)
				require.NotEqual(t, tt.expected, result, "msg")
				require.NotEqual(t, tt.expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, tt.expected, result, "msg")
				require.NotEqualf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ttp.expected, result)
				require.Equal(t, ttp.expected, result, "msg")
				require.Equal(t, ttp.expected, result, "msg with arg %d", 42)
				require.Equalf(t, ttp.expected, result, "msg")
				require.Equalf(t, ttp.expected, result, "msg with arg %d", 42)

				require.NotEqual(t, ttp.expected, result)
				require.NotEqual(t, ttp.expected, result, "msg")
				require.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, ttp.expected, result, "msg")
				require.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.
		{
			{
				require.JSONEq(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, "string", result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, "string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, "string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, "string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, "string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, o, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				require.YAMLEq(t, ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				require.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				require.JSONEq(t, "string", result)
				require.JSONEq(t, "string", result, "msg")
				require.JSONEq(t, "string", result, "msg with arg %d", 42)
				require.JSONEqf(t, "string", result, "msg")
				require.JSONEqf(t, "string", result, "msg with arg %d", 42)

				require.YAMLEq(t, "string", result)
				require.YAMLEq(t, "string", result, "msg")
				require.YAMLEq(t, "string", result, "msg with arg %d", 42)
				require.YAMLEqf(t, "string", result, "msg")
				require.YAMLEqf(t, "string", result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, o, result)
				require.JSONEq(t, o, result, "msg")
				require.JSONEq(t, o, result, "msg with arg %d", 42)
				require.JSONEqf(t, o, result, "msg")
				require.JSONEqf(t, o, result, "msg with arg %d", 42)

				require.YAMLEq(t, o, result)
				require.YAMLEq(t, o, result, "msg")
				require.YAMLEq(t, o, result, "msg with arg %d", 42)
				require.YAMLEqf(t, o, result, "msg")
				require.YAMLEqf(t, o, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, oo, result)
				require.JSONEq(t, oo, result, "msg")
				require.JSONEq(t, oo, result, "msg with arg %d", 42)
				require.JSONEqf(t, oo, result, "msg")
				require.JSONEqf(t, oo, result, "msg with arg %d", 42)

				require.YAMLEq(t, oo, result)
				require.YAMLEq(t, oo, result, "msg")
				require.YAMLEq(t, oo, result, "msg with arg %d", 42)
				require.YAMLEqf(t, oo, result, "msg")
				require.YAMLEqf(t, oo, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, string(DayNameMonday), result)
				require.JSONEq(t, string(DayNameMonday), result, "msg")
				require.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				require.JSONEqf(t, string(DayNameMonday), result, "msg")
				require.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)

				require.YAMLEq(t, string(DayNameMonday), result)
				require.YAMLEq(t, string(DayNameMonday), result, "msg")
				require.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				require.YAMLEqf(t, string(DayNameMonday), result, "msg")
				require.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, expected, result)
				require.JSONEq(t, expected, result, "msg")
				require.JSONEq(t, expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, expected, result, "msg")
				require.JSONEqf(t, expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, expected, result)
				require.YAMLEq(t, expected, result, "msg")
				require.YAMLEq(t, expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, expected, result, "msg")
				require.YAMLEqf(t, expected, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, tt.expected, result)
				require.JSONEq(t, tt.expected, result, "msg")
				require.JSONEq(t, tt.expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, tt.expected, result, "msg")
				require.JSONEqf(t, tt.expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, tt.expected, result)
				require.YAMLEq(t, tt.expected, result, "msg")
				require.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, tt.expected, result, "msg")
				require.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, ttp.expected, result)
				require.JSONEq(t, ttp.expected, result, "msg")
				require.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, ttp.expected, result, "msg")
				require.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, ttp.expected, result)
				require.YAMLEq(t, ttp.expected, result, "msg")
				require.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, ttp.expected, result, "msg")
				require.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})

	assObj, reqObj := assert.New(t), require.New(t)

	t.Run("assObj", func(t *testing.T) {
		// Basic.
		{
			{
				assObj.Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assObj.Equal(uint(11), result)
				assObj.Equal(uint(11), result, "msg")
				assObj.Equal(uint(11), result, "msg with arg %d", 42)
				assObj.Equalf(uint(11), result, "msg")
				assObj.Equalf(uint(11), result, "msg with arg %d", 42)

				assObj.NotEqual(uint(11), result)
				assObj.NotEqual(uint(11), result, "msg")
				assObj.NotEqual(uint(11), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint(11), result, "msg")
				assObj.NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint8(12), result)
				assObj.Equal(uint8(12), result, "msg")
				assObj.Equal(uint8(12), result, "msg with arg %d", 42)
				assObj.Equalf(uint8(12), result, "msg")
				assObj.Equalf(uint8(12), result, "msg with arg %d", 42)

				assObj.NotEqual(uint8(12), result)
				assObj.NotEqual(uint8(12), result, "msg")
				assObj.NotEqual(uint8(12), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint8(12), result, "msg")
				assObj.NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint16(13), result)
				assObj.Equal(uint16(13), result, "msg")
				assObj.Equal(uint16(13), result, "msg with arg %d", 42)
				assObj.Equalf(uint16(13), result, "msg")
				assObj.Equalf(uint16(13), result, "msg with arg %d", 42)

				assObj.NotEqual(uint16(13), result)
				assObj.NotEqual(uint16(13), result, "msg")
				assObj.NotEqual(uint16(13), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint16(13), result, "msg")
				assObj.NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint32(14), result)
				assObj.Equal(uint32(14), result, "msg")
				assObj.Equal(uint32(14), result, "msg with arg %d", 42)
				assObj.Equalf(uint32(14), result, "msg")
				assObj.Equalf(uint32(14), result, "msg with arg %d", 42)

				assObj.NotEqual(uint32(14), result)
				assObj.NotEqual(uint32(14), result, "msg")
				assObj.NotEqual(uint32(14), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint32(14), result, "msg")
				assObj.NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint64(15), result)
				assObj.Equal(uint64(15), result, "msg")
				assObj.Equal(uint64(15), result, "msg with arg %d", 42)
				assObj.Equalf(uint64(15), result, "msg")
				assObj.Equalf(uint64(15), result, "msg with arg %d", 42)

				assObj.NotEqual(uint64(15), result)
				assObj.NotEqual(uint64(15), result, "msg")
				assObj.NotEqual(uint64(15), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint64(15), result, "msg")
				assObj.NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(21, result)
				assObj.Equal(21, result, "msg")
				assObj.Equal(21, result, "msg with arg %d", 42)
				assObj.Equalf(21, result, "msg")
				assObj.Equalf(21, result, "msg with arg %d", 42)

				assObj.NotEqual(21, result)
				assObj.NotEqual(21, result, "msg")
				assObj.NotEqual(21, result, "msg with arg %d", 42)
				assObj.NotEqualf(21, result, "msg")
				assObj.NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int8(22), result)
				assObj.Equal(int8(22), result, "msg")
				assObj.Equal(int8(22), result, "msg with arg %d", 42)
				assObj.Equalf(int8(22), result, "msg")
				assObj.Equalf(int8(22), result, "msg with arg %d", 42)

				assObj.NotEqual(int8(22), result)
				assObj.NotEqual(int8(22), result, "msg")
				assObj.NotEqual(int8(22), result, "msg with arg %d", 42)
				assObj.NotEqualf(int8(22), result, "msg")
				assObj.NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int16(23), result)
				assObj.Equal(int16(23), result, "msg")
				assObj.Equal(int16(23), result, "msg with arg %d", 42)
				assObj.Equalf(int16(23), result, "msg")
				assObj.Equalf(int16(23), result, "msg with arg %d", 42)

				assObj.NotEqual(int16(23), result)
				assObj.NotEqual(int16(23), result, "msg")
				assObj.NotEqual(int16(23), result, "msg with arg %d", 42)
				assObj.NotEqualf(int16(23), result, "msg")
				assObj.NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int32(24), result)
				assObj.Equal(int32(24), result, "msg")
				assObj.Equal(int32(24), result, "msg with arg %d", 42)
				assObj.Equalf(int32(24), result, "msg")
				assObj.Equalf(int32(24), result, "msg with arg %d", 42)

				assObj.NotEqual(int32(24), result)
				assObj.NotEqual(int32(24), result, "msg")
				assObj.NotEqual(int32(24), result, "msg with arg %d", 42)
				assObj.NotEqualf(int32(24), result, "msg")
				assObj.NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int64(25), result)
				assObj.Equal(int64(25), result, "msg")
				assObj.Equal(int64(25), result, "msg with arg %d", 42)
				assObj.Equalf(int64(25), result, "msg")
				assObj.Equalf(int64(25), result, "msg with arg %d", 42)

				assObj.NotEqual(int64(25), result)
				assObj.NotEqual(int64(25), result, "msg")
				assObj.NotEqual(int64(25), result, "msg with arg %d", 42)
				assObj.NotEqualf(int64(25), result, "msg")
				assObj.NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(float32(31.), result)
				assObj.Equal(float32(31.), result, "msg")
				assObj.Equal(float32(31.), result, "msg with arg %d", 42)
				assObj.Equalf(float32(31.), result, "msg")
				assObj.Equalf(float32(31.), result, "msg with arg %d", 42)

				assObj.NotEqual(float32(31.), result)
				assObj.NotEqual(float32(31.), result, "msg")
				assObj.NotEqual(float32(31.), result, "msg with arg %d", 42)
				assObj.NotEqualf(float32(31.), result, "msg")
				assObj.NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(float64(32.), result)
				assObj.Equal(float64(32.), result, "msg")
				assObj.Equal(float64(32.), result, "msg with arg %d", 42)
				assObj.Equalf(float64(32.), result, "msg")
				assObj.Equalf(float64(32.), result, "msg with arg %d", 42)

				assObj.NotEqual(float64(32.), result)
				assObj.NotEqual(float64(32.), result, "msg")
				assObj.NotEqual(float64(32.), result, "msg with arg %d", 42)
				assObj.NotEqualf(float64(32.), result, "msg")
				assObj.NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(complex64(41-0.707i), result)
				assObj.Equal(complex64(41-0.707i), result, "msg")
				assObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				assObj.Equalf(complex64(41-0.707i), result, "msg")
				assObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				assObj.NotEqual(complex64(41-0.707i), result)
				assObj.NotEqual(complex64(41-0.707i), result, "msg")
				assObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				assObj.NotEqualf(complex64(41-0.707i), result, "msg")
				assObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(complex128(42-0.707i), result)
				assObj.Equal(complex128(42-0.707i), result, "msg")
				assObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				assObj.Equalf(complex128(42-0.707i), result, "msg")
				assObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				assObj.NotEqual(complex128(42-0.707i), result)
				assObj.NotEqual(complex128(42-0.707i), result, "msg")
				assObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				assObj.NotEqualf(complex128(42-0.707i), result, "msg")
				assObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal("string", result)
				assObj.Equal("string", result, "msg")
				assObj.Equal("string", result, "msg with arg %d", 42)
				assObj.Equalf("string", result, "msg")
				assObj.Equalf("string", result, "msg with arg %d", 42)

				assObj.NotEqual("string", result)
				assObj.NotEqual("string", result, "msg")
				assObj.NotEqual("string", result, "msg with arg %d", 42)
				assObj.NotEqualf("string", result, "msg")
				assObj.NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				assObj.Equal('r', result)
				assObj.Equal('r', result, "msg")
				assObj.Equal('r', result, "msg with arg %d", 42)
				assObj.Equalf('r', result, "msg")
				assObj.Equalf('r', result, "msg with arg %d", 42)

				assObj.NotEqual('r', result)
				assObj.NotEqual('r', result, "msg")
				assObj.NotEqual('r', result, "msg with arg %d", 42)
				assObj.NotEqualf('r', result, "msg")
				assObj.NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(a, result)
				assObj.Equal(a, result, "msg")
				assObj.Equal(a, result, "msg with arg %d", 42)
				assObj.Equalf(a, result, "msg")
				assObj.Equalf(a, result, "msg with arg %d", 42)

				assObj.NotEqual(a, result)
				assObj.NotEqual(a, result, "msg")
				assObj.NotEqual(a, result, "msg with arg %d", 42)
				assObj.NotEqualf(a, result, "msg")
				assObj.NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(b, result)
				assObj.Equal(b, result, "msg")
				assObj.Equal(b, result, "msg with arg %d", 42)
				assObj.Equalf(b, result, "msg")
				assObj.Equalf(b, result, "msg with arg %d", 42)

				assObj.NotEqual(b, result)
				assObj.NotEqual(b, result, "msg")
				assObj.NotEqual(b, result, "msg with arg %d", 42)
				assObj.NotEqualf(b, result, "msg")
				assObj.NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(c, result)
				assObj.Equal(c, result, "msg")
				assObj.Equal(c, result, "msg with arg %d", 42)
				assObj.Equalf(c, result, "msg")
				assObj.Equalf(c, result, "msg with arg %d", 42)

				assObj.NotEqual(c, result)
				assObj.NotEqual(c, result, "msg")
				assObj.NotEqual(c, result, "msg with arg %d", 42)
				assObj.NotEqualf(c, result, "msg")
				assObj.NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(d, result)
				assObj.Equal(d, result, "msg")
				assObj.Equal(d, result, "msg with arg %d", 42)
				assObj.Equalf(d, result, "msg")
				assObj.Equalf(d, result, "msg with arg %d", 42)

				assObj.NotEqual(d, result)
				assObj.NotEqual(d, result, "msg")
				assObj.NotEqual(d, result, "msg with arg %d", 42)
				assObj.NotEqualf(d, result, "msg")
				assObj.NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(e, result)
				assObj.Equal(e, result, "msg")
				assObj.Equal(e, result, "msg with arg %d", 42)
				assObj.Equalf(e, result, "msg")
				assObj.Equalf(e, result, "msg with arg %d", 42)

				assObj.NotEqual(e, result)
				assObj.NotEqual(e, result, "msg")
				assObj.NotEqual(e, result, "msg with arg %d", 42)
				assObj.NotEqualf(e, result, "msg")
				assObj.NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(f, result)
				assObj.Equal(f, result, "msg")
				assObj.Equal(f, result, "msg with arg %d", 42)
				assObj.Equalf(f, result, "msg")
				assObj.Equalf(f, result, "msg with arg %d", 42)

				assObj.NotEqual(f, result)
				assObj.NotEqual(f, result, "msg")
				assObj.NotEqual(f, result, "msg with arg %d", 42)
				assObj.NotEqualf(f, result, "msg")
				assObj.NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(g, result)
				assObj.Equal(g, result, "msg")
				assObj.Equal(g, result, "msg with arg %d", 42)
				assObj.Equalf(g, result, "msg")
				assObj.Equalf(g, result, "msg with arg %d", 42)

				assObj.NotEqual(g, result)
				assObj.NotEqual(g, result, "msg")
				assObj.NotEqual(g, result, "msg with arg %d", 42)
				assObj.NotEqualf(g, result, "msg")
				assObj.NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(h, result)
				assObj.Equal(h, result, "msg")
				assObj.Equal(h, result, "msg with arg %d", 42)
				assObj.Equalf(h, result, "msg")
				assObj.Equalf(h, result, "msg with arg %d", 42)

				assObj.NotEqual(h, result)
				assObj.NotEqual(h, result, "msg")
				assObj.NotEqual(h, result, "msg with arg %d", 42)
				assObj.NotEqualf(h, result, "msg")
				assObj.NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(i, result)
				assObj.Equal(i, result, "msg")
				assObj.Equal(i, result, "msg with arg %d", 42)
				assObj.Equalf(i, result, "msg")
				assObj.Equalf(i, result, "msg with arg %d", 42)

				assObj.NotEqual(i, result)
				assObj.NotEqual(i, result, "msg")
				assObj.NotEqual(i, result, "msg with arg %d", 42)
				assObj.NotEqualf(i, result, "msg")
				assObj.NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(j, result)
				assObj.Equal(j, result, "msg")
				assObj.Equal(j, result, "msg with arg %d", 42)
				assObj.Equalf(j, result, "msg")
				assObj.Equalf(j, result, "msg with arg %d", 42)

				assObj.NotEqual(j, result)
				assObj.NotEqual(j, result, "msg")
				assObj.NotEqual(j, result, "msg with arg %d", 42)
				assObj.NotEqualf(j, result, "msg")
				assObj.NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(k, result)
				assObj.Equal(k, result, "msg")
				assObj.Equal(k, result, "msg with arg %d", 42)
				assObj.Equalf(k, result, "msg")
				assObj.Equalf(k, result, "msg with arg %d", 42)

				assObj.NotEqual(k, result)
				assObj.NotEqual(k, result, "msg")
				assObj.NotEqual(k, result, "msg with arg %d", 42)
				assObj.NotEqualf(k, result, "msg")
				assObj.NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(l, result)
				assObj.Equal(l, result, "msg")
				assObj.Equal(l, result, "msg with arg %d", 42)
				assObj.Equalf(l, result, "msg")
				assObj.Equalf(l, result, "msg with arg %d", 42)

				assObj.NotEqual(l, result)
				assObj.NotEqual(l, result, "msg")
				assObj.NotEqual(l, result, "msg with arg %d", 42)
				assObj.NotEqualf(l, result, "msg")
				assObj.NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(m, result)
				assObj.Equal(m, result, "msg")
				assObj.Equal(m, result, "msg with arg %d", 42)
				assObj.Equalf(m, result, "msg")
				assObj.Equalf(m, result, "msg with arg %d", 42)

				assObj.NotEqual(m, result)
				assObj.NotEqual(m, result, "msg")
				assObj.NotEqual(m, result, "msg with arg %d", 42)
				assObj.NotEqualf(m, result, "msg")
				assObj.NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(n, result)
				assObj.Equal(n, result, "msg")
				assObj.Equal(n, result, "msg with arg %d", 42)
				assObj.Equalf(n, result, "msg")
				assObj.Equalf(n, result, "msg with arg %d", 42)

				assObj.NotEqual(n, result)
				assObj.NotEqual(n, result, "msg")
				assObj.NotEqual(n, result, "msg with arg %d", 42)
				assObj.NotEqualf(n, result, "msg")
				assObj.NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(o, result)
				assObj.Equal(o, result, "msg")
				assObj.Equal(o, result, "msg with arg %d", 42)
				assObj.Equalf(o, result, "msg")
				assObj.Equalf(o, result, "msg with arg %d", 42)

				assObj.NotEqual(o, result)
				assObj.NotEqual(o, result, "msg")
				assObj.NotEqual(o, result, "msg with arg %d", 42)
				assObj.NotEqualf(o, result, "msg")
				assObj.NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(p, result)
				assObj.Equal(p, result, "msg")
				assObj.Equal(p, result, "msg with arg %d", 42)
				assObj.Equalf(p, result, "msg")
				assObj.Equalf(p, result, "msg with arg %d", 42)

				assObj.NotEqual(p, result)
				assObj.NotEqual(p, result, "msg")
				assObj.NotEqual(p, result, "msg with arg %d", 42)
				assObj.NotEqualf(p, result, "msg")
				assObj.NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(aa, result)
				assObj.Equal(aa, result, "msg")
				assObj.Equal(aa, result, "msg with arg %d", 42)
				assObj.Equalf(aa, result, "msg")
				assObj.Equalf(aa, result, "msg with arg %d", 42)

				assObj.NotEqual(aa, result)
				assObj.NotEqual(aa, result, "msg")
				assObj.NotEqual(aa, result, "msg with arg %d", 42)
				assObj.NotEqualf(aa, result, "msg")
				assObj.NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(bb, result)
				assObj.Equal(bb, result, "msg")
				assObj.Equal(bb, result, "msg with arg %d", 42)
				assObj.Equalf(bb, result, "msg")
				assObj.Equalf(bb, result, "msg with arg %d", 42)

				assObj.NotEqual(bb, result)
				assObj.NotEqual(bb, result, "msg")
				assObj.NotEqual(bb, result, "msg with arg %d", 42)
				assObj.NotEqualf(bb, result, "msg")
				assObj.NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(cc, result)
				assObj.Equal(cc, result, "msg")
				assObj.Equal(cc, result, "msg with arg %d", 42)
				assObj.Equalf(cc, result, "msg")
				assObj.Equalf(cc, result, "msg with arg %d", 42)

				assObj.NotEqual(cc, result)
				assObj.NotEqual(cc, result, "msg")
				assObj.NotEqual(cc, result, "msg with arg %d", 42)
				assObj.NotEqualf(cc, result, "msg")
				assObj.NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(dd, result)
				assObj.Equal(dd, result, "msg")
				assObj.Equal(dd, result, "msg with arg %d", 42)
				assObj.Equalf(dd, result, "msg")
				assObj.Equalf(dd, result, "msg with arg %d", 42)

				assObj.NotEqual(dd, result)
				assObj.NotEqual(dd, result, "msg")
				assObj.NotEqual(dd, result, "msg with arg %d", 42)
				assObj.NotEqualf(dd, result, "msg")
				assObj.NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ee, result)
				assObj.Equal(ee, result, "msg")
				assObj.Equal(ee, result, "msg with arg %d", 42)
				assObj.Equalf(ee, result, "msg")
				assObj.Equalf(ee, result, "msg with arg %d", 42)

				assObj.NotEqual(ee, result)
				assObj.NotEqual(ee, result, "msg")
				assObj.NotEqual(ee, result, "msg with arg %d", 42)
				assObj.NotEqualf(ee, result, "msg")
				assObj.NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ff, result)
				assObj.Equal(ff, result, "msg")
				assObj.Equal(ff, result, "msg with arg %d", 42)
				assObj.Equalf(ff, result, "msg")
				assObj.Equalf(ff, result, "msg with arg %d", 42)

				assObj.NotEqual(ff, result)
				assObj.NotEqual(ff, result, "msg")
				assObj.NotEqual(ff, result, "msg with arg %d", 42)
				assObj.NotEqualf(ff, result, "msg")
				assObj.NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(gg, result)
				assObj.Equal(gg, result, "msg")
				assObj.Equal(gg, result, "msg with arg %d", 42)
				assObj.Equalf(gg, result, "msg")
				assObj.Equalf(gg, result, "msg with arg %d", 42)

				assObj.NotEqual(gg, result)
				assObj.NotEqual(gg, result, "msg")
				assObj.NotEqual(gg, result, "msg with arg %d", 42)
				assObj.NotEqualf(gg, result, "msg")
				assObj.NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(hh, result)
				assObj.Equal(hh, result, "msg")
				assObj.Equal(hh, result, "msg with arg %d", 42)
				assObj.Equalf(hh, result, "msg")
				assObj.Equalf(hh, result, "msg with arg %d", 42)

				assObj.NotEqual(hh, result)
				assObj.NotEqual(hh, result, "msg")
				assObj.NotEqual(hh, result, "msg with arg %d", 42)
				assObj.NotEqualf(hh, result, "msg")
				assObj.NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ii, result)
				assObj.Equal(ii, result, "msg")
				assObj.Equal(ii, result, "msg with arg %d", 42)
				assObj.Equalf(ii, result, "msg")
				assObj.Equalf(ii, result, "msg with arg %d", 42)

				assObj.NotEqual(ii, result)
				assObj.NotEqual(ii, result, "msg")
				assObj.NotEqual(ii, result, "msg with arg %d", 42)
				assObj.NotEqualf(ii, result, "msg")
				assObj.NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(jj, result)
				assObj.Equal(jj, result, "msg")
				assObj.Equal(jj, result, "msg with arg %d", 42)
				assObj.Equalf(jj, result, "msg")
				assObj.Equalf(jj, result, "msg with arg %d", 42)

				assObj.NotEqual(jj, result)
				assObj.NotEqual(jj, result, "msg")
				assObj.NotEqual(jj, result, "msg with arg %d", 42)
				assObj.NotEqualf(jj, result, "msg")
				assObj.NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(kk, result)
				assObj.Equal(kk, result, "msg")
				assObj.Equal(kk, result, "msg with arg %d", 42)
				assObj.Equalf(kk, result, "msg")
				assObj.Equalf(kk, result, "msg with arg %d", 42)

				assObj.NotEqual(kk, result)
				assObj.NotEqual(kk, result, "msg")
				assObj.NotEqual(kk, result, "msg with arg %d", 42)
				assObj.NotEqualf(kk, result, "msg")
				assObj.NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ll, result)
				assObj.Equal(ll, result, "msg")
				assObj.Equal(ll, result, "msg with arg %d", 42)
				assObj.Equalf(ll, result, "msg")
				assObj.Equalf(ll, result, "msg with arg %d", 42)

				assObj.NotEqual(ll, result)
				assObj.NotEqual(ll, result, "msg")
				assObj.NotEqual(ll, result, "msg with arg %d", 42)
				assObj.NotEqualf(ll, result, "msg")
				assObj.NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(mm, result)
				assObj.Equal(mm, result, "msg")
				assObj.Equal(mm, result, "msg with arg %d", 42)
				assObj.Equalf(mm, result, "msg")
				assObj.Equalf(mm, result, "msg with arg %d", 42)

				assObj.NotEqual(mm, result)
				assObj.NotEqual(mm, result, "msg")
				assObj.NotEqual(mm, result, "msg with arg %d", 42)
				assObj.NotEqualf(mm, result, "msg")
				assObj.NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(nn, result)
				assObj.Equal(nn, result, "msg")
				assObj.Equal(nn, result, "msg with arg %d", 42)
				assObj.Equalf(nn, result, "msg")
				assObj.Equalf(nn, result, "msg with arg %d", 42)

				assObj.NotEqual(nn, result)
				assObj.NotEqual(nn, result, "msg")
				assObj.NotEqual(nn, result, "msg with arg %d", 42)
				assObj.NotEqualf(nn, result, "msg")
				assObj.NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(oo, result)
				assObj.Equal(oo, result, "msg")
				assObj.Equal(oo, result, "msg with arg %d", 42)
				assObj.Equalf(oo, result, "msg")
				assObj.Equalf(oo, result, "msg with arg %d", 42)

				assObj.NotEqual(oo, result)
				assObj.NotEqual(oo, result, "msg")
				assObj.NotEqual(oo, result, "msg with arg %d", 42)
				assObj.NotEqualf(oo, result, "msg")
				assObj.NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(pp, result)
				assObj.Equal(pp, result, "msg")
				assObj.Equal(pp, result, "msg with arg %d", 42)
				assObj.Equalf(pp, result, "msg")
				assObj.Equalf(pp, result, "msg with arg %d", 42)

				assObj.NotEqual(pp, result)
				assObj.NotEqual(pp, result, "msg")
				assObj.NotEqual(pp, result, "msg with arg %d", 42)
				assObj.NotEqualf(pp, result, "msg")
				assObj.NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(Monday, result)
				assObj.Equal(Monday, result, "msg")
				assObj.Equal(Monday, result, "msg with arg %d", 42)
				assObj.Equalf(Monday, result, "msg")
				assObj.Equalf(Monday, result, "msg with arg %d", 42)

				assObj.NotEqual(Monday, result)
				assObj.NotEqual(Monday, result, "msg")
				assObj.NotEqual(Monday, result, "msg with arg %d", 42)
				assObj.NotEqualf(Monday, result, "msg")
				assObj.NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(DayMonday, result)
				assObj.Equal(DayMonday, result, "msg")
				assObj.Equal(DayMonday, result, "msg with arg %d", 42)
				assObj.Equalf(DayMonday, result, "msg")
				assObj.Equalf(DayMonday, result, "msg with arg %d", 42)

				assObj.NotEqual(DayMonday, result)
				assObj.NotEqual(DayMonday, result, "msg")
				assObj.NotEqual(DayMonday, result, "msg with arg %d", 42)
				assObj.NotEqualf(DayMonday, result, "msg")
				assObj.NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(expected, result)
				assObj.Equal(expected, result, "msg")
				assObj.Equal(expected, result, "msg with arg %d", 42)
				assObj.Equalf(expected, result, "msg")
				assObj.Equalf(expected, result, "msg with arg %d", 42)

				assObj.NotEqual(expected, result)
				assObj.NotEqual(expected, result, "msg")
				assObj.NotEqual(expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(expected, result, "msg")
				assObj.NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(tt.expected, result)
				assObj.Equal(tt.expected, result, "msg")
				assObj.Equal(tt.expected, result, "msg with arg %d", 42)
				assObj.Equalf(tt.expected, result, "msg")
				assObj.Equalf(tt.expected, result, "msg with arg %d", 42)

				assObj.NotEqual(tt.expected, result)
				assObj.NotEqual(tt.expected, result, "msg")
				assObj.NotEqual(tt.expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(tt.expected, result, "msg")
				assObj.NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ttp.expected, result)
				assObj.Equal(ttp.expected, result, "msg")
				assObj.Equal(ttp.expected, result, "msg with arg %d", 42)
				assObj.Equalf(ttp.expected, result, "msg")
				assObj.Equalf(ttp.expected, result, "msg with arg %d", 42)

				assObj.NotEqual(ttp.expected, result)
				assObj.NotEqual(ttp.expected, result, "msg")
				assObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(ttp.expected, result, "msg")
				assObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.
		{
			{
				assObj.JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assObj.JSONEq("string", result)
				assObj.JSONEq("string", result, "msg")
				assObj.JSONEq("string", result, "msg with arg %d", 42)
				assObj.JSONEqf("string", result, "msg")
				assObj.JSONEqf("string", result, "msg with arg %d", 42)

				assObj.YAMLEq("string", result)
				assObj.YAMLEq("string", result, "msg")
				assObj.YAMLEq("string", result, "msg with arg %d", 42)
				assObj.YAMLEqf("string", result, "msg")
				assObj.YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(o, result)
				assObj.JSONEq(o, result, "msg")
				assObj.JSONEq(o, result, "msg with arg %d", 42)
				assObj.JSONEqf(o, result, "msg")
				assObj.JSONEqf(o, result, "msg with arg %d", 42)

				assObj.YAMLEq(o, result)
				assObj.YAMLEq(o, result, "msg")
				assObj.YAMLEq(o, result, "msg with arg %d", 42)
				assObj.YAMLEqf(o, result, "msg")
				assObj.YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(oo, result)
				assObj.JSONEq(oo, result, "msg")
				assObj.JSONEq(oo, result, "msg with arg %d", 42)
				assObj.JSONEqf(oo, result, "msg")
				assObj.JSONEqf(oo, result, "msg with arg %d", 42)

				assObj.YAMLEq(oo, result)
				assObj.YAMLEq(oo, result, "msg")
				assObj.YAMLEq(oo, result, "msg with arg %d", 42)
				assObj.YAMLEqf(oo, result, "msg")
				assObj.YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(string(DayNameMonday), result)
				assObj.JSONEq(string(DayNameMonday), result, "msg")
				assObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				assObj.JSONEqf(string(DayNameMonday), result, "msg")
				assObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				assObj.YAMLEq(string(DayNameMonday), result)
				assObj.YAMLEq(string(DayNameMonday), result, "msg")
				assObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				assObj.YAMLEqf(string(DayNameMonday), result, "msg")
				assObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(expected, result)
				assObj.JSONEq(expected, result, "msg")
				assObj.JSONEq(expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(expected, result, "msg")
				assObj.JSONEqf(expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(expected, result)
				assObj.YAMLEq(expected, result, "msg")
				assObj.YAMLEq(expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(expected, result, "msg")
				assObj.YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(tt.expected, result)
				assObj.JSONEq(tt.expected, result, "msg")
				assObj.JSONEq(tt.expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(tt.expected, result, "msg")
				assObj.JSONEqf(tt.expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(tt.expected, result)
				assObj.YAMLEq(tt.expected, result, "msg")
				assObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(tt.expected, result, "msg")
				assObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(ttp.expected, result)
				assObj.JSONEq(ttp.expected, result, "msg")
				assObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(ttp.expected, result, "msg")
				assObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(ttp.expected, result)
				assObj.YAMLEq(ttp.expected, result, "msg")
				assObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(ttp.expected, result, "msg")
				assObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})

	t.Run("reqObj", func(t *testing.T) {
		// Basic.
		{
			{
				reqObj.Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				reqObj.Equal(uint(11), result)
				reqObj.Equal(uint(11), result, "msg")
				reqObj.Equal(uint(11), result, "msg with arg %d", 42)
				reqObj.Equalf(uint(11), result, "msg")
				reqObj.Equalf(uint(11), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint(11), result)
				reqObj.NotEqual(uint(11), result, "msg")
				reqObj.NotEqual(uint(11), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint(11), result, "msg")
				reqObj.NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint8(12), result)
				reqObj.Equal(uint8(12), result, "msg")
				reqObj.Equal(uint8(12), result, "msg with arg %d", 42)
				reqObj.Equalf(uint8(12), result, "msg")
				reqObj.Equalf(uint8(12), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint8(12), result)
				reqObj.NotEqual(uint8(12), result, "msg")
				reqObj.NotEqual(uint8(12), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint8(12), result, "msg")
				reqObj.NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint16(13), result)
				reqObj.Equal(uint16(13), result, "msg")
				reqObj.Equal(uint16(13), result, "msg with arg %d", 42)
				reqObj.Equalf(uint16(13), result, "msg")
				reqObj.Equalf(uint16(13), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint16(13), result)
				reqObj.NotEqual(uint16(13), result, "msg")
				reqObj.NotEqual(uint16(13), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint16(13), result, "msg")
				reqObj.NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint32(14), result)
				reqObj.Equal(uint32(14), result, "msg")
				reqObj.Equal(uint32(14), result, "msg with arg %d", 42)
				reqObj.Equalf(uint32(14), result, "msg")
				reqObj.Equalf(uint32(14), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint32(14), result)
				reqObj.NotEqual(uint32(14), result, "msg")
				reqObj.NotEqual(uint32(14), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint32(14), result, "msg")
				reqObj.NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint64(15), result)
				reqObj.Equal(uint64(15), result, "msg")
				reqObj.Equal(uint64(15), result, "msg with arg %d", 42)
				reqObj.Equalf(uint64(15), result, "msg")
				reqObj.Equalf(uint64(15), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint64(15), result)
				reqObj.NotEqual(uint64(15), result, "msg")
				reqObj.NotEqual(uint64(15), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint64(15), result, "msg")
				reqObj.NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(21, result)
				reqObj.Equal(21, result, "msg")
				reqObj.Equal(21, result, "msg with arg %d", 42)
				reqObj.Equalf(21, result, "msg")
				reqObj.Equalf(21, result, "msg with arg %d", 42)

				reqObj.NotEqual(21, result)
				reqObj.NotEqual(21, result, "msg")
				reqObj.NotEqual(21, result, "msg with arg %d", 42)
				reqObj.NotEqualf(21, result, "msg")
				reqObj.NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int8(22), result)
				reqObj.Equal(int8(22), result, "msg")
				reqObj.Equal(int8(22), result, "msg with arg %d", 42)
				reqObj.Equalf(int8(22), result, "msg")
				reqObj.Equalf(int8(22), result, "msg with arg %d", 42)

				reqObj.NotEqual(int8(22), result)
				reqObj.NotEqual(int8(22), result, "msg")
				reqObj.NotEqual(int8(22), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int8(22), result, "msg")
				reqObj.NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int16(23), result)
				reqObj.Equal(int16(23), result, "msg")
				reqObj.Equal(int16(23), result, "msg with arg %d", 42)
				reqObj.Equalf(int16(23), result, "msg")
				reqObj.Equalf(int16(23), result, "msg with arg %d", 42)

				reqObj.NotEqual(int16(23), result)
				reqObj.NotEqual(int16(23), result, "msg")
				reqObj.NotEqual(int16(23), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int16(23), result, "msg")
				reqObj.NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int32(24), result)
				reqObj.Equal(int32(24), result, "msg")
				reqObj.Equal(int32(24), result, "msg with arg %d", 42)
				reqObj.Equalf(int32(24), result, "msg")
				reqObj.Equalf(int32(24), result, "msg with arg %d", 42)

				reqObj.NotEqual(int32(24), result)
				reqObj.NotEqual(int32(24), result, "msg")
				reqObj.NotEqual(int32(24), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int32(24), result, "msg")
				reqObj.NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int64(25), result)
				reqObj.Equal(int64(25), result, "msg")
				reqObj.Equal(int64(25), result, "msg with arg %d", 42)
				reqObj.Equalf(int64(25), result, "msg")
				reqObj.Equalf(int64(25), result, "msg with arg %d", 42)

				reqObj.NotEqual(int64(25), result)
				reqObj.NotEqual(int64(25), result, "msg")
				reqObj.NotEqual(int64(25), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int64(25), result, "msg")
				reqObj.NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(float32(31.), result)
				reqObj.Equal(float32(31.), result, "msg")
				reqObj.Equal(float32(31.), result, "msg with arg %d", 42)
				reqObj.Equalf(float32(31.), result, "msg")
				reqObj.Equalf(float32(31.), result, "msg with arg %d", 42)

				reqObj.NotEqual(float32(31.), result)
				reqObj.NotEqual(float32(31.), result, "msg")
				reqObj.NotEqual(float32(31.), result, "msg with arg %d", 42)
				reqObj.NotEqualf(float32(31.), result, "msg")
				reqObj.NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(float64(32.), result)
				reqObj.Equal(float64(32.), result, "msg")
				reqObj.Equal(float64(32.), result, "msg with arg %d", 42)
				reqObj.Equalf(float64(32.), result, "msg")
				reqObj.Equalf(float64(32.), result, "msg with arg %d", 42)

				reqObj.NotEqual(float64(32.), result)
				reqObj.NotEqual(float64(32.), result, "msg")
				reqObj.NotEqual(float64(32.), result, "msg with arg %d", 42)
				reqObj.NotEqualf(float64(32.), result, "msg")
				reqObj.NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(complex64(41-0.707i), result)
				reqObj.Equal(complex64(41-0.707i), result, "msg")
				reqObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				reqObj.Equalf(complex64(41-0.707i), result, "msg")
				reqObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				reqObj.NotEqual(complex64(41-0.707i), result)
				reqObj.NotEqual(complex64(41-0.707i), result, "msg")
				reqObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg")
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(complex128(42-0.707i), result)
				reqObj.Equal(complex128(42-0.707i), result, "msg")
				reqObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				reqObj.Equalf(complex128(42-0.707i), result, "msg")
				reqObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				reqObj.NotEqual(complex128(42-0.707i), result)
				reqObj.NotEqual(complex128(42-0.707i), result, "msg")
				reqObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg")
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal("string", result)
				reqObj.Equal("string", result, "msg")
				reqObj.Equal("string", result, "msg with arg %d", 42)
				reqObj.Equalf("string", result, "msg")
				reqObj.Equalf("string", result, "msg with arg %d", 42)

				reqObj.NotEqual("string", result)
				reqObj.NotEqual("string", result, "msg")
				reqObj.NotEqual("string", result, "msg with arg %d", 42)
				reqObj.NotEqualf("string", result, "msg")
				reqObj.NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal('r', result)
				reqObj.Equal('r', result, "msg")
				reqObj.Equal('r', result, "msg with arg %d", 42)
				reqObj.Equalf('r', result, "msg")
				reqObj.Equalf('r', result, "msg with arg %d", 42)

				reqObj.NotEqual('r', result)
				reqObj.NotEqual('r', result, "msg")
				reqObj.NotEqual('r', result, "msg with arg %d", 42)
				reqObj.NotEqualf('r', result, "msg")
				reqObj.NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(a, result)
				reqObj.Equal(a, result, "msg")
				reqObj.Equal(a, result, "msg with arg %d", 42)
				reqObj.Equalf(a, result, "msg")
				reqObj.Equalf(a, result, "msg with arg %d", 42)

				reqObj.NotEqual(a, result)
				reqObj.NotEqual(a, result, "msg")
				reqObj.NotEqual(a, result, "msg with arg %d", 42)
				reqObj.NotEqualf(a, result, "msg")
				reqObj.NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(b, result)
				reqObj.Equal(b, result, "msg")
				reqObj.Equal(b, result, "msg with arg %d", 42)
				reqObj.Equalf(b, result, "msg")
				reqObj.Equalf(b, result, "msg with arg %d", 42)

				reqObj.NotEqual(b, result)
				reqObj.NotEqual(b, result, "msg")
				reqObj.NotEqual(b, result, "msg with arg %d", 42)
				reqObj.NotEqualf(b, result, "msg")
				reqObj.NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(c, result)
				reqObj.Equal(c, result, "msg")
				reqObj.Equal(c, result, "msg with arg %d", 42)
				reqObj.Equalf(c, result, "msg")
				reqObj.Equalf(c, result, "msg with arg %d", 42)

				reqObj.NotEqual(c, result)
				reqObj.NotEqual(c, result, "msg")
				reqObj.NotEqual(c, result, "msg with arg %d", 42)
				reqObj.NotEqualf(c, result, "msg")
				reqObj.NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(d, result)
				reqObj.Equal(d, result, "msg")
				reqObj.Equal(d, result, "msg with arg %d", 42)
				reqObj.Equalf(d, result, "msg")
				reqObj.Equalf(d, result, "msg with arg %d", 42)

				reqObj.NotEqual(d, result)
				reqObj.NotEqual(d, result, "msg")
				reqObj.NotEqual(d, result, "msg with arg %d", 42)
				reqObj.NotEqualf(d, result, "msg")
				reqObj.NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(e, result)
				reqObj.Equal(e, result, "msg")
				reqObj.Equal(e, result, "msg with arg %d", 42)
				reqObj.Equalf(e, result, "msg")
				reqObj.Equalf(e, result, "msg with arg %d", 42)

				reqObj.NotEqual(e, result)
				reqObj.NotEqual(e, result, "msg")
				reqObj.NotEqual(e, result, "msg with arg %d", 42)
				reqObj.NotEqualf(e, result, "msg")
				reqObj.NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(f, result)
				reqObj.Equal(f, result, "msg")
				reqObj.Equal(f, result, "msg with arg %d", 42)
				reqObj.Equalf(f, result, "msg")
				reqObj.Equalf(f, result, "msg with arg %d", 42)

				reqObj.NotEqual(f, result)
				reqObj.NotEqual(f, result, "msg")
				reqObj.NotEqual(f, result, "msg with arg %d", 42)
				reqObj.NotEqualf(f, result, "msg")
				reqObj.NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(g, result)
				reqObj.Equal(g, result, "msg")
				reqObj.Equal(g, result, "msg with arg %d", 42)
				reqObj.Equalf(g, result, "msg")
				reqObj.Equalf(g, result, "msg with arg %d", 42)

				reqObj.NotEqual(g, result)
				reqObj.NotEqual(g, result, "msg")
				reqObj.NotEqual(g, result, "msg with arg %d", 42)
				reqObj.NotEqualf(g, result, "msg")
				reqObj.NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(h, result)
				reqObj.Equal(h, result, "msg")
				reqObj.Equal(h, result, "msg with arg %d", 42)
				reqObj.Equalf(h, result, "msg")
				reqObj.Equalf(h, result, "msg with arg %d", 42)

				reqObj.NotEqual(h, result)
				reqObj.NotEqual(h, result, "msg")
				reqObj.NotEqual(h, result, "msg with arg %d", 42)
				reqObj.NotEqualf(h, result, "msg")
				reqObj.NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(i, result)
				reqObj.Equal(i, result, "msg")
				reqObj.Equal(i, result, "msg with arg %d", 42)
				reqObj.Equalf(i, result, "msg")
				reqObj.Equalf(i, result, "msg with arg %d", 42)

				reqObj.NotEqual(i, result)
				reqObj.NotEqual(i, result, "msg")
				reqObj.NotEqual(i, result, "msg with arg %d", 42)
				reqObj.NotEqualf(i, result, "msg")
				reqObj.NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(j, result)
				reqObj.Equal(j, result, "msg")
				reqObj.Equal(j, result, "msg with arg %d", 42)
				reqObj.Equalf(j, result, "msg")
				reqObj.Equalf(j, result, "msg with arg %d", 42)

				reqObj.NotEqual(j, result)
				reqObj.NotEqual(j, result, "msg")
				reqObj.NotEqual(j, result, "msg with arg %d", 42)
				reqObj.NotEqualf(j, result, "msg")
				reqObj.NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(k, result)
				reqObj.Equal(k, result, "msg")
				reqObj.Equal(k, result, "msg with arg %d", 42)
				reqObj.Equalf(k, result, "msg")
				reqObj.Equalf(k, result, "msg with arg %d", 42)

				reqObj.NotEqual(k, result)
				reqObj.NotEqual(k, result, "msg")
				reqObj.NotEqual(k, result, "msg with arg %d", 42)
				reqObj.NotEqualf(k, result, "msg")
				reqObj.NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(l, result)
				reqObj.Equal(l, result, "msg")
				reqObj.Equal(l, result, "msg with arg %d", 42)
				reqObj.Equalf(l, result, "msg")
				reqObj.Equalf(l, result, "msg with arg %d", 42)

				reqObj.NotEqual(l, result)
				reqObj.NotEqual(l, result, "msg")
				reqObj.NotEqual(l, result, "msg with arg %d", 42)
				reqObj.NotEqualf(l, result, "msg")
				reqObj.NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(m, result)
				reqObj.Equal(m, result, "msg")
				reqObj.Equal(m, result, "msg with arg %d", 42)
				reqObj.Equalf(m, result, "msg")
				reqObj.Equalf(m, result, "msg with arg %d", 42)

				reqObj.NotEqual(m, result)
				reqObj.NotEqual(m, result, "msg")
				reqObj.NotEqual(m, result, "msg with arg %d", 42)
				reqObj.NotEqualf(m, result, "msg")
				reqObj.NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(n, result)
				reqObj.Equal(n, result, "msg")
				reqObj.Equal(n, result, "msg with arg %d", 42)
				reqObj.Equalf(n, result, "msg")
				reqObj.Equalf(n, result, "msg with arg %d", 42)

				reqObj.NotEqual(n, result)
				reqObj.NotEqual(n, result, "msg")
				reqObj.NotEqual(n, result, "msg with arg %d", 42)
				reqObj.NotEqualf(n, result, "msg")
				reqObj.NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(o, result)
				reqObj.Equal(o, result, "msg")
				reqObj.Equal(o, result, "msg with arg %d", 42)
				reqObj.Equalf(o, result, "msg")
				reqObj.Equalf(o, result, "msg with arg %d", 42)

				reqObj.NotEqual(o, result)
				reqObj.NotEqual(o, result, "msg")
				reqObj.NotEqual(o, result, "msg with arg %d", 42)
				reqObj.NotEqualf(o, result, "msg")
				reqObj.NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(p, result)
				reqObj.Equal(p, result, "msg")
				reqObj.Equal(p, result, "msg with arg %d", 42)
				reqObj.Equalf(p, result, "msg")
				reqObj.Equalf(p, result, "msg with arg %d", 42)

				reqObj.NotEqual(p, result)
				reqObj.NotEqual(p, result, "msg")
				reqObj.NotEqual(p, result, "msg with arg %d", 42)
				reqObj.NotEqualf(p, result, "msg")
				reqObj.NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(aa, result)
				reqObj.Equal(aa, result, "msg")
				reqObj.Equal(aa, result, "msg with arg %d", 42)
				reqObj.Equalf(aa, result, "msg")
				reqObj.Equalf(aa, result, "msg with arg %d", 42)

				reqObj.NotEqual(aa, result)
				reqObj.NotEqual(aa, result, "msg")
				reqObj.NotEqual(aa, result, "msg with arg %d", 42)
				reqObj.NotEqualf(aa, result, "msg")
				reqObj.NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(bb, result)
				reqObj.Equal(bb, result, "msg")
				reqObj.Equal(bb, result, "msg with arg %d", 42)
				reqObj.Equalf(bb, result, "msg")
				reqObj.Equalf(bb, result, "msg with arg %d", 42)

				reqObj.NotEqual(bb, result)
				reqObj.NotEqual(bb, result, "msg")
				reqObj.NotEqual(bb, result, "msg with arg %d", 42)
				reqObj.NotEqualf(bb, result, "msg")
				reqObj.NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(cc, result)
				reqObj.Equal(cc, result, "msg")
				reqObj.Equal(cc, result, "msg with arg %d", 42)
				reqObj.Equalf(cc, result, "msg")
				reqObj.Equalf(cc, result, "msg with arg %d", 42)

				reqObj.NotEqual(cc, result)
				reqObj.NotEqual(cc, result, "msg")
				reqObj.NotEqual(cc, result, "msg with arg %d", 42)
				reqObj.NotEqualf(cc, result, "msg")
				reqObj.NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(dd, result)
				reqObj.Equal(dd, result, "msg")
				reqObj.Equal(dd, result, "msg with arg %d", 42)
				reqObj.Equalf(dd, result, "msg")
				reqObj.Equalf(dd, result, "msg with arg %d", 42)

				reqObj.NotEqual(dd, result)
				reqObj.NotEqual(dd, result, "msg")
				reqObj.NotEqual(dd, result, "msg with arg %d", 42)
				reqObj.NotEqualf(dd, result, "msg")
				reqObj.NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ee, result)
				reqObj.Equal(ee, result, "msg")
				reqObj.Equal(ee, result, "msg with arg %d", 42)
				reqObj.Equalf(ee, result, "msg")
				reqObj.Equalf(ee, result, "msg with arg %d", 42)

				reqObj.NotEqual(ee, result)
				reqObj.NotEqual(ee, result, "msg")
				reqObj.NotEqual(ee, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ee, result, "msg")
				reqObj.NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ff, result)
				reqObj.Equal(ff, result, "msg")
				reqObj.Equal(ff, result, "msg with arg %d", 42)
				reqObj.Equalf(ff, result, "msg")
				reqObj.Equalf(ff, result, "msg with arg %d", 42)

				reqObj.NotEqual(ff, result)
				reqObj.NotEqual(ff, result, "msg")
				reqObj.NotEqual(ff, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ff, result, "msg")
				reqObj.NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(gg, result)
				reqObj.Equal(gg, result, "msg")
				reqObj.Equal(gg, result, "msg with arg %d", 42)
				reqObj.Equalf(gg, result, "msg")
				reqObj.Equalf(gg, result, "msg with arg %d", 42)

				reqObj.NotEqual(gg, result)
				reqObj.NotEqual(gg, result, "msg")
				reqObj.NotEqual(gg, result, "msg with arg %d", 42)
				reqObj.NotEqualf(gg, result, "msg")
				reqObj.NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(hh, result)
				reqObj.Equal(hh, result, "msg")
				reqObj.Equal(hh, result, "msg with arg %d", 42)
				reqObj.Equalf(hh, result, "msg")
				reqObj.Equalf(hh, result, "msg with arg %d", 42)

				reqObj.NotEqual(hh, result)
				reqObj.NotEqual(hh, result, "msg")
				reqObj.NotEqual(hh, result, "msg with arg %d", 42)
				reqObj.NotEqualf(hh, result, "msg")
				reqObj.NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ii, result)
				reqObj.Equal(ii, result, "msg")
				reqObj.Equal(ii, result, "msg with arg %d", 42)
				reqObj.Equalf(ii, result, "msg")
				reqObj.Equalf(ii, result, "msg with arg %d", 42)

				reqObj.NotEqual(ii, result)
				reqObj.NotEqual(ii, result, "msg")
				reqObj.NotEqual(ii, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ii, result, "msg")
				reqObj.NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(jj, result)
				reqObj.Equal(jj, result, "msg")
				reqObj.Equal(jj, result, "msg with arg %d", 42)
				reqObj.Equalf(jj, result, "msg")
				reqObj.Equalf(jj, result, "msg with arg %d", 42)

				reqObj.NotEqual(jj, result)
				reqObj.NotEqual(jj, result, "msg")
				reqObj.NotEqual(jj, result, "msg with arg %d", 42)
				reqObj.NotEqualf(jj, result, "msg")
				reqObj.NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(kk, result)
				reqObj.Equal(kk, result, "msg")
				reqObj.Equal(kk, result, "msg with arg %d", 42)
				reqObj.Equalf(kk, result, "msg")
				reqObj.Equalf(kk, result, "msg with arg %d", 42)

				reqObj.NotEqual(kk, result)
				reqObj.NotEqual(kk, result, "msg")
				reqObj.NotEqual(kk, result, "msg with arg %d", 42)
				reqObj.NotEqualf(kk, result, "msg")
				reqObj.NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ll, result)
				reqObj.Equal(ll, result, "msg")
				reqObj.Equal(ll, result, "msg with arg %d", 42)
				reqObj.Equalf(ll, result, "msg")
				reqObj.Equalf(ll, result, "msg with arg %d", 42)

				reqObj.NotEqual(ll, result)
				reqObj.NotEqual(ll, result, "msg")
				reqObj.NotEqual(ll, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ll, result, "msg")
				reqObj.NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(mm, result)
				reqObj.Equal(mm, result, "msg")
				reqObj.Equal(mm, result, "msg with arg %d", 42)
				reqObj.Equalf(mm, result, "msg")
				reqObj.Equalf(mm, result, "msg with arg %d", 42)

				reqObj.NotEqual(mm, result)
				reqObj.NotEqual(mm, result, "msg")
				reqObj.NotEqual(mm, result, "msg with arg %d", 42)
				reqObj.NotEqualf(mm, result, "msg")
				reqObj.NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(nn, result)
				reqObj.Equal(nn, result, "msg")
				reqObj.Equal(nn, result, "msg with arg %d", 42)
				reqObj.Equalf(nn, result, "msg")
				reqObj.Equalf(nn, result, "msg with arg %d", 42)

				reqObj.NotEqual(nn, result)
				reqObj.NotEqual(nn, result, "msg")
				reqObj.NotEqual(nn, result, "msg with arg %d", 42)
				reqObj.NotEqualf(nn, result, "msg")
				reqObj.NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(oo, result)
				reqObj.Equal(oo, result, "msg")
				reqObj.Equal(oo, result, "msg with arg %d", 42)
				reqObj.Equalf(oo, result, "msg")
				reqObj.Equalf(oo, result, "msg with arg %d", 42)

				reqObj.NotEqual(oo, result)
				reqObj.NotEqual(oo, result, "msg")
				reqObj.NotEqual(oo, result, "msg with arg %d", 42)
				reqObj.NotEqualf(oo, result, "msg")
				reqObj.NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(pp, result)
				reqObj.Equal(pp, result, "msg")
				reqObj.Equal(pp, result, "msg with arg %d", 42)
				reqObj.Equalf(pp, result, "msg")
				reqObj.Equalf(pp, result, "msg with arg %d", 42)

				reqObj.NotEqual(pp, result)
				reqObj.NotEqual(pp, result, "msg")
				reqObj.NotEqual(pp, result, "msg with arg %d", 42)
				reqObj.NotEqualf(pp, result, "msg")
				reqObj.NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(Monday, result)
				reqObj.Equal(Monday, result, "msg")
				reqObj.Equal(Monday, result, "msg with arg %d", 42)
				reqObj.Equalf(Monday, result, "msg")
				reqObj.Equalf(Monday, result, "msg with arg %d", 42)

				reqObj.NotEqual(Monday, result)
				reqObj.NotEqual(Monday, result, "msg")
				reqObj.NotEqual(Monday, result, "msg with arg %d", 42)
				reqObj.NotEqualf(Monday, result, "msg")
				reqObj.NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(DayMonday, result)
				reqObj.Equal(DayMonday, result, "msg")
				reqObj.Equal(DayMonday, result, "msg with arg %d", 42)
				reqObj.Equalf(DayMonday, result, "msg")
				reqObj.Equalf(DayMonday, result, "msg with arg %d", 42)

				reqObj.NotEqual(DayMonday, result)
				reqObj.NotEqual(DayMonday, result, "msg")
				reqObj.NotEqual(DayMonday, result, "msg with arg %d", 42)
				reqObj.NotEqualf(DayMonday, result, "msg")
				reqObj.NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(expected, result)
				reqObj.Equal(expected, result, "msg")
				reqObj.Equal(expected, result, "msg with arg %d", 42)
				reqObj.Equalf(expected, result, "msg")
				reqObj.Equalf(expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(expected, result)
				reqObj.NotEqual(expected, result, "msg")
				reqObj.NotEqual(expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(expected, result, "msg")
				reqObj.NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(tt.expected, result)
				reqObj.Equal(tt.expected, result, "msg")
				reqObj.Equal(tt.expected, result, "msg with arg %d", 42)
				reqObj.Equalf(tt.expected, result, "msg")
				reqObj.Equalf(tt.expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(tt.expected, result)
				reqObj.NotEqual(tt.expected, result, "msg")
				reqObj.NotEqual(tt.expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(tt.expected, result, "msg")
				reqObj.NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ttp.expected, result)
				reqObj.Equal(ttp.expected, result, "msg")
				reqObj.Equal(ttp.expected, result, "msg with arg %d", 42)
				reqObj.Equalf(ttp.expected, result, "msg")
				reqObj.Equalf(ttp.expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(ttp.expected, result)
				reqObj.NotEqual(ttp.expected, result, "msg")
				reqObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ttp.expected, result, "msg")
				reqObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.
		{
			{
				reqObj.JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				reqObj.JSONEq("string", result)
				reqObj.JSONEq("string", result, "msg")
				reqObj.JSONEq("string", result, "msg with arg %d", 42)
				reqObj.JSONEqf("string", result, "msg")
				reqObj.JSONEqf("string", result, "msg with arg %d", 42)

				reqObj.YAMLEq("string", result)
				reqObj.YAMLEq("string", result, "msg")
				reqObj.YAMLEq("string", result, "msg with arg %d", 42)
				reqObj.YAMLEqf("string", result, "msg")
				reqObj.YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(o, result)
				reqObj.JSONEq(o, result, "msg")
				reqObj.JSONEq(o, result, "msg with arg %d", 42)
				reqObj.JSONEqf(o, result, "msg")
				reqObj.JSONEqf(o, result, "msg with arg %d", 42)

				reqObj.YAMLEq(o, result)
				reqObj.YAMLEq(o, result, "msg")
				reqObj.YAMLEq(o, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(o, result, "msg")
				reqObj.YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(oo, result)
				reqObj.JSONEq(oo, result, "msg")
				reqObj.JSONEq(oo, result, "msg with arg %d", 42)
				reqObj.JSONEqf(oo, result, "msg")
				reqObj.JSONEqf(oo, result, "msg with arg %d", 42)

				reqObj.YAMLEq(oo, result)
				reqObj.YAMLEq(oo, result, "msg")
				reqObj.YAMLEq(oo, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(oo, result, "msg")
				reqObj.YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(string(DayNameMonday), result)
				reqObj.JSONEq(string(DayNameMonday), result, "msg")
				reqObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				reqObj.JSONEqf(string(DayNameMonday), result, "msg")
				reqObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				reqObj.YAMLEq(string(DayNameMonday), result)
				reqObj.YAMLEq(string(DayNameMonday), result, "msg")
				reqObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg")
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(expected, result)
				reqObj.JSONEq(expected, result, "msg")
				reqObj.JSONEq(expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(expected, result, "msg")
				reqObj.JSONEqf(expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(expected, result)
				reqObj.YAMLEq(expected, result, "msg")
				reqObj.YAMLEq(expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(expected, result, "msg")
				reqObj.YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(tt.expected, result)
				reqObj.JSONEq(tt.expected, result, "msg")
				reqObj.JSONEq(tt.expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(tt.expected, result, "msg")
				reqObj.JSONEqf(tt.expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(tt.expected, result)
				reqObj.YAMLEq(tt.expected, result, "msg")
				reqObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(tt.expected, result, "msg")
				reqObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(ttp.expected, result)
				reqObj.JSONEq(ttp.expected, result, "msg")
				reqObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(ttp.expected, result, "msg")
				reqObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(ttp.expected, result)
				reqObj.YAMLEq(ttp.expected, result, "msg")
				reqObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(ttp.expected, result, "msg")
				reqObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})
}

type ConfusedWithExpectedActualSuite struct {
	suite.Suite
}

func TestConfusedWithExpectedActualSuite(t *testing.T) {
	suite.Run(t, new(ConfusedWithExpectedActualSuite))
}

func (s *ConfusedWithExpectedActualSuite) TestAll() {
	var result string

	const (
		a = uint(11)
		b = uint8(12)
		c = uint16(13)
		d = uint32(14)
		e = uint64(15)

		f = int(21)
		g = int8(22)
		h = int16(23)
		i = int32(24)
		j = int64(25)

		k = float32(31.)
		l = float64(32.)

		m = complex64(41 - 0.707i)
		n = complex128(42 - 0.707i)

		o = "string"
		p = 'r'
	)

	const (
		aa uint   = 11
		bb uint8  = 12
		cc uint16 = 13
		dd uint32 = 14
		ee uint64 = 15

		ff int   = 21
		gg int8  = 22
		hh int16 = 23
		ii int32 = 24
		jj int64 = 25

		kk float32 = 31.
		ll float64 = 32.

		mm complex64  = 41 - 0.707i
		nn complex128 = 42 - 0.707i

		oo string = "string"
		pp rune   = 'r'
	)

	const (
		Sunday = iota
		Monday
	)

	type Day int
	const (
		DaySunday = iota
		DayMonday
	)

	type DayName string
	const DayNameMonday DayName = "Monday"

	var expected string
	var tt struct{ expected string }
	ttp := &struct{ expected string }{}

	assObj, reqObj := s.Assert(), s.Require()
	// Basic.
	{
		{
			{
				s.Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.Equal(uint(11), result)
				s.Equal(uint(11), result, "msg")
				s.Equal(uint(11), result, "msg with arg %d", 42)
				s.Equalf(uint(11), result, "msg")
				s.Equalf(uint(11), result, "msg with arg %d", 42)

				s.NotEqual(uint(11), result)
				s.NotEqual(uint(11), result, "msg")
				s.NotEqual(uint(11), result, "msg with arg %d", 42)
				s.NotEqualf(uint(11), result, "msg")
				s.NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				s.Equal(uint8(12), result)
				s.Equal(uint8(12), result, "msg")
				s.Equal(uint8(12), result, "msg with arg %d", 42)
				s.Equalf(uint8(12), result, "msg")
				s.Equalf(uint8(12), result, "msg with arg %d", 42)

				s.NotEqual(uint8(12), result)
				s.NotEqual(uint8(12), result, "msg")
				s.NotEqual(uint8(12), result, "msg with arg %d", 42)
				s.NotEqualf(uint8(12), result, "msg")
				s.NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				s.Equal(uint16(13), result)
				s.Equal(uint16(13), result, "msg")
				s.Equal(uint16(13), result, "msg with arg %d", 42)
				s.Equalf(uint16(13), result, "msg")
				s.Equalf(uint16(13), result, "msg with arg %d", 42)

				s.NotEqual(uint16(13), result)
				s.NotEqual(uint16(13), result, "msg")
				s.NotEqual(uint16(13), result, "msg with arg %d", 42)
				s.NotEqualf(uint16(13), result, "msg")
				s.NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				s.Equal(uint32(14), result)
				s.Equal(uint32(14), result, "msg")
				s.Equal(uint32(14), result, "msg with arg %d", 42)
				s.Equalf(uint32(14), result, "msg")
				s.Equalf(uint32(14), result, "msg with arg %d", 42)

				s.NotEqual(uint32(14), result)
				s.NotEqual(uint32(14), result, "msg")
				s.NotEqual(uint32(14), result, "msg with arg %d", 42)
				s.NotEqualf(uint32(14), result, "msg")
				s.NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				s.Equal(uint64(15), result)
				s.Equal(uint64(15), result, "msg")
				s.Equal(uint64(15), result, "msg with arg %d", 42)
				s.Equalf(uint64(15), result, "msg")
				s.Equalf(uint64(15), result, "msg with arg %d", 42)

				s.NotEqual(uint64(15), result)
				s.NotEqual(uint64(15), result, "msg")
				s.NotEqual(uint64(15), result, "msg with arg %d", 42)
				s.NotEqualf(uint64(15), result, "msg")
				s.NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				s.Equal(21, result)
				s.Equal(21, result, "msg")
				s.Equal(21, result, "msg with arg %d", 42)
				s.Equalf(21, result, "msg")
				s.Equalf(21, result, "msg with arg %d", 42)

				s.NotEqual(21, result)
				s.NotEqual(21, result, "msg")
				s.NotEqual(21, result, "msg with arg %d", 42)
				s.NotEqualf(21, result, "msg")
				s.NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				s.Equal(int8(22), result)
				s.Equal(int8(22), result, "msg")
				s.Equal(int8(22), result, "msg with arg %d", 42)
				s.Equalf(int8(22), result, "msg")
				s.Equalf(int8(22), result, "msg with arg %d", 42)

				s.NotEqual(int8(22), result)
				s.NotEqual(int8(22), result, "msg")
				s.NotEqual(int8(22), result, "msg with arg %d", 42)
				s.NotEqualf(int8(22), result, "msg")
				s.NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				s.Equal(int16(23), result)
				s.Equal(int16(23), result, "msg")
				s.Equal(int16(23), result, "msg with arg %d", 42)
				s.Equalf(int16(23), result, "msg")
				s.Equalf(int16(23), result, "msg with arg %d", 42)

				s.NotEqual(int16(23), result)
				s.NotEqual(int16(23), result, "msg")
				s.NotEqual(int16(23), result, "msg with arg %d", 42)
				s.NotEqualf(int16(23), result, "msg")
				s.NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				s.Equal(int32(24), result)
				s.Equal(int32(24), result, "msg")
				s.Equal(int32(24), result, "msg with arg %d", 42)
				s.Equalf(int32(24), result, "msg")
				s.Equalf(int32(24), result, "msg with arg %d", 42)

				s.NotEqual(int32(24), result)
				s.NotEqual(int32(24), result, "msg")
				s.NotEqual(int32(24), result, "msg with arg %d", 42)
				s.NotEqualf(int32(24), result, "msg")
				s.NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				s.Equal(int64(25), result)
				s.Equal(int64(25), result, "msg")
				s.Equal(int64(25), result, "msg with arg %d", 42)
				s.Equalf(int64(25), result, "msg")
				s.Equalf(int64(25), result, "msg with arg %d", 42)

				s.NotEqual(int64(25), result)
				s.NotEqual(int64(25), result, "msg")
				s.NotEqual(int64(25), result, "msg with arg %d", 42)
				s.NotEqualf(int64(25), result, "msg")
				s.NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				s.Equal(float32(31.), result)
				s.Equal(float32(31.), result, "msg")
				s.Equal(float32(31.), result, "msg with arg %d", 42)
				s.Equalf(float32(31.), result, "msg")
				s.Equalf(float32(31.), result, "msg with arg %d", 42)

				s.NotEqual(float32(31.), result)
				s.NotEqual(float32(31.), result, "msg")
				s.NotEqual(float32(31.), result, "msg with arg %d", 42)
				s.NotEqualf(float32(31.), result, "msg")
				s.NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				s.Equal(float64(32.), result)
				s.Equal(float64(32.), result, "msg")
				s.Equal(float64(32.), result, "msg with arg %d", 42)
				s.Equalf(float64(32.), result, "msg")
				s.Equalf(float64(32.), result, "msg with arg %d", 42)

				s.NotEqual(float64(32.), result)
				s.NotEqual(float64(32.), result, "msg")
				s.NotEqual(float64(32.), result, "msg with arg %d", 42)
				s.NotEqualf(float64(32.), result, "msg")
				s.NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				s.Equal(complex64(41-0.707i), result)
				s.Equal(complex64(41-0.707i), result, "msg")
				s.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.Equalf(complex64(41-0.707i), result, "msg")
				s.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				s.NotEqual(complex64(41-0.707i), result)
				s.NotEqual(complex64(41-0.707i), result, "msg")
				s.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.NotEqualf(complex64(41-0.707i), result, "msg")
				s.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Equal(complex128(42-0.707i), result)
				s.Equal(complex128(42-0.707i), result, "msg")
				s.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.Equalf(complex128(42-0.707i), result, "msg")
				s.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				s.NotEqual(complex128(42-0.707i), result)
				s.NotEqual(complex128(42-0.707i), result, "msg")
				s.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.NotEqualf(complex128(42-0.707i), result, "msg")
				s.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Equal("string", result)
				s.Equal("string", result, "msg")
				s.Equal("string", result, "msg with arg %d", 42)
				s.Equalf("string", result, "msg")
				s.Equalf("string", result, "msg with arg %d", 42)

				s.NotEqual("string", result)
				s.NotEqual("string", result, "msg")
				s.NotEqual("string", result, "msg with arg %d", 42)
				s.NotEqualf("string", result, "msg")
				s.NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				s.Equal('r', result)
				s.Equal('r', result, "msg")
				s.Equal('r', result, "msg with arg %d", 42)
				s.Equalf('r', result, "msg")
				s.Equalf('r', result, "msg with arg %d", 42)

				s.NotEqual('r', result)
				s.NotEqual('r', result, "msg")
				s.NotEqual('r', result, "msg with arg %d", 42)
				s.NotEqualf('r', result, "msg")
				s.NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				s.Equal(a, result)
				s.Equal(a, result, "msg")
				s.Equal(a, result, "msg with arg %d", 42)
				s.Equalf(a, result, "msg")
				s.Equalf(a, result, "msg with arg %d", 42)

				s.NotEqual(a, result)
				s.NotEqual(a, result, "msg")
				s.NotEqual(a, result, "msg with arg %d", 42)
				s.NotEqualf(a, result, "msg")
				s.NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				s.Equal(b, result)
				s.Equal(b, result, "msg")
				s.Equal(b, result, "msg with arg %d", 42)
				s.Equalf(b, result, "msg")
				s.Equalf(b, result, "msg with arg %d", 42)

				s.NotEqual(b, result)
				s.NotEqual(b, result, "msg")
				s.NotEqual(b, result, "msg with arg %d", 42)
				s.NotEqualf(b, result, "msg")
				s.NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				s.Equal(c, result)
				s.Equal(c, result, "msg")
				s.Equal(c, result, "msg with arg %d", 42)
				s.Equalf(c, result, "msg")
				s.Equalf(c, result, "msg with arg %d", 42)

				s.NotEqual(c, result)
				s.NotEqual(c, result, "msg")
				s.NotEqual(c, result, "msg with arg %d", 42)
				s.NotEqualf(c, result, "msg")
				s.NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				s.Equal(d, result)
				s.Equal(d, result, "msg")
				s.Equal(d, result, "msg with arg %d", 42)
				s.Equalf(d, result, "msg")
				s.Equalf(d, result, "msg with arg %d", 42)

				s.NotEqual(d, result)
				s.NotEqual(d, result, "msg")
				s.NotEqual(d, result, "msg with arg %d", 42)
				s.NotEqualf(d, result, "msg")
				s.NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				s.Equal(e, result)
				s.Equal(e, result, "msg")
				s.Equal(e, result, "msg with arg %d", 42)
				s.Equalf(e, result, "msg")
				s.Equalf(e, result, "msg with arg %d", 42)

				s.NotEqual(e, result)
				s.NotEqual(e, result, "msg")
				s.NotEqual(e, result, "msg with arg %d", 42)
				s.NotEqualf(e, result, "msg")
				s.NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				s.Equal(f, result)
				s.Equal(f, result, "msg")
				s.Equal(f, result, "msg with arg %d", 42)
				s.Equalf(f, result, "msg")
				s.Equalf(f, result, "msg with arg %d", 42)

				s.NotEqual(f, result)
				s.NotEqual(f, result, "msg")
				s.NotEqual(f, result, "msg with arg %d", 42)
				s.NotEqualf(f, result, "msg")
				s.NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				s.Equal(g, result)
				s.Equal(g, result, "msg")
				s.Equal(g, result, "msg with arg %d", 42)
				s.Equalf(g, result, "msg")
				s.Equalf(g, result, "msg with arg %d", 42)

				s.NotEqual(g, result)
				s.NotEqual(g, result, "msg")
				s.NotEqual(g, result, "msg with arg %d", 42)
				s.NotEqualf(g, result, "msg")
				s.NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				s.Equal(h, result)
				s.Equal(h, result, "msg")
				s.Equal(h, result, "msg with arg %d", 42)
				s.Equalf(h, result, "msg")
				s.Equalf(h, result, "msg with arg %d", 42)

				s.NotEqual(h, result)
				s.NotEqual(h, result, "msg")
				s.NotEqual(h, result, "msg with arg %d", 42)
				s.NotEqualf(h, result, "msg")
				s.NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				s.Equal(i, result)
				s.Equal(i, result, "msg")
				s.Equal(i, result, "msg with arg %d", 42)
				s.Equalf(i, result, "msg")
				s.Equalf(i, result, "msg with arg %d", 42)

				s.NotEqual(i, result)
				s.NotEqual(i, result, "msg")
				s.NotEqual(i, result, "msg with arg %d", 42)
				s.NotEqualf(i, result, "msg")
				s.NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				s.Equal(j, result)
				s.Equal(j, result, "msg")
				s.Equal(j, result, "msg with arg %d", 42)
				s.Equalf(j, result, "msg")
				s.Equalf(j, result, "msg with arg %d", 42)

				s.NotEqual(j, result)
				s.NotEqual(j, result, "msg")
				s.NotEqual(j, result, "msg with arg %d", 42)
				s.NotEqualf(j, result, "msg")
				s.NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				s.Equal(k, result)
				s.Equal(k, result, "msg")
				s.Equal(k, result, "msg with arg %d", 42)
				s.Equalf(k, result, "msg")
				s.Equalf(k, result, "msg with arg %d", 42)

				s.NotEqual(k, result)
				s.NotEqual(k, result, "msg")
				s.NotEqual(k, result, "msg with arg %d", 42)
				s.NotEqualf(k, result, "msg")
				s.NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				s.Equal(l, result)
				s.Equal(l, result, "msg")
				s.Equal(l, result, "msg with arg %d", 42)
				s.Equalf(l, result, "msg")
				s.Equalf(l, result, "msg with arg %d", 42)

				s.NotEqual(l, result)
				s.NotEqual(l, result, "msg")
				s.NotEqual(l, result, "msg with arg %d", 42)
				s.NotEqualf(l, result, "msg")
				s.NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				s.Equal(m, result)
				s.Equal(m, result, "msg")
				s.Equal(m, result, "msg with arg %d", 42)
				s.Equalf(m, result, "msg")
				s.Equalf(m, result, "msg with arg %d", 42)

				s.NotEqual(m, result)
				s.NotEqual(m, result, "msg")
				s.NotEqual(m, result, "msg with arg %d", 42)
				s.NotEqualf(m, result, "msg")
				s.NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				s.Equal(n, result)
				s.Equal(n, result, "msg")
				s.Equal(n, result, "msg with arg %d", 42)
				s.Equalf(n, result, "msg")
				s.Equalf(n, result, "msg with arg %d", 42)

				s.NotEqual(n, result)
				s.NotEqual(n, result, "msg")
				s.NotEqual(n, result, "msg with arg %d", 42)
				s.NotEqualf(n, result, "msg")
				s.NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				s.Equal(o, result)
				s.Equal(o, result, "msg")
				s.Equal(o, result, "msg with arg %d", 42)
				s.Equalf(o, result, "msg")
				s.Equalf(o, result, "msg with arg %d", 42)

				s.NotEqual(o, result)
				s.NotEqual(o, result, "msg")
				s.NotEqual(o, result, "msg with arg %d", 42)
				s.NotEqualf(o, result, "msg")
				s.NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				s.Equal(p, result)
				s.Equal(p, result, "msg")
				s.Equal(p, result, "msg with arg %d", 42)
				s.Equalf(p, result, "msg")
				s.Equalf(p, result, "msg with arg %d", 42)

				s.NotEqual(p, result)
				s.NotEqual(p, result, "msg")
				s.NotEqual(p, result, "msg with arg %d", 42)
				s.NotEqualf(p, result, "msg")
				s.NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				s.Equal(aa, result)
				s.Equal(aa, result, "msg")
				s.Equal(aa, result, "msg with arg %d", 42)
				s.Equalf(aa, result, "msg")
				s.Equalf(aa, result, "msg with arg %d", 42)

				s.NotEqual(aa, result)
				s.NotEqual(aa, result, "msg")
				s.NotEqual(aa, result, "msg with arg %d", 42)
				s.NotEqualf(aa, result, "msg")
				s.NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				s.Equal(bb, result)
				s.Equal(bb, result, "msg")
				s.Equal(bb, result, "msg with arg %d", 42)
				s.Equalf(bb, result, "msg")
				s.Equalf(bb, result, "msg with arg %d", 42)

				s.NotEqual(bb, result)
				s.NotEqual(bb, result, "msg")
				s.NotEqual(bb, result, "msg with arg %d", 42)
				s.NotEqualf(bb, result, "msg")
				s.NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				s.Equal(cc, result)
				s.Equal(cc, result, "msg")
				s.Equal(cc, result, "msg with arg %d", 42)
				s.Equalf(cc, result, "msg")
				s.Equalf(cc, result, "msg with arg %d", 42)

				s.NotEqual(cc, result)
				s.NotEqual(cc, result, "msg")
				s.NotEqual(cc, result, "msg with arg %d", 42)
				s.NotEqualf(cc, result, "msg")
				s.NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				s.Equal(dd, result)
				s.Equal(dd, result, "msg")
				s.Equal(dd, result, "msg with arg %d", 42)
				s.Equalf(dd, result, "msg")
				s.Equalf(dd, result, "msg with arg %d", 42)

				s.NotEqual(dd, result)
				s.NotEqual(dd, result, "msg")
				s.NotEqual(dd, result, "msg with arg %d", 42)
				s.NotEqualf(dd, result, "msg")
				s.NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				s.Equal(ee, result)
				s.Equal(ee, result, "msg")
				s.Equal(ee, result, "msg with arg %d", 42)
				s.Equalf(ee, result, "msg")
				s.Equalf(ee, result, "msg with arg %d", 42)

				s.NotEqual(ee, result)
				s.NotEqual(ee, result, "msg")
				s.NotEqual(ee, result, "msg with arg %d", 42)
				s.NotEqualf(ee, result, "msg")
				s.NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				s.Equal(ff, result)
				s.Equal(ff, result, "msg")
				s.Equal(ff, result, "msg with arg %d", 42)
				s.Equalf(ff, result, "msg")
				s.Equalf(ff, result, "msg with arg %d", 42)

				s.NotEqual(ff, result)
				s.NotEqual(ff, result, "msg")
				s.NotEqual(ff, result, "msg with arg %d", 42)
				s.NotEqualf(ff, result, "msg")
				s.NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				s.Equal(gg, result)
				s.Equal(gg, result, "msg")
				s.Equal(gg, result, "msg with arg %d", 42)
				s.Equalf(gg, result, "msg")
				s.Equalf(gg, result, "msg with arg %d", 42)

				s.NotEqual(gg, result)
				s.NotEqual(gg, result, "msg")
				s.NotEqual(gg, result, "msg with arg %d", 42)
				s.NotEqualf(gg, result, "msg")
				s.NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				s.Equal(hh, result)
				s.Equal(hh, result, "msg")
				s.Equal(hh, result, "msg with arg %d", 42)
				s.Equalf(hh, result, "msg")
				s.Equalf(hh, result, "msg with arg %d", 42)

				s.NotEqual(hh, result)
				s.NotEqual(hh, result, "msg")
				s.NotEqual(hh, result, "msg with arg %d", 42)
				s.NotEqualf(hh, result, "msg")
				s.NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				s.Equal(ii, result)
				s.Equal(ii, result, "msg")
				s.Equal(ii, result, "msg with arg %d", 42)
				s.Equalf(ii, result, "msg")
				s.Equalf(ii, result, "msg with arg %d", 42)

				s.NotEqual(ii, result)
				s.NotEqual(ii, result, "msg")
				s.NotEqual(ii, result, "msg with arg %d", 42)
				s.NotEqualf(ii, result, "msg")
				s.NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				s.Equal(jj, result)
				s.Equal(jj, result, "msg")
				s.Equal(jj, result, "msg with arg %d", 42)
				s.Equalf(jj, result, "msg")
				s.Equalf(jj, result, "msg with arg %d", 42)

				s.NotEqual(jj, result)
				s.NotEqual(jj, result, "msg")
				s.NotEqual(jj, result, "msg with arg %d", 42)
				s.NotEqualf(jj, result, "msg")
				s.NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				s.Equal(kk, result)
				s.Equal(kk, result, "msg")
				s.Equal(kk, result, "msg with arg %d", 42)
				s.Equalf(kk, result, "msg")
				s.Equalf(kk, result, "msg with arg %d", 42)

				s.NotEqual(kk, result)
				s.NotEqual(kk, result, "msg")
				s.NotEqual(kk, result, "msg with arg %d", 42)
				s.NotEqualf(kk, result, "msg")
				s.NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				s.Equal(ll, result)
				s.Equal(ll, result, "msg")
				s.Equal(ll, result, "msg with arg %d", 42)
				s.Equalf(ll, result, "msg")
				s.Equalf(ll, result, "msg with arg %d", 42)

				s.NotEqual(ll, result)
				s.NotEqual(ll, result, "msg")
				s.NotEqual(ll, result, "msg with arg %d", 42)
				s.NotEqualf(ll, result, "msg")
				s.NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				s.Equal(mm, result)
				s.Equal(mm, result, "msg")
				s.Equal(mm, result, "msg with arg %d", 42)
				s.Equalf(mm, result, "msg")
				s.Equalf(mm, result, "msg with arg %d", 42)

				s.NotEqual(mm, result)
				s.NotEqual(mm, result, "msg")
				s.NotEqual(mm, result, "msg with arg %d", 42)
				s.NotEqualf(mm, result, "msg")
				s.NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				s.Equal(nn, result)
				s.Equal(nn, result, "msg")
				s.Equal(nn, result, "msg with arg %d", 42)
				s.Equalf(nn, result, "msg")
				s.Equalf(nn, result, "msg with arg %d", 42)

				s.NotEqual(nn, result)
				s.NotEqual(nn, result, "msg")
				s.NotEqual(nn, result, "msg with arg %d", 42)
				s.NotEqualf(nn, result, "msg")
				s.NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				s.Equal(oo, result)
				s.Equal(oo, result, "msg")
				s.Equal(oo, result, "msg with arg %d", 42)
				s.Equalf(oo, result, "msg")
				s.Equalf(oo, result, "msg with arg %d", 42)

				s.NotEqual(oo, result)
				s.NotEqual(oo, result, "msg")
				s.NotEqual(oo, result, "msg with arg %d", 42)
				s.NotEqualf(oo, result, "msg")
				s.NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				s.Equal(pp, result)
				s.Equal(pp, result, "msg")
				s.Equal(pp, result, "msg with arg %d", 42)
				s.Equalf(pp, result, "msg")
				s.Equalf(pp, result, "msg with arg %d", 42)

				s.NotEqual(pp, result)
				s.NotEqual(pp, result, "msg")
				s.NotEqual(pp, result, "msg with arg %d", 42)
				s.NotEqualf(pp, result, "msg")
				s.NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				s.Equal(Monday, result)
				s.Equal(Monday, result, "msg")
				s.Equal(Monday, result, "msg with arg %d", 42)
				s.Equalf(Monday, result, "msg")
				s.Equalf(Monday, result, "msg with arg %d", 42)

				s.NotEqual(Monday, result)
				s.NotEqual(Monday, result, "msg")
				s.NotEqual(Monday, result, "msg with arg %d", 42)
				s.NotEqualf(Monday, result, "msg")
				s.NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				s.Equal(DayMonday, result)
				s.Equal(DayMonday, result, "msg")
				s.Equal(DayMonday, result, "msg with arg %d", 42)
				s.Equalf(DayMonday, result, "msg")
				s.Equalf(DayMonday, result, "msg with arg %d", 42)

				s.NotEqual(DayMonday, result)
				s.NotEqual(DayMonday, result, "msg")
				s.NotEqual(DayMonday, result, "msg with arg %d", 42)
				s.NotEqualf(DayMonday, result, "msg")
				s.NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				s.Equal(expected, result)
				s.Equal(expected, result, "msg")
				s.Equal(expected, result, "msg with arg %d", 42)
				s.Equalf(expected, result, "msg")
				s.Equalf(expected, result, "msg with arg %d", 42)

				s.NotEqual(expected, result)
				s.NotEqual(expected, result, "msg")
				s.NotEqual(expected, result, "msg with arg %d", 42)
				s.NotEqualf(expected, result, "msg")
				s.NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				s.Equal(tt.expected, result)
				s.Equal(tt.expected, result, "msg")
				s.Equal(tt.expected, result, "msg with arg %d", 42)
				s.Equalf(tt.expected, result, "msg")
				s.Equalf(tt.expected, result, "msg with arg %d", 42)

				s.NotEqual(tt.expected, result)
				s.NotEqual(tt.expected, result, "msg")
				s.NotEqual(tt.expected, result, "msg with arg %d", 42)
				s.NotEqualf(tt.expected, result, "msg")
				s.NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.Equal(ttp.expected, result)
				s.Equal(ttp.expected, result, "msg")
				s.Equal(ttp.expected, result, "msg with arg %d", 42)
				s.Equalf(ttp.expected, result, "msg")
				s.Equalf(ttp.expected, result, "msg with arg %d", 42)

				s.NotEqual(ttp.expected, result)
				s.NotEqual(ttp.expected, result, "msg")
				s.NotEqual(ttp.expected, result, "msg with arg %d", 42)
				s.NotEqualf(ttp.expected, result, "msg")
				s.NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				s.Assert().Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.Assert().Equal(uint(11), result)
				s.Assert().Equal(uint(11), result, "msg")
				s.Assert().Equal(uint(11), result, "msg with arg %d", 42)
				s.Assert().Equalf(uint(11), result, "msg")
				s.Assert().Equalf(uint(11), result, "msg with arg %d", 42)

				s.Assert().NotEqual(uint(11), result)
				s.Assert().NotEqual(uint(11), result, "msg")
				s.Assert().NotEqual(uint(11), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(uint(11), result, "msg")
				s.Assert().NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(uint8(12), result)
				s.Assert().Equal(uint8(12), result, "msg")
				s.Assert().Equal(uint8(12), result, "msg with arg %d", 42)
				s.Assert().Equalf(uint8(12), result, "msg")
				s.Assert().Equalf(uint8(12), result, "msg with arg %d", 42)

				s.Assert().NotEqual(uint8(12), result)
				s.Assert().NotEqual(uint8(12), result, "msg")
				s.Assert().NotEqual(uint8(12), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(uint8(12), result, "msg")
				s.Assert().NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(uint16(13), result)
				s.Assert().Equal(uint16(13), result, "msg")
				s.Assert().Equal(uint16(13), result, "msg with arg %d", 42)
				s.Assert().Equalf(uint16(13), result, "msg")
				s.Assert().Equalf(uint16(13), result, "msg with arg %d", 42)

				s.Assert().NotEqual(uint16(13), result)
				s.Assert().NotEqual(uint16(13), result, "msg")
				s.Assert().NotEqual(uint16(13), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(uint16(13), result, "msg")
				s.Assert().NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(uint32(14), result)
				s.Assert().Equal(uint32(14), result, "msg")
				s.Assert().Equal(uint32(14), result, "msg with arg %d", 42)
				s.Assert().Equalf(uint32(14), result, "msg")
				s.Assert().Equalf(uint32(14), result, "msg with arg %d", 42)

				s.Assert().NotEqual(uint32(14), result)
				s.Assert().NotEqual(uint32(14), result, "msg")
				s.Assert().NotEqual(uint32(14), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(uint32(14), result, "msg")
				s.Assert().NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(uint64(15), result)
				s.Assert().Equal(uint64(15), result, "msg")
				s.Assert().Equal(uint64(15), result, "msg with arg %d", 42)
				s.Assert().Equalf(uint64(15), result, "msg")
				s.Assert().Equalf(uint64(15), result, "msg with arg %d", 42)

				s.Assert().NotEqual(uint64(15), result)
				s.Assert().NotEqual(uint64(15), result, "msg")
				s.Assert().NotEqual(uint64(15), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(uint64(15), result, "msg")
				s.Assert().NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(21, result)
				s.Assert().Equal(21, result, "msg")
				s.Assert().Equal(21, result, "msg with arg %d", 42)
				s.Assert().Equalf(21, result, "msg")
				s.Assert().Equalf(21, result, "msg with arg %d", 42)

				s.Assert().NotEqual(21, result)
				s.Assert().NotEqual(21, result, "msg")
				s.Assert().NotEqual(21, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(21, result, "msg")
				s.Assert().NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(int8(22), result)
				s.Assert().Equal(int8(22), result, "msg")
				s.Assert().Equal(int8(22), result, "msg with arg %d", 42)
				s.Assert().Equalf(int8(22), result, "msg")
				s.Assert().Equalf(int8(22), result, "msg with arg %d", 42)

				s.Assert().NotEqual(int8(22), result)
				s.Assert().NotEqual(int8(22), result, "msg")
				s.Assert().NotEqual(int8(22), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(int8(22), result, "msg")
				s.Assert().NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(int16(23), result)
				s.Assert().Equal(int16(23), result, "msg")
				s.Assert().Equal(int16(23), result, "msg with arg %d", 42)
				s.Assert().Equalf(int16(23), result, "msg")
				s.Assert().Equalf(int16(23), result, "msg with arg %d", 42)

				s.Assert().NotEqual(int16(23), result)
				s.Assert().NotEqual(int16(23), result, "msg")
				s.Assert().NotEqual(int16(23), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(int16(23), result, "msg")
				s.Assert().NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(int32(24), result)
				s.Assert().Equal(int32(24), result, "msg")
				s.Assert().Equal(int32(24), result, "msg with arg %d", 42)
				s.Assert().Equalf(int32(24), result, "msg")
				s.Assert().Equalf(int32(24), result, "msg with arg %d", 42)

				s.Assert().NotEqual(int32(24), result)
				s.Assert().NotEqual(int32(24), result, "msg")
				s.Assert().NotEqual(int32(24), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(int32(24), result, "msg")
				s.Assert().NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(int64(25), result)
				s.Assert().Equal(int64(25), result, "msg")
				s.Assert().Equal(int64(25), result, "msg with arg %d", 42)
				s.Assert().Equalf(int64(25), result, "msg")
				s.Assert().Equalf(int64(25), result, "msg with arg %d", 42)

				s.Assert().NotEqual(int64(25), result)
				s.Assert().NotEqual(int64(25), result, "msg")
				s.Assert().NotEqual(int64(25), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(int64(25), result, "msg")
				s.Assert().NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(float32(31.), result)
				s.Assert().Equal(float32(31.), result, "msg")
				s.Assert().Equal(float32(31.), result, "msg with arg %d", 42)
				s.Assert().Equalf(float32(31.), result, "msg")
				s.Assert().Equalf(float32(31.), result, "msg with arg %d", 42)

				s.Assert().NotEqual(float32(31.), result)
				s.Assert().NotEqual(float32(31.), result, "msg")
				s.Assert().NotEqual(float32(31.), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(float32(31.), result, "msg")
				s.Assert().NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(float64(32.), result)
				s.Assert().Equal(float64(32.), result, "msg")
				s.Assert().Equal(float64(32.), result, "msg with arg %d", 42)
				s.Assert().Equalf(float64(32.), result, "msg")
				s.Assert().Equalf(float64(32.), result, "msg with arg %d", 42)

				s.Assert().NotEqual(float64(32.), result)
				s.Assert().NotEqual(float64(32.), result, "msg")
				s.Assert().NotEqual(float64(32.), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(float64(32.), result, "msg")
				s.Assert().NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(complex64(41-0.707i), result)
				s.Assert().Equal(complex64(41-0.707i), result, "msg")
				s.Assert().Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.Assert().Equalf(complex64(41-0.707i), result, "msg")
				s.Assert().Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				s.Assert().NotEqual(complex64(41-0.707i), result)
				s.Assert().NotEqual(complex64(41-0.707i), result, "msg")
				s.Assert().NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(complex64(41-0.707i), result, "msg")
				s.Assert().NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(complex128(42-0.707i), result)
				s.Assert().Equal(complex128(42-0.707i), result, "msg")
				s.Assert().Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.Assert().Equalf(complex128(42-0.707i), result, "msg")
				s.Assert().Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				s.Assert().NotEqual(complex128(42-0.707i), result)
				s.Assert().NotEqual(complex128(42-0.707i), result, "msg")
				s.Assert().NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.Assert().NotEqualf(complex128(42-0.707i), result, "msg")
				s.Assert().NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal("string", result)
				s.Assert().Equal("string", result, "msg")
				s.Assert().Equal("string", result, "msg with arg %d", 42)
				s.Assert().Equalf("string", result, "msg")
				s.Assert().Equalf("string", result, "msg with arg %d", 42)

				s.Assert().NotEqual("string", result)
				s.Assert().NotEqual("string", result, "msg")
				s.Assert().NotEqual("string", result, "msg with arg %d", 42)
				s.Assert().NotEqualf("string", result, "msg")
				s.Assert().NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal('r', result)
				s.Assert().Equal('r', result, "msg")
				s.Assert().Equal('r', result, "msg with arg %d", 42)
				s.Assert().Equalf('r', result, "msg")
				s.Assert().Equalf('r', result, "msg with arg %d", 42)

				s.Assert().NotEqual('r', result)
				s.Assert().NotEqual('r', result, "msg")
				s.Assert().NotEqual('r', result, "msg with arg %d", 42)
				s.Assert().NotEqualf('r', result, "msg")
				s.Assert().NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(a, result)
				s.Assert().Equal(a, result, "msg")
				s.Assert().Equal(a, result, "msg with arg %d", 42)
				s.Assert().Equalf(a, result, "msg")
				s.Assert().Equalf(a, result, "msg with arg %d", 42)

				s.Assert().NotEqual(a, result)
				s.Assert().NotEqual(a, result, "msg")
				s.Assert().NotEqual(a, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(a, result, "msg")
				s.Assert().NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(b, result)
				s.Assert().Equal(b, result, "msg")
				s.Assert().Equal(b, result, "msg with arg %d", 42)
				s.Assert().Equalf(b, result, "msg")
				s.Assert().Equalf(b, result, "msg with arg %d", 42)

				s.Assert().NotEqual(b, result)
				s.Assert().NotEqual(b, result, "msg")
				s.Assert().NotEqual(b, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(b, result, "msg")
				s.Assert().NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(c, result)
				s.Assert().Equal(c, result, "msg")
				s.Assert().Equal(c, result, "msg with arg %d", 42)
				s.Assert().Equalf(c, result, "msg")
				s.Assert().Equalf(c, result, "msg with arg %d", 42)

				s.Assert().NotEqual(c, result)
				s.Assert().NotEqual(c, result, "msg")
				s.Assert().NotEqual(c, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(c, result, "msg")
				s.Assert().NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(d, result)
				s.Assert().Equal(d, result, "msg")
				s.Assert().Equal(d, result, "msg with arg %d", 42)
				s.Assert().Equalf(d, result, "msg")
				s.Assert().Equalf(d, result, "msg with arg %d", 42)

				s.Assert().NotEqual(d, result)
				s.Assert().NotEqual(d, result, "msg")
				s.Assert().NotEqual(d, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(d, result, "msg")
				s.Assert().NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(e, result)
				s.Assert().Equal(e, result, "msg")
				s.Assert().Equal(e, result, "msg with arg %d", 42)
				s.Assert().Equalf(e, result, "msg")
				s.Assert().Equalf(e, result, "msg with arg %d", 42)

				s.Assert().NotEqual(e, result)
				s.Assert().NotEqual(e, result, "msg")
				s.Assert().NotEqual(e, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(e, result, "msg")
				s.Assert().NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(f, result)
				s.Assert().Equal(f, result, "msg")
				s.Assert().Equal(f, result, "msg with arg %d", 42)
				s.Assert().Equalf(f, result, "msg")
				s.Assert().Equalf(f, result, "msg with arg %d", 42)

				s.Assert().NotEqual(f, result)
				s.Assert().NotEqual(f, result, "msg")
				s.Assert().NotEqual(f, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(f, result, "msg")
				s.Assert().NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(g, result)
				s.Assert().Equal(g, result, "msg")
				s.Assert().Equal(g, result, "msg with arg %d", 42)
				s.Assert().Equalf(g, result, "msg")
				s.Assert().Equalf(g, result, "msg with arg %d", 42)

				s.Assert().NotEqual(g, result)
				s.Assert().NotEqual(g, result, "msg")
				s.Assert().NotEqual(g, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(g, result, "msg")
				s.Assert().NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(h, result)
				s.Assert().Equal(h, result, "msg")
				s.Assert().Equal(h, result, "msg with arg %d", 42)
				s.Assert().Equalf(h, result, "msg")
				s.Assert().Equalf(h, result, "msg with arg %d", 42)

				s.Assert().NotEqual(h, result)
				s.Assert().NotEqual(h, result, "msg")
				s.Assert().NotEqual(h, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(h, result, "msg")
				s.Assert().NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(i, result)
				s.Assert().Equal(i, result, "msg")
				s.Assert().Equal(i, result, "msg with arg %d", 42)
				s.Assert().Equalf(i, result, "msg")
				s.Assert().Equalf(i, result, "msg with arg %d", 42)

				s.Assert().NotEqual(i, result)
				s.Assert().NotEqual(i, result, "msg")
				s.Assert().NotEqual(i, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(i, result, "msg")
				s.Assert().NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(j, result)
				s.Assert().Equal(j, result, "msg")
				s.Assert().Equal(j, result, "msg with arg %d", 42)
				s.Assert().Equalf(j, result, "msg")
				s.Assert().Equalf(j, result, "msg with arg %d", 42)

				s.Assert().NotEqual(j, result)
				s.Assert().NotEqual(j, result, "msg")
				s.Assert().NotEqual(j, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(j, result, "msg")
				s.Assert().NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(k, result)
				s.Assert().Equal(k, result, "msg")
				s.Assert().Equal(k, result, "msg with arg %d", 42)
				s.Assert().Equalf(k, result, "msg")
				s.Assert().Equalf(k, result, "msg with arg %d", 42)

				s.Assert().NotEqual(k, result)
				s.Assert().NotEqual(k, result, "msg")
				s.Assert().NotEqual(k, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(k, result, "msg")
				s.Assert().NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(l, result)
				s.Assert().Equal(l, result, "msg")
				s.Assert().Equal(l, result, "msg with arg %d", 42)
				s.Assert().Equalf(l, result, "msg")
				s.Assert().Equalf(l, result, "msg with arg %d", 42)

				s.Assert().NotEqual(l, result)
				s.Assert().NotEqual(l, result, "msg")
				s.Assert().NotEqual(l, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(l, result, "msg")
				s.Assert().NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(m, result)
				s.Assert().Equal(m, result, "msg")
				s.Assert().Equal(m, result, "msg with arg %d", 42)
				s.Assert().Equalf(m, result, "msg")
				s.Assert().Equalf(m, result, "msg with arg %d", 42)

				s.Assert().NotEqual(m, result)
				s.Assert().NotEqual(m, result, "msg")
				s.Assert().NotEqual(m, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(m, result, "msg")
				s.Assert().NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(n, result)
				s.Assert().Equal(n, result, "msg")
				s.Assert().Equal(n, result, "msg with arg %d", 42)
				s.Assert().Equalf(n, result, "msg")
				s.Assert().Equalf(n, result, "msg with arg %d", 42)

				s.Assert().NotEqual(n, result)
				s.Assert().NotEqual(n, result, "msg")
				s.Assert().NotEqual(n, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(n, result, "msg")
				s.Assert().NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(o, result)
				s.Assert().Equal(o, result, "msg")
				s.Assert().Equal(o, result, "msg with arg %d", 42)
				s.Assert().Equalf(o, result, "msg")
				s.Assert().Equalf(o, result, "msg with arg %d", 42)

				s.Assert().NotEqual(o, result)
				s.Assert().NotEqual(o, result, "msg")
				s.Assert().NotEqual(o, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(o, result, "msg")
				s.Assert().NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(p, result)
				s.Assert().Equal(p, result, "msg")
				s.Assert().Equal(p, result, "msg with arg %d", 42)
				s.Assert().Equalf(p, result, "msg")
				s.Assert().Equalf(p, result, "msg with arg %d", 42)

				s.Assert().NotEqual(p, result)
				s.Assert().NotEqual(p, result, "msg")
				s.Assert().NotEqual(p, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(p, result, "msg")
				s.Assert().NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(aa, result)
				s.Assert().Equal(aa, result, "msg")
				s.Assert().Equal(aa, result, "msg with arg %d", 42)
				s.Assert().Equalf(aa, result, "msg")
				s.Assert().Equalf(aa, result, "msg with arg %d", 42)

				s.Assert().NotEqual(aa, result)
				s.Assert().NotEqual(aa, result, "msg")
				s.Assert().NotEqual(aa, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(aa, result, "msg")
				s.Assert().NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(bb, result)
				s.Assert().Equal(bb, result, "msg")
				s.Assert().Equal(bb, result, "msg with arg %d", 42)
				s.Assert().Equalf(bb, result, "msg")
				s.Assert().Equalf(bb, result, "msg with arg %d", 42)

				s.Assert().NotEqual(bb, result)
				s.Assert().NotEqual(bb, result, "msg")
				s.Assert().NotEqual(bb, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(bb, result, "msg")
				s.Assert().NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(cc, result)
				s.Assert().Equal(cc, result, "msg")
				s.Assert().Equal(cc, result, "msg with arg %d", 42)
				s.Assert().Equalf(cc, result, "msg")
				s.Assert().Equalf(cc, result, "msg with arg %d", 42)

				s.Assert().NotEqual(cc, result)
				s.Assert().NotEqual(cc, result, "msg")
				s.Assert().NotEqual(cc, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(cc, result, "msg")
				s.Assert().NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(dd, result)
				s.Assert().Equal(dd, result, "msg")
				s.Assert().Equal(dd, result, "msg with arg %d", 42)
				s.Assert().Equalf(dd, result, "msg")
				s.Assert().Equalf(dd, result, "msg with arg %d", 42)

				s.Assert().NotEqual(dd, result)
				s.Assert().NotEqual(dd, result, "msg")
				s.Assert().NotEqual(dd, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(dd, result, "msg")
				s.Assert().NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(ee, result)
				s.Assert().Equal(ee, result, "msg")
				s.Assert().Equal(ee, result, "msg with arg %d", 42)
				s.Assert().Equalf(ee, result, "msg")
				s.Assert().Equalf(ee, result, "msg with arg %d", 42)

				s.Assert().NotEqual(ee, result)
				s.Assert().NotEqual(ee, result, "msg")
				s.Assert().NotEqual(ee, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(ee, result, "msg")
				s.Assert().NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(ff, result)
				s.Assert().Equal(ff, result, "msg")
				s.Assert().Equal(ff, result, "msg with arg %d", 42)
				s.Assert().Equalf(ff, result, "msg")
				s.Assert().Equalf(ff, result, "msg with arg %d", 42)

				s.Assert().NotEqual(ff, result)
				s.Assert().NotEqual(ff, result, "msg")
				s.Assert().NotEqual(ff, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(ff, result, "msg")
				s.Assert().NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(gg, result)
				s.Assert().Equal(gg, result, "msg")
				s.Assert().Equal(gg, result, "msg with arg %d", 42)
				s.Assert().Equalf(gg, result, "msg")
				s.Assert().Equalf(gg, result, "msg with arg %d", 42)

				s.Assert().NotEqual(gg, result)
				s.Assert().NotEqual(gg, result, "msg")
				s.Assert().NotEqual(gg, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(gg, result, "msg")
				s.Assert().NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(hh, result)
				s.Assert().Equal(hh, result, "msg")
				s.Assert().Equal(hh, result, "msg with arg %d", 42)
				s.Assert().Equalf(hh, result, "msg")
				s.Assert().Equalf(hh, result, "msg with arg %d", 42)

				s.Assert().NotEqual(hh, result)
				s.Assert().NotEqual(hh, result, "msg")
				s.Assert().NotEqual(hh, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(hh, result, "msg")
				s.Assert().NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(ii, result)
				s.Assert().Equal(ii, result, "msg")
				s.Assert().Equal(ii, result, "msg with arg %d", 42)
				s.Assert().Equalf(ii, result, "msg")
				s.Assert().Equalf(ii, result, "msg with arg %d", 42)

				s.Assert().NotEqual(ii, result)
				s.Assert().NotEqual(ii, result, "msg")
				s.Assert().NotEqual(ii, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(ii, result, "msg")
				s.Assert().NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(jj, result)
				s.Assert().Equal(jj, result, "msg")
				s.Assert().Equal(jj, result, "msg with arg %d", 42)
				s.Assert().Equalf(jj, result, "msg")
				s.Assert().Equalf(jj, result, "msg with arg %d", 42)

				s.Assert().NotEqual(jj, result)
				s.Assert().NotEqual(jj, result, "msg")
				s.Assert().NotEqual(jj, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(jj, result, "msg")
				s.Assert().NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(kk, result)
				s.Assert().Equal(kk, result, "msg")
				s.Assert().Equal(kk, result, "msg with arg %d", 42)
				s.Assert().Equalf(kk, result, "msg")
				s.Assert().Equalf(kk, result, "msg with arg %d", 42)

				s.Assert().NotEqual(kk, result)
				s.Assert().NotEqual(kk, result, "msg")
				s.Assert().NotEqual(kk, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(kk, result, "msg")
				s.Assert().NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(ll, result)
				s.Assert().Equal(ll, result, "msg")
				s.Assert().Equal(ll, result, "msg with arg %d", 42)
				s.Assert().Equalf(ll, result, "msg")
				s.Assert().Equalf(ll, result, "msg with arg %d", 42)

				s.Assert().NotEqual(ll, result)
				s.Assert().NotEqual(ll, result, "msg")
				s.Assert().NotEqual(ll, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(ll, result, "msg")
				s.Assert().NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(mm, result)
				s.Assert().Equal(mm, result, "msg")
				s.Assert().Equal(mm, result, "msg with arg %d", 42)
				s.Assert().Equalf(mm, result, "msg")
				s.Assert().Equalf(mm, result, "msg with arg %d", 42)

				s.Assert().NotEqual(mm, result)
				s.Assert().NotEqual(mm, result, "msg")
				s.Assert().NotEqual(mm, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(mm, result, "msg")
				s.Assert().NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(nn, result)
				s.Assert().Equal(nn, result, "msg")
				s.Assert().Equal(nn, result, "msg with arg %d", 42)
				s.Assert().Equalf(nn, result, "msg")
				s.Assert().Equalf(nn, result, "msg with arg %d", 42)

				s.Assert().NotEqual(nn, result)
				s.Assert().NotEqual(nn, result, "msg")
				s.Assert().NotEqual(nn, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(nn, result, "msg")
				s.Assert().NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(oo, result)
				s.Assert().Equal(oo, result, "msg")
				s.Assert().Equal(oo, result, "msg with arg %d", 42)
				s.Assert().Equalf(oo, result, "msg")
				s.Assert().Equalf(oo, result, "msg with arg %d", 42)

				s.Assert().NotEqual(oo, result)
				s.Assert().NotEqual(oo, result, "msg")
				s.Assert().NotEqual(oo, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(oo, result, "msg")
				s.Assert().NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(pp, result)
				s.Assert().Equal(pp, result, "msg")
				s.Assert().Equal(pp, result, "msg with arg %d", 42)
				s.Assert().Equalf(pp, result, "msg")
				s.Assert().Equalf(pp, result, "msg with arg %d", 42)

				s.Assert().NotEqual(pp, result)
				s.Assert().NotEqual(pp, result, "msg")
				s.Assert().NotEqual(pp, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(pp, result, "msg")
				s.Assert().NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(Monday, result)
				s.Assert().Equal(Monday, result, "msg")
				s.Assert().Equal(Monday, result, "msg with arg %d", 42)
				s.Assert().Equalf(Monday, result, "msg")
				s.Assert().Equalf(Monday, result, "msg with arg %d", 42)

				s.Assert().NotEqual(Monday, result)
				s.Assert().NotEqual(Monday, result, "msg")
				s.Assert().NotEqual(Monday, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(Monday, result, "msg")
				s.Assert().NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(DayMonday, result)
				s.Assert().Equal(DayMonday, result, "msg")
				s.Assert().Equal(DayMonday, result, "msg with arg %d", 42)
				s.Assert().Equalf(DayMonday, result, "msg")
				s.Assert().Equalf(DayMonday, result, "msg with arg %d", 42)

				s.Assert().NotEqual(DayMonday, result)
				s.Assert().NotEqual(DayMonday, result, "msg")
				s.Assert().NotEqual(DayMonday, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(DayMonday, result, "msg")
				s.Assert().NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(expected, result)
				s.Assert().Equal(expected, result, "msg")
				s.Assert().Equal(expected, result, "msg with arg %d", 42)
				s.Assert().Equalf(expected, result, "msg")
				s.Assert().Equalf(expected, result, "msg with arg %d", 42)

				s.Assert().NotEqual(expected, result)
				s.Assert().NotEqual(expected, result, "msg")
				s.Assert().NotEqual(expected, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(expected, result, "msg")
				s.Assert().NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(tt.expected, result)
				s.Assert().Equal(tt.expected, result, "msg")
				s.Assert().Equal(tt.expected, result, "msg with arg %d", 42)
				s.Assert().Equalf(tt.expected, result, "msg")
				s.Assert().Equalf(tt.expected, result, "msg with arg %d", 42)

				s.Assert().NotEqual(tt.expected, result)
				s.Assert().NotEqual(tt.expected, result, "msg")
				s.Assert().NotEqual(tt.expected, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(tt.expected, result, "msg")
				s.Assert().NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.Assert().Equal(ttp.expected, result)
				s.Assert().Equal(ttp.expected, result, "msg")
				s.Assert().Equal(ttp.expected, result, "msg with arg %d", 42)
				s.Assert().Equalf(ttp.expected, result, "msg")
				s.Assert().Equalf(ttp.expected, result, "msg with arg %d", 42)

				s.Assert().NotEqual(ttp.expected, result)
				s.Assert().NotEqual(ttp.expected, result, "msg")
				s.Assert().NotEqual(ttp.expected, result, "msg with arg %d", 42)
				s.Assert().NotEqualf(ttp.expected, result, "msg")
				s.Assert().NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				assObj.Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assObj.Equal(uint(11), result)
				assObj.Equal(uint(11), result, "msg")
				assObj.Equal(uint(11), result, "msg with arg %d", 42)
				assObj.Equalf(uint(11), result, "msg")
				assObj.Equalf(uint(11), result, "msg with arg %d", 42)

				assObj.NotEqual(uint(11), result)
				assObj.NotEqual(uint(11), result, "msg")
				assObj.NotEqual(uint(11), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint(11), result, "msg")
				assObj.NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint8(12), result)
				assObj.Equal(uint8(12), result, "msg")
				assObj.Equal(uint8(12), result, "msg with arg %d", 42)
				assObj.Equalf(uint8(12), result, "msg")
				assObj.Equalf(uint8(12), result, "msg with arg %d", 42)

				assObj.NotEqual(uint8(12), result)
				assObj.NotEqual(uint8(12), result, "msg")
				assObj.NotEqual(uint8(12), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint8(12), result, "msg")
				assObj.NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint16(13), result)
				assObj.Equal(uint16(13), result, "msg")
				assObj.Equal(uint16(13), result, "msg with arg %d", 42)
				assObj.Equalf(uint16(13), result, "msg")
				assObj.Equalf(uint16(13), result, "msg with arg %d", 42)

				assObj.NotEqual(uint16(13), result)
				assObj.NotEqual(uint16(13), result, "msg")
				assObj.NotEqual(uint16(13), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint16(13), result, "msg")
				assObj.NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint32(14), result)
				assObj.Equal(uint32(14), result, "msg")
				assObj.Equal(uint32(14), result, "msg with arg %d", 42)
				assObj.Equalf(uint32(14), result, "msg")
				assObj.Equalf(uint32(14), result, "msg with arg %d", 42)

				assObj.NotEqual(uint32(14), result)
				assObj.NotEqual(uint32(14), result, "msg")
				assObj.NotEqual(uint32(14), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint32(14), result, "msg")
				assObj.NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(uint64(15), result)
				assObj.Equal(uint64(15), result, "msg")
				assObj.Equal(uint64(15), result, "msg with arg %d", 42)
				assObj.Equalf(uint64(15), result, "msg")
				assObj.Equalf(uint64(15), result, "msg with arg %d", 42)

				assObj.NotEqual(uint64(15), result)
				assObj.NotEqual(uint64(15), result, "msg")
				assObj.NotEqual(uint64(15), result, "msg with arg %d", 42)
				assObj.NotEqualf(uint64(15), result, "msg")
				assObj.NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(21, result)
				assObj.Equal(21, result, "msg")
				assObj.Equal(21, result, "msg with arg %d", 42)
				assObj.Equalf(21, result, "msg")
				assObj.Equalf(21, result, "msg with arg %d", 42)

				assObj.NotEqual(21, result)
				assObj.NotEqual(21, result, "msg")
				assObj.NotEqual(21, result, "msg with arg %d", 42)
				assObj.NotEqualf(21, result, "msg")
				assObj.NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int8(22), result)
				assObj.Equal(int8(22), result, "msg")
				assObj.Equal(int8(22), result, "msg with arg %d", 42)
				assObj.Equalf(int8(22), result, "msg")
				assObj.Equalf(int8(22), result, "msg with arg %d", 42)

				assObj.NotEqual(int8(22), result)
				assObj.NotEqual(int8(22), result, "msg")
				assObj.NotEqual(int8(22), result, "msg with arg %d", 42)
				assObj.NotEqualf(int8(22), result, "msg")
				assObj.NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int16(23), result)
				assObj.Equal(int16(23), result, "msg")
				assObj.Equal(int16(23), result, "msg with arg %d", 42)
				assObj.Equalf(int16(23), result, "msg")
				assObj.Equalf(int16(23), result, "msg with arg %d", 42)

				assObj.NotEqual(int16(23), result)
				assObj.NotEqual(int16(23), result, "msg")
				assObj.NotEqual(int16(23), result, "msg with arg %d", 42)
				assObj.NotEqualf(int16(23), result, "msg")
				assObj.NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int32(24), result)
				assObj.Equal(int32(24), result, "msg")
				assObj.Equal(int32(24), result, "msg with arg %d", 42)
				assObj.Equalf(int32(24), result, "msg")
				assObj.Equalf(int32(24), result, "msg with arg %d", 42)

				assObj.NotEqual(int32(24), result)
				assObj.NotEqual(int32(24), result, "msg")
				assObj.NotEqual(int32(24), result, "msg with arg %d", 42)
				assObj.NotEqualf(int32(24), result, "msg")
				assObj.NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(int64(25), result)
				assObj.Equal(int64(25), result, "msg")
				assObj.Equal(int64(25), result, "msg with arg %d", 42)
				assObj.Equalf(int64(25), result, "msg")
				assObj.Equalf(int64(25), result, "msg with arg %d", 42)

				assObj.NotEqual(int64(25), result)
				assObj.NotEqual(int64(25), result, "msg")
				assObj.NotEqual(int64(25), result, "msg with arg %d", 42)
				assObj.NotEqualf(int64(25), result, "msg")
				assObj.NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(float32(31.), result)
				assObj.Equal(float32(31.), result, "msg")
				assObj.Equal(float32(31.), result, "msg with arg %d", 42)
				assObj.Equalf(float32(31.), result, "msg")
				assObj.Equalf(float32(31.), result, "msg with arg %d", 42)

				assObj.NotEqual(float32(31.), result)
				assObj.NotEqual(float32(31.), result, "msg")
				assObj.NotEqual(float32(31.), result, "msg with arg %d", 42)
				assObj.NotEqualf(float32(31.), result, "msg")
				assObj.NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(float64(32.), result)
				assObj.Equal(float64(32.), result, "msg")
				assObj.Equal(float64(32.), result, "msg with arg %d", 42)
				assObj.Equalf(float64(32.), result, "msg")
				assObj.Equalf(float64(32.), result, "msg with arg %d", 42)

				assObj.NotEqual(float64(32.), result)
				assObj.NotEqual(float64(32.), result, "msg")
				assObj.NotEqual(float64(32.), result, "msg with arg %d", 42)
				assObj.NotEqualf(float64(32.), result, "msg")
				assObj.NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(complex64(41-0.707i), result)
				assObj.Equal(complex64(41-0.707i), result, "msg")
				assObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				assObj.Equalf(complex64(41-0.707i), result, "msg")
				assObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				assObj.NotEqual(complex64(41-0.707i), result)
				assObj.NotEqual(complex64(41-0.707i), result, "msg")
				assObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				assObj.NotEqualf(complex64(41-0.707i), result, "msg")
				assObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(complex128(42-0.707i), result)
				assObj.Equal(complex128(42-0.707i), result, "msg")
				assObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				assObj.Equalf(complex128(42-0.707i), result, "msg")
				assObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				assObj.NotEqual(complex128(42-0.707i), result)
				assObj.NotEqual(complex128(42-0.707i), result, "msg")
				assObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				assObj.NotEqualf(complex128(42-0.707i), result, "msg")
				assObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				assObj.Equal("string", result)
				assObj.Equal("string", result, "msg")
				assObj.Equal("string", result, "msg with arg %d", 42)
				assObj.Equalf("string", result, "msg")
				assObj.Equalf("string", result, "msg with arg %d", 42)

				assObj.NotEqual("string", result)
				assObj.NotEqual("string", result, "msg")
				assObj.NotEqual("string", result, "msg with arg %d", 42)
				assObj.NotEqualf("string", result, "msg")
				assObj.NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				assObj.Equal('r', result)
				assObj.Equal('r', result, "msg")
				assObj.Equal('r', result, "msg with arg %d", 42)
				assObj.Equalf('r', result, "msg")
				assObj.Equalf('r', result, "msg with arg %d", 42)

				assObj.NotEqual('r', result)
				assObj.NotEqual('r', result, "msg")
				assObj.NotEqual('r', result, "msg with arg %d", 42)
				assObj.NotEqualf('r', result, "msg")
				assObj.NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(a, result)
				assObj.Equal(a, result, "msg")
				assObj.Equal(a, result, "msg with arg %d", 42)
				assObj.Equalf(a, result, "msg")
				assObj.Equalf(a, result, "msg with arg %d", 42)

				assObj.NotEqual(a, result)
				assObj.NotEqual(a, result, "msg")
				assObj.NotEqual(a, result, "msg with arg %d", 42)
				assObj.NotEqualf(a, result, "msg")
				assObj.NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(b, result)
				assObj.Equal(b, result, "msg")
				assObj.Equal(b, result, "msg with arg %d", 42)
				assObj.Equalf(b, result, "msg")
				assObj.Equalf(b, result, "msg with arg %d", 42)

				assObj.NotEqual(b, result)
				assObj.NotEqual(b, result, "msg")
				assObj.NotEqual(b, result, "msg with arg %d", 42)
				assObj.NotEqualf(b, result, "msg")
				assObj.NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(c, result)
				assObj.Equal(c, result, "msg")
				assObj.Equal(c, result, "msg with arg %d", 42)
				assObj.Equalf(c, result, "msg")
				assObj.Equalf(c, result, "msg with arg %d", 42)

				assObj.NotEqual(c, result)
				assObj.NotEqual(c, result, "msg")
				assObj.NotEqual(c, result, "msg with arg %d", 42)
				assObj.NotEqualf(c, result, "msg")
				assObj.NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(d, result)
				assObj.Equal(d, result, "msg")
				assObj.Equal(d, result, "msg with arg %d", 42)
				assObj.Equalf(d, result, "msg")
				assObj.Equalf(d, result, "msg with arg %d", 42)

				assObj.NotEqual(d, result)
				assObj.NotEqual(d, result, "msg")
				assObj.NotEqual(d, result, "msg with arg %d", 42)
				assObj.NotEqualf(d, result, "msg")
				assObj.NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(e, result)
				assObj.Equal(e, result, "msg")
				assObj.Equal(e, result, "msg with arg %d", 42)
				assObj.Equalf(e, result, "msg")
				assObj.Equalf(e, result, "msg with arg %d", 42)

				assObj.NotEqual(e, result)
				assObj.NotEqual(e, result, "msg")
				assObj.NotEqual(e, result, "msg with arg %d", 42)
				assObj.NotEqualf(e, result, "msg")
				assObj.NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(f, result)
				assObj.Equal(f, result, "msg")
				assObj.Equal(f, result, "msg with arg %d", 42)
				assObj.Equalf(f, result, "msg")
				assObj.Equalf(f, result, "msg with arg %d", 42)

				assObj.NotEqual(f, result)
				assObj.NotEqual(f, result, "msg")
				assObj.NotEqual(f, result, "msg with arg %d", 42)
				assObj.NotEqualf(f, result, "msg")
				assObj.NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(g, result)
				assObj.Equal(g, result, "msg")
				assObj.Equal(g, result, "msg with arg %d", 42)
				assObj.Equalf(g, result, "msg")
				assObj.Equalf(g, result, "msg with arg %d", 42)

				assObj.NotEqual(g, result)
				assObj.NotEqual(g, result, "msg")
				assObj.NotEqual(g, result, "msg with arg %d", 42)
				assObj.NotEqualf(g, result, "msg")
				assObj.NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(h, result)
				assObj.Equal(h, result, "msg")
				assObj.Equal(h, result, "msg with arg %d", 42)
				assObj.Equalf(h, result, "msg")
				assObj.Equalf(h, result, "msg with arg %d", 42)

				assObj.NotEqual(h, result)
				assObj.NotEqual(h, result, "msg")
				assObj.NotEqual(h, result, "msg with arg %d", 42)
				assObj.NotEqualf(h, result, "msg")
				assObj.NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(i, result)
				assObj.Equal(i, result, "msg")
				assObj.Equal(i, result, "msg with arg %d", 42)
				assObj.Equalf(i, result, "msg")
				assObj.Equalf(i, result, "msg with arg %d", 42)

				assObj.NotEqual(i, result)
				assObj.NotEqual(i, result, "msg")
				assObj.NotEqual(i, result, "msg with arg %d", 42)
				assObj.NotEqualf(i, result, "msg")
				assObj.NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(j, result)
				assObj.Equal(j, result, "msg")
				assObj.Equal(j, result, "msg with arg %d", 42)
				assObj.Equalf(j, result, "msg")
				assObj.Equalf(j, result, "msg with arg %d", 42)

				assObj.NotEqual(j, result)
				assObj.NotEqual(j, result, "msg")
				assObj.NotEqual(j, result, "msg with arg %d", 42)
				assObj.NotEqualf(j, result, "msg")
				assObj.NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(k, result)
				assObj.Equal(k, result, "msg")
				assObj.Equal(k, result, "msg with arg %d", 42)
				assObj.Equalf(k, result, "msg")
				assObj.Equalf(k, result, "msg with arg %d", 42)

				assObj.NotEqual(k, result)
				assObj.NotEqual(k, result, "msg")
				assObj.NotEqual(k, result, "msg with arg %d", 42)
				assObj.NotEqualf(k, result, "msg")
				assObj.NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(l, result)
				assObj.Equal(l, result, "msg")
				assObj.Equal(l, result, "msg with arg %d", 42)
				assObj.Equalf(l, result, "msg")
				assObj.Equalf(l, result, "msg with arg %d", 42)

				assObj.NotEqual(l, result)
				assObj.NotEqual(l, result, "msg")
				assObj.NotEqual(l, result, "msg with arg %d", 42)
				assObj.NotEqualf(l, result, "msg")
				assObj.NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(m, result)
				assObj.Equal(m, result, "msg")
				assObj.Equal(m, result, "msg with arg %d", 42)
				assObj.Equalf(m, result, "msg")
				assObj.Equalf(m, result, "msg with arg %d", 42)

				assObj.NotEqual(m, result)
				assObj.NotEqual(m, result, "msg")
				assObj.NotEqual(m, result, "msg with arg %d", 42)
				assObj.NotEqualf(m, result, "msg")
				assObj.NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(n, result)
				assObj.Equal(n, result, "msg")
				assObj.Equal(n, result, "msg with arg %d", 42)
				assObj.Equalf(n, result, "msg")
				assObj.Equalf(n, result, "msg with arg %d", 42)

				assObj.NotEqual(n, result)
				assObj.NotEqual(n, result, "msg")
				assObj.NotEqual(n, result, "msg with arg %d", 42)
				assObj.NotEqualf(n, result, "msg")
				assObj.NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(o, result)
				assObj.Equal(o, result, "msg")
				assObj.Equal(o, result, "msg with arg %d", 42)
				assObj.Equalf(o, result, "msg")
				assObj.Equalf(o, result, "msg with arg %d", 42)

				assObj.NotEqual(o, result)
				assObj.NotEqual(o, result, "msg")
				assObj.NotEqual(o, result, "msg with arg %d", 42)
				assObj.NotEqualf(o, result, "msg")
				assObj.NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(p, result)
				assObj.Equal(p, result, "msg")
				assObj.Equal(p, result, "msg with arg %d", 42)
				assObj.Equalf(p, result, "msg")
				assObj.Equalf(p, result, "msg with arg %d", 42)

				assObj.NotEqual(p, result)
				assObj.NotEqual(p, result, "msg")
				assObj.NotEqual(p, result, "msg with arg %d", 42)
				assObj.NotEqualf(p, result, "msg")
				assObj.NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(aa, result)
				assObj.Equal(aa, result, "msg")
				assObj.Equal(aa, result, "msg with arg %d", 42)
				assObj.Equalf(aa, result, "msg")
				assObj.Equalf(aa, result, "msg with arg %d", 42)

				assObj.NotEqual(aa, result)
				assObj.NotEqual(aa, result, "msg")
				assObj.NotEqual(aa, result, "msg with arg %d", 42)
				assObj.NotEqualf(aa, result, "msg")
				assObj.NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(bb, result)
				assObj.Equal(bb, result, "msg")
				assObj.Equal(bb, result, "msg with arg %d", 42)
				assObj.Equalf(bb, result, "msg")
				assObj.Equalf(bb, result, "msg with arg %d", 42)

				assObj.NotEqual(bb, result)
				assObj.NotEqual(bb, result, "msg")
				assObj.NotEqual(bb, result, "msg with arg %d", 42)
				assObj.NotEqualf(bb, result, "msg")
				assObj.NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(cc, result)
				assObj.Equal(cc, result, "msg")
				assObj.Equal(cc, result, "msg with arg %d", 42)
				assObj.Equalf(cc, result, "msg")
				assObj.Equalf(cc, result, "msg with arg %d", 42)

				assObj.NotEqual(cc, result)
				assObj.NotEqual(cc, result, "msg")
				assObj.NotEqual(cc, result, "msg with arg %d", 42)
				assObj.NotEqualf(cc, result, "msg")
				assObj.NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(dd, result)
				assObj.Equal(dd, result, "msg")
				assObj.Equal(dd, result, "msg with arg %d", 42)
				assObj.Equalf(dd, result, "msg")
				assObj.Equalf(dd, result, "msg with arg %d", 42)

				assObj.NotEqual(dd, result)
				assObj.NotEqual(dd, result, "msg")
				assObj.NotEqual(dd, result, "msg with arg %d", 42)
				assObj.NotEqualf(dd, result, "msg")
				assObj.NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ee, result)
				assObj.Equal(ee, result, "msg")
				assObj.Equal(ee, result, "msg with arg %d", 42)
				assObj.Equalf(ee, result, "msg")
				assObj.Equalf(ee, result, "msg with arg %d", 42)

				assObj.NotEqual(ee, result)
				assObj.NotEqual(ee, result, "msg")
				assObj.NotEqual(ee, result, "msg with arg %d", 42)
				assObj.NotEqualf(ee, result, "msg")
				assObj.NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ff, result)
				assObj.Equal(ff, result, "msg")
				assObj.Equal(ff, result, "msg with arg %d", 42)
				assObj.Equalf(ff, result, "msg")
				assObj.Equalf(ff, result, "msg with arg %d", 42)

				assObj.NotEqual(ff, result)
				assObj.NotEqual(ff, result, "msg")
				assObj.NotEqual(ff, result, "msg with arg %d", 42)
				assObj.NotEqualf(ff, result, "msg")
				assObj.NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(gg, result)
				assObj.Equal(gg, result, "msg")
				assObj.Equal(gg, result, "msg with arg %d", 42)
				assObj.Equalf(gg, result, "msg")
				assObj.Equalf(gg, result, "msg with arg %d", 42)

				assObj.NotEqual(gg, result)
				assObj.NotEqual(gg, result, "msg")
				assObj.NotEqual(gg, result, "msg with arg %d", 42)
				assObj.NotEqualf(gg, result, "msg")
				assObj.NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(hh, result)
				assObj.Equal(hh, result, "msg")
				assObj.Equal(hh, result, "msg with arg %d", 42)
				assObj.Equalf(hh, result, "msg")
				assObj.Equalf(hh, result, "msg with arg %d", 42)

				assObj.NotEqual(hh, result)
				assObj.NotEqual(hh, result, "msg")
				assObj.NotEqual(hh, result, "msg with arg %d", 42)
				assObj.NotEqualf(hh, result, "msg")
				assObj.NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ii, result)
				assObj.Equal(ii, result, "msg")
				assObj.Equal(ii, result, "msg with arg %d", 42)
				assObj.Equalf(ii, result, "msg")
				assObj.Equalf(ii, result, "msg with arg %d", 42)

				assObj.NotEqual(ii, result)
				assObj.NotEqual(ii, result, "msg")
				assObj.NotEqual(ii, result, "msg with arg %d", 42)
				assObj.NotEqualf(ii, result, "msg")
				assObj.NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(jj, result)
				assObj.Equal(jj, result, "msg")
				assObj.Equal(jj, result, "msg with arg %d", 42)
				assObj.Equalf(jj, result, "msg")
				assObj.Equalf(jj, result, "msg with arg %d", 42)

				assObj.NotEqual(jj, result)
				assObj.NotEqual(jj, result, "msg")
				assObj.NotEqual(jj, result, "msg with arg %d", 42)
				assObj.NotEqualf(jj, result, "msg")
				assObj.NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(kk, result)
				assObj.Equal(kk, result, "msg")
				assObj.Equal(kk, result, "msg with arg %d", 42)
				assObj.Equalf(kk, result, "msg")
				assObj.Equalf(kk, result, "msg with arg %d", 42)

				assObj.NotEqual(kk, result)
				assObj.NotEqual(kk, result, "msg")
				assObj.NotEqual(kk, result, "msg with arg %d", 42)
				assObj.NotEqualf(kk, result, "msg")
				assObj.NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ll, result)
				assObj.Equal(ll, result, "msg")
				assObj.Equal(ll, result, "msg with arg %d", 42)
				assObj.Equalf(ll, result, "msg")
				assObj.Equalf(ll, result, "msg with arg %d", 42)

				assObj.NotEqual(ll, result)
				assObj.NotEqual(ll, result, "msg")
				assObj.NotEqual(ll, result, "msg with arg %d", 42)
				assObj.NotEqualf(ll, result, "msg")
				assObj.NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(mm, result)
				assObj.Equal(mm, result, "msg")
				assObj.Equal(mm, result, "msg with arg %d", 42)
				assObj.Equalf(mm, result, "msg")
				assObj.Equalf(mm, result, "msg with arg %d", 42)

				assObj.NotEqual(mm, result)
				assObj.NotEqual(mm, result, "msg")
				assObj.NotEqual(mm, result, "msg with arg %d", 42)
				assObj.NotEqualf(mm, result, "msg")
				assObj.NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(nn, result)
				assObj.Equal(nn, result, "msg")
				assObj.Equal(nn, result, "msg with arg %d", 42)
				assObj.Equalf(nn, result, "msg")
				assObj.Equalf(nn, result, "msg with arg %d", 42)

				assObj.NotEqual(nn, result)
				assObj.NotEqual(nn, result, "msg")
				assObj.NotEqual(nn, result, "msg with arg %d", 42)
				assObj.NotEqualf(nn, result, "msg")
				assObj.NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(oo, result)
				assObj.Equal(oo, result, "msg")
				assObj.Equal(oo, result, "msg with arg %d", 42)
				assObj.Equalf(oo, result, "msg")
				assObj.Equalf(oo, result, "msg with arg %d", 42)

				assObj.NotEqual(oo, result)
				assObj.NotEqual(oo, result, "msg")
				assObj.NotEqual(oo, result, "msg with arg %d", 42)
				assObj.NotEqualf(oo, result, "msg")
				assObj.NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(pp, result)
				assObj.Equal(pp, result, "msg")
				assObj.Equal(pp, result, "msg with arg %d", 42)
				assObj.Equalf(pp, result, "msg")
				assObj.Equalf(pp, result, "msg with arg %d", 42)

				assObj.NotEqual(pp, result)
				assObj.NotEqual(pp, result, "msg")
				assObj.NotEqual(pp, result, "msg with arg %d", 42)
				assObj.NotEqualf(pp, result, "msg")
				assObj.NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(Monday, result)
				assObj.Equal(Monday, result, "msg")
				assObj.Equal(Monday, result, "msg with arg %d", 42)
				assObj.Equalf(Monday, result, "msg")
				assObj.Equalf(Monday, result, "msg with arg %d", 42)

				assObj.NotEqual(Monday, result)
				assObj.NotEqual(Monday, result, "msg")
				assObj.NotEqual(Monday, result, "msg with arg %d", 42)
				assObj.NotEqualf(Monday, result, "msg")
				assObj.NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(DayMonday, result)
				assObj.Equal(DayMonday, result, "msg")
				assObj.Equal(DayMonday, result, "msg with arg %d", 42)
				assObj.Equalf(DayMonday, result, "msg")
				assObj.Equalf(DayMonday, result, "msg with arg %d", 42)

				assObj.NotEqual(DayMonday, result)
				assObj.NotEqual(DayMonday, result, "msg")
				assObj.NotEqual(DayMonday, result, "msg with arg %d", 42)
				assObj.NotEqualf(DayMonday, result, "msg")
				assObj.NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(expected, result)
				assObj.Equal(expected, result, "msg")
				assObj.Equal(expected, result, "msg with arg %d", 42)
				assObj.Equalf(expected, result, "msg")
				assObj.Equalf(expected, result, "msg with arg %d", 42)

				assObj.NotEqual(expected, result)
				assObj.NotEqual(expected, result, "msg")
				assObj.NotEqual(expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(expected, result, "msg")
				assObj.NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(tt.expected, result)
				assObj.Equal(tt.expected, result, "msg")
				assObj.Equal(tt.expected, result, "msg with arg %d", 42)
				assObj.Equalf(tt.expected, result, "msg")
				assObj.Equalf(tt.expected, result, "msg with arg %d", 42)

				assObj.NotEqual(tt.expected, result)
				assObj.NotEqual(tt.expected, result, "msg")
				assObj.NotEqual(tt.expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(tt.expected, result, "msg")
				assObj.NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				assObj.Equal(ttp.expected, result)
				assObj.Equal(ttp.expected, result, "msg")
				assObj.Equal(ttp.expected, result, "msg with arg %d", 42)
				assObj.Equalf(ttp.expected, result, "msg")
				assObj.Equalf(ttp.expected, result, "msg with arg %d", 42)

				assObj.NotEqual(ttp.expected, result)
				assObj.NotEqual(ttp.expected, result, "msg")
				assObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)
				assObj.NotEqualf(ttp.expected, result, "msg")
				assObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				s.Require().Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.Require().Equal(uint(11), result)
				s.Require().Equal(uint(11), result, "msg")
				s.Require().Equal(uint(11), result, "msg with arg %d", 42)
				s.Require().Equalf(uint(11), result, "msg")
				s.Require().Equalf(uint(11), result, "msg with arg %d", 42)

				s.Require().NotEqual(uint(11), result)
				s.Require().NotEqual(uint(11), result, "msg")
				s.Require().NotEqual(uint(11), result, "msg with arg %d", 42)
				s.Require().NotEqualf(uint(11), result, "msg")
				s.Require().NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(uint8(12), result)
				s.Require().Equal(uint8(12), result, "msg")
				s.Require().Equal(uint8(12), result, "msg with arg %d", 42)
				s.Require().Equalf(uint8(12), result, "msg")
				s.Require().Equalf(uint8(12), result, "msg with arg %d", 42)

				s.Require().NotEqual(uint8(12), result)
				s.Require().NotEqual(uint8(12), result, "msg")
				s.Require().NotEqual(uint8(12), result, "msg with arg %d", 42)
				s.Require().NotEqualf(uint8(12), result, "msg")
				s.Require().NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(uint16(13), result)
				s.Require().Equal(uint16(13), result, "msg")
				s.Require().Equal(uint16(13), result, "msg with arg %d", 42)
				s.Require().Equalf(uint16(13), result, "msg")
				s.Require().Equalf(uint16(13), result, "msg with arg %d", 42)

				s.Require().NotEqual(uint16(13), result)
				s.Require().NotEqual(uint16(13), result, "msg")
				s.Require().NotEqual(uint16(13), result, "msg with arg %d", 42)
				s.Require().NotEqualf(uint16(13), result, "msg")
				s.Require().NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(uint32(14), result)
				s.Require().Equal(uint32(14), result, "msg")
				s.Require().Equal(uint32(14), result, "msg with arg %d", 42)
				s.Require().Equalf(uint32(14), result, "msg")
				s.Require().Equalf(uint32(14), result, "msg with arg %d", 42)

				s.Require().NotEqual(uint32(14), result)
				s.Require().NotEqual(uint32(14), result, "msg")
				s.Require().NotEqual(uint32(14), result, "msg with arg %d", 42)
				s.Require().NotEqualf(uint32(14), result, "msg")
				s.Require().NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(uint64(15), result)
				s.Require().Equal(uint64(15), result, "msg")
				s.Require().Equal(uint64(15), result, "msg with arg %d", 42)
				s.Require().Equalf(uint64(15), result, "msg")
				s.Require().Equalf(uint64(15), result, "msg with arg %d", 42)

				s.Require().NotEqual(uint64(15), result)
				s.Require().NotEqual(uint64(15), result, "msg")
				s.Require().NotEqual(uint64(15), result, "msg with arg %d", 42)
				s.Require().NotEqualf(uint64(15), result, "msg")
				s.Require().NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(21, result)
				s.Require().Equal(21, result, "msg")
				s.Require().Equal(21, result, "msg with arg %d", 42)
				s.Require().Equalf(21, result, "msg")
				s.Require().Equalf(21, result, "msg with arg %d", 42)

				s.Require().NotEqual(21, result)
				s.Require().NotEqual(21, result, "msg")
				s.Require().NotEqual(21, result, "msg with arg %d", 42)
				s.Require().NotEqualf(21, result, "msg")
				s.Require().NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(int8(22), result)
				s.Require().Equal(int8(22), result, "msg")
				s.Require().Equal(int8(22), result, "msg with arg %d", 42)
				s.Require().Equalf(int8(22), result, "msg")
				s.Require().Equalf(int8(22), result, "msg with arg %d", 42)

				s.Require().NotEqual(int8(22), result)
				s.Require().NotEqual(int8(22), result, "msg")
				s.Require().NotEqual(int8(22), result, "msg with arg %d", 42)
				s.Require().NotEqualf(int8(22), result, "msg")
				s.Require().NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(int16(23), result)
				s.Require().Equal(int16(23), result, "msg")
				s.Require().Equal(int16(23), result, "msg with arg %d", 42)
				s.Require().Equalf(int16(23), result, "msg")
				s.Require().Equalf(int16(23), result, "msg with arg %d", 42)

				s.Require().NotEqual(int16(23), result)
				s.Require().NotEqual(int16(23), result, "msg")
				s.Require().NotEqual(int16(23), result, "msg with arg %d", 42)
				s.Require().NotEqualf(int16(23), result, "msg")
				s.Require().NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(int32(24), result)
				s.Require().Equal(int32(24), result, "msg")
				s.Require().Equal(int32(24), result, "msg with arg %d", 42)
				s.Require().Equalf(int32(24), result, "msg")
				s.Require().Equalf(int32(24), result, "msg with arg %d", 42)

				s.Require().NotEqual(int32(24), result)
				s.Require().NotEqual(int32(24), result, "msg")
				s.Require().NotEqual(int32(24), result, "msg with arg %d", 42)
				s.Require().NotEqualf(int32(24), result, "msg")
				s.Require().NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(int64(25), result)
				s.Require().Equal(int64(25), result, "msg")
				s.Require().Equal(int64(25), result, "msg with arg %d", 42)
				s.Require().Equalf(int64(25), result, "msg")
				s.Require().Equalf(int64(25), result, "msg with arg %d", 42)

				s.Require().NotEqual(int64(25), result)
				s.Require().NotEqual(int64(25), result, "msg")
				s.Require().NotEqual(int64(25), result, "msg with arg %d", 42)
				s.Require().NotEqualf(int64(25), result, "msg")
				s.Require().NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(float32(31.), result)
				s.Require().Equal(float32(31.), result, "msg")
				s.Require().Equal(float32(31.), result, "msg with arg %d", 42)
				s.Require().Equalf(float32(31.), result, "msg")
				s.Require().Equalf(float32(31.), result, "msg with arg %d", 42)

				s.Require().NotEqual(float32(31.), result)
				s.Require().NotEqual(float32(31.), result, "msg")
				s.Require().NotEqual(float32(31.), result, "msg with arg %d", 42)
				s.Require().NotEqualf(float32(31.), result, "msg")
				s.Require().NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(float64(32.), result)
				s.Require().Equal(float64(32.), result, "msg")
				s.Require().Equal(float64(32.), result, "msg with arg %d", 42)
				s.Require().Equalf(float64(32.), result, "msg")
				s.Require().Equalf(float64(32.), result, "msg with arg %d", 42)

				s.Require().NotEqual(float64(32.), result)
				s.Require().NotEqual(float64(32.), result, "msg")
				s.Require().NotEqual(float64(32.), result, "msg with arg %d", 42)
				s.Require().NotEqualf(float64(32.), result, "msg")
				s.Require().NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(complex64(41-0.707i), result)
				s.Require().Equal(complex64(41-0.707i), result, "msg")
				s.Require().Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.Require().Equalf(complex64(41-0.707i), result, "msg")
				s.Require().Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				s.Require().NotEqual(complex64(41-0.707i), result)
				s.Require().NotEqual(complex64(41-0.707i), result, "msg")
				s.Require().NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				s.Require().NotEqualf(complex64(41-0.707i), result, "msg")
				s.Require().NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(complex128(42-0.707i), result)
				s.Require().Equal(complex128(42-0.707i), result, "msg")
				s.Require().Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.Require().Equalf(complex128(42-0.707i), result, "msg")
				s.Require().Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				s.Require().NotEqual(complex128(42-0.707i), result)
				s.Require().NotEqual(complex128(42-0.707i), result, "msg")
				s.Require().NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				s.Require().NotEqualf(complex128(42-0.707i), result, "msg")
				s.Require().NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal("string", result)
				s.Require().Equal("string", result, "msg")
				s.Require().Equal("string", result, "msg with arg %d", 42)
				s.Require().Equalf("string", result, "msg")
				s.Require().Equalf("string", result, "msg with arg %d", 42)

				s.Require().NotEqual("string", result)
				s.Require().NotEqual("string", result, "msg")
				s.Require().NotEqual("string", result, "msg with arg %d", 42)
				s.Require().NotEqualf("string", result, "msg")
				s.Require().NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal('r', result)
				s.Require().Equal('r', result, "msg")
				s.Require().Equal('r', result, "msg with arg %d", 42)
				s.Require().Equalf('r', result, "msg")
				s.Require().Equalf('r', result, "msg with arg %d", 42)

				s.Require().NotEqual('r', result)
				s.Require().NotEqual('r', result, "msg")
				s.Require().NotEqual('r', result, "msg with arg %d", 42)
				s.Require().NotEqualf('r', result, "msg")
				s.Require().NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(a, result)
				s.Require().Equal(a, result, "msg")
				s.Require().Equal(a, result, "msg with arg %d", 42)
				s.Require().Equalf(a, result, "msg")
				s.Require().Equalf(a, result, "msg with arg %d", 42)

				s.Require().NotEqual(a, result)
				s.Require().NotEqual(a, result, "msg")
				s.Require().NotEqual(a, result, "msg with arg %d", 42)
				s.Require().NotEqualf(a, result, "msg")
				s.Require().NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(b, result)
				s.Require().Equal(b, result, "msg")
				s.Require().Equal(b, result, "msg with arg %d", 42)
				s.Require().Equalf(b, result, "msg")
				s.Require().Equalf(b, result, "msg with arg %d", 42)

				s.Require().NotEqual(b, result)
				s.Require().NotEqual(b, result, "msg")
				s.Require().NotEqual(b, result, "msg with arg %d", 42)
				s.Require().NotEqualf(b, result, "msg")
				s.Require().NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(c, result)
				s.Require().Equal(c, result, "msg")
				s.Require().Equal(c, result, "msg with arg %d", 42)
				s.Require().Equalf(c, result, "msg")
				s.Require().Equalf(c, result, "msg with arg %d", 42)

				s.Require().NotEqual(c, result)
				s.Require().NotEqual(c, result, "msg")
				s.Require().NotEqual(c, result, "msg with arg %d", 42)
				s.Require().NotEqualf(c, result, "msg")
				s.Require().NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(d, result)
				s.Require().Equal(d, result, "msg")
				s.Require().Equal(d, result, "msg with arg %d", 42)
				s.Require().Equalf(d, result, "msg")
				s.Require().Equalf(d, result, "msg with arg %d", 42)

				s.Require().NotEqual(d, result)
				s.Require().NotEqual(d, result, "msg")
				s.Require().NotEqual(d, result, "msg with arg %d", 42)
				s.Require().NotEqualf(d, result, "msg")
				s.Require().NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(e, result)
				s.Require().Equal(e, result, "msg")
				s.Require().Equal(e, result, "msg with arg %d", 42)
				s.Require().Equalf(e, result, "msg")
				s.Require().Equalf(e, result, "msg with arg %d", 42)

				s.Require().NotEqual(e, result)
				s.Require().NotEqual(e, result, "msg")
				s.Require().NotEqual(e, result, "msg with arg %d", 42)
				s.Require().NotEqualf(e, result, "msg")
				s.Require().NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(f, result)
				s.Require().Equal(f, result, "msg")
				s.Require().Equal(f, result, "msg with arg %d", 42)
				s.Require().Equalf(f, result, "msg")
				s.Require().Equalf(f, result, "msg with arg %d", 42)

				s.Require().NotEqual(f, result)
				s.Require().NotEqual(f, result, "msg")
				s.Require().NotEqual(f, result, "msg with arg %d", 42)
				s.Require().NotEqualf(f, result, "msg")
				s.Require().NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(g, result)
				s.Require().Equal(g, result, "msg")
				s.Require().Equal(g, result, "msg with arg %d", 42)
				s.Require().Equalf(g, result, "msg")
				s.Require().Equalf(g, result, "msg with arg %d", 42)

				s.Require().NotEqual(g, result)
				s.Require().NotEqual(g, result, "msg")
				s.Require().NotEqual(g, result, "msg with arg %d", 42)
				s.Require().NotEqualf(g, result, "msg")
				s.Require().NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(h, result)
				s.Require().Equal(h, result, "msg")
				s.Require().Equal(h, result, "msg with arg %d", 42)
				s.Require().Equalf(h, result, "msg")
				s.Require().Equalf(h, result, "msg with arg %d", 42)

				s.Require().NotEqual(h, result)
				s.Require().NotEqual(h, result, "msg")
				s.Require().NotEqual(h, result, "msg with arg %d", 42)
				s.Require().NotEqualf(h, result, "msg")
				s.Require().NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(i, result)
				s.Require().Equal(i, result, "msg")
				s.Require().Equal(i, result, "msg with arg %d", 42)
				s.Require().Equalf(i, result, "msg")
				s.Require().Equalf(i, result, "msg with arg %d", 42)

				s.Require().NotEqual(i, result)
				s.Require().NotEqual(i, result, "msg")
				s.Require().NotEqual(i, result, "msg with arg %d", 42)
				s.Require().NotEqualf(i, result, "msg")
				s.Require().NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(j, result)
				s.Require().Equal(j, result, "msg")
				s.Require().Equal(j, result, "msg with arg %d", 42)
				s.Require().Equalf(j, result, "msg")
				s.Require().Equalf(j, result, "msg with arg %d", 42)

				s.Require().NotEqual(j, result)
				s.Require().NotEqual(j, result, "msg")
				s.Require().NotEqual(j, result, "msg with arg %d", 42)
				s.Require().NotEqualf(j, result, "msg")
				s.Require().NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(k, result)
				s.Require().Equal(k, result, "msg")
				s.Require().Equal(k, result, "msg with arg %d", 42)
				s.Require().Equalf(k, result, "msg")
				s.Require().Equalf(k, result, "msg with arg %d", 42)

				s.Require().NotEqual(k, result)
				s.Require().NotEqual(k, result, "msg")
				s.Require().NotEqual(k, result, "msg with arg %d", 42)
				s.Require().NotEqualf(k, result, "msg")
				s.Require().NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(l, result)
				s.Require().Equal(l, result, "msg")
				s.Require().Equal(l, result, "msg with arg %d", 42)
				s.Require().Equalf(l, result, "msg")
				s.Require().Equalf(l, result, "msg with arg %d", 42)

				s.Require().NotEqual(l, result)
				s.Require().NotEqual(l, result, "msg")
				s.Require().NotEqual(l, result, "msg with arg %d", 42)
				s.Require().NotEqualf(l, result, "msg")
				s.Require().NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(m, result)
				s.Require().Equal(m, result, "msg")
				s.Require().Equal(m, result, "msg with arg %d", 42)
				s.Require().Equalf(m, result, "msg")
				s.Require().Equalf(m, result, "msg with arg %d", 42)

				s.Require().NotEqual(m, result)
				s.Require().NotEqual(m, result, "msg")
				s.Require().NotEqual(m, result, "msg with arg %d", 42)
				s.Require().NotEqualf(m, result, "msg")
				s.Require().NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(n, result)
				s.Require().Equal(n, result, "msg")
				s.Require().Equal(n, result, "msg with arg %d", 42)
				s.Require().Equalf(n, result, "msg")
				s.Require().Equalf(n, result, "msg with arg %d", 42)

				s.Require().NotEqual(n, result)
				s.Require().NotEqual(n, result, "msg")
				s.Require().NotEqual(n, result, "msg with arg %d", 42)
				s.Require().NotEqualf(n, result, "msg")
				s.Require().NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(o, result)
				s.Require().Equal(o, result, "msg")
				s.Require().Equal(o, result, "msg with arg %d", 42)
				s.Require().Equalf(o, result, "msg")
				s.Require().Equalf(o, result, "msg with arg %d", 42)

				s.Require().NotEqual(o, result)
				s.Require().NotEqual(o, result, "msg")
				s.Require().NotEqual(o, result, "msg with arg %d", 42)
				s.Require().NotEqualf(o, result, "msg")
				s.Require().NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(p, result)
				s.Require().Equal(p, result, "msg")
				s.Require().Equal(p, result, "msg with arg %d", 42)
				s.Require().Equalf(p, result, "msg")
				s.Require().Equalf(p, result, "msg with arg %d", 42)

				s.Require().NotEqual(p, result)
				s.Require().NotEqual(p, result, "msg")
				s.Require().NotEqual(p, result, "msg with arg %d", 42)
				s.Require().NotEqualf(p, result, "msg")
				s.Require().NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(aa, result)
				s.Require().Equal(aa, result, "msg")
				s.Require().Equal(aa, result, "msg with arg %d", 42)
				s.Require().Equalf(aa, result, "msg")
				s.Require().Equalf(aa, result, "msg with arg %d", 42)

				s.Require().NotEqual(aa, result)
				s.Require().NotEqual(aa, result, "msg")
				s.Require().NotEqual(aa, result, "msg with arg %d", 42)
				s.Require().NotEqualf(aa, result, "msg")
				s.Require().NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(bb, result)
				s.Require().Equal(bb, result, "msg")
				s.Require().Equal(bb, result, "msg with arg %d", 42)
				s.Require().Equalf(bb, result, "msg")
				s.Require().Equalf(bb, result, "msg with arg %d", 42)

				s.Require().NotEqual(bb, result)
				s.Require().NotEqual(bb, result, "msg")
				s.Require().NotEqual(bb, result, "msg with arg %d", 42)
				s.Require().NotEqualf(bb, result, "msg")
				s.Require().NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(cc, result)
				s.Require().Equal(cc, result, "msg")
				s.Require().Equal(cc, result, "msg with arg %d", 42)
				s.Require().Equalf(cc, result, "msg")
				s.Require().Equalf(cc, result, "msg with arg %d", 42)

				s.Require().NotEqual(cc, result)
				s.Require().NotEqual(cc, result, "msg")
				s.Require().NotEqual(cc, result, "msg with arg %d", 42)
				s.Require().NotEqualf(cc, result, "msg")
				s.Require().NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(dd, result)
				s.Require().Equal(dd, result, "msg")
				s.Require().Equal(dd, result, "msg with arg %d", 42)
				s.Require().Equalf(dd, result, "msg")
				s.Require().Equalf(dd, result, "msg with arg %d", 42)

				s.Require().NotEqual(dd, result)
				s.Require().NotEqual(dd, result, "msg")
				s.Require().NotEqual(dd, result, "msg with arg %d", 42)
				s.Require().NotEqualf(dd, result, "msg")
				s.Require().NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(ee, result)
				s.Require().Equal(ee, result, "msg")
				s.Require().Equal(ee, result, "msg with arg %d", 42)
				s.Require().Equalf(ee, result, "msg")
				s.Require().Equalf(ee, result, "msg with arg %d", 42)

				s.Require().NotEqual(ee, result)
				s.Require().NotEqual(ee, result, "msg")
				s.Require().NotEqual(ee, result, "msg with arg %d", 42)
				s.Require().NotEqualf(ee, result, "msg")
				s.Require().NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(ff, result)
				s.Require().Equal(ff, result, "msg")
				s.Require().Equal(ff, result, "msg with arg %d", 42)
				s.Require().Equalf(ff, result, "msg")
				s.Require().Equalf(ff, result, "msg with arg %d", 42)

				s.Require().NotEqual(ff, result)
				s.Require().NotEqual(ff, result, "msg")
				s.Require().NotEqual(ff, result, "msg with arg %d", 42)
				s.Require().NotEqualf(ff, result, "msg")
				s.Require().NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(gg, result)
				s.Require().Equal(gg, result, "msg")
				s.Require().Equal(gg, result, "msg with arg %d", 42)
				s.Require().Equalf(gg, result, "msg")
				s.Require().Equalf(gg, result, "msg with arg %d", 42)

				s.Require().NotEqual(gg, result)
				s.Require().NotEqual(gg, result, "msg")
				s.Require().NotEqual(gg, result, "msg with arg %d", 42)
				s.Require().NotEqualf(gg, result, "msg")
				s.Require().NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(hh, result)
				s.Require().Equal(hh, result, "msg")
				s.Require().Equal(hh, result, "msg with arg %d", 42)
				s.Require().Equalf(hh, result, "msg")
				s.Require().Equalf(hh, result, "msg with arg %d", 42)

				s.Require().NotEqual(hh, result)
				s.Require().NotEqual(hh, result, "msg")
				s.Require().NotEqual(hh, result, "msg with arg %d", 42)
				s.Require().NotEqualf(hh, result, "msg")
				s.Require().NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(ii, result)
				s.Require().Equal(ii, result, "msg")
				s.Require().Equal(ii, result, "msg with arg %d", 42)
				s.Require().Equalf(ii, result, "msg")
				s.Require().Equalf(ii, result, "msg with arg %d", 42)

				s.Require().NotEqual(ii, result)
				s.Require().NotEqual(ii, result, "msg")
				s.Require().NotEqual(ii, result, "msg with arg %d", 42)
				s.Require().NotEqualf(ii, result, "msg")
				s.Require().NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(jj, result)
				s.Require().Equal(jj, result, "msg")
				s.Require().Equal(jj, result, "msg with arg %d", 42)
				s.Require().Equalf(jj, result, "msg")
				s.Require().Equalf(jj, result, "msg with arg %d", 42)

				s.Require().NotEqual(jj, result)
				s.Require().NotEqual(jj, result, "msg")
				s.Require().NotEqual(jj, result, "msg with arg %d", 42)
				s.Require().NotEqualf(jj, result, "msg")
				s.Require().NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(kk, result)
				s.Require().Equal(kk, result, "msg")
				s.Require().Equal(kk, result, "msg with arg %d", 42)
				s.Require().Equalf(kk, result, "msg")
				s.Require().Equalf(kk, result, "msg with arg %d", 42)

				s.Require().NotEqual(kk, result)
				s.Require().NotEqual(kk, result, "msg")
				s.Require().NotEqual(kk, result, "msg with arg %d", 42)
				s.Require().NotEqualf(kk, result, "msg")
				s.Require().NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(ll, result)
				s.Require().Equal(ll, result, "msg")
				s.Require().Equal(ll, result, "msg with arg %d", 42)
				s.Require().Equalf(ll, result, "msg")
				s.Require().Equalf(ll, result, "msg with arg %d", 42)

				s.Require().NotEqual(ll, result)
				s.Require().NotEqual(ll, result, "msg")
				s.Require().NotEqual(ll, result, "msg with arg %d", 42)
				s.Require().NotEqualf(ll, result, "msg")
				s.Require().NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(mm, result)
				s.Require().Equal(mm, result, "msg")
				s.Require().Equal(mm, result, "msg with arg %d", 42)
				s.Require().Equalf(mm, result, "msg")
				s.Require().Equalf(mm, result, "msg with arg %d", 42)

				s.Require().NotEqual(mm, result)
				s.Require().NotEqual(mm, result, "msg")
				s.Require().NotEqual(mm, result, "msg with arg %d", 42)
				s.Require().NotEqualf(mm, result, "msg")
				s.Require().NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(nn, result)
				s.Require().Equal(nn, result, "msg")
				s.Require().Equal(nn, result, "msg with arg %d", 42)
				s.Require().Equalf(nn, result, "msg")
				s.Require().Equalf(nn, result, "msg with arg %d", 42)

				s.Require().NotEqual(nn, result)
				s.Require().NotEqual(nn, result, "msg")
				s.Require().NotEqual(nn, result, "msg with arg %d", 42)
				s.Require().NotEqualf(nn, result, "msg")
				s.Require().NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(oo, result)
				s.Require().Equal(oo, result, "msg")
				s.Require().Equal(oo, result, "msg with arg %d", 42)
				s.Require().Equalf(oo, result, "msg")
				s.Require().Equalf(oo, result, "msg with arg %d", 42)

				s.Require().NotEqual(oo, result)
				s.Require().NotEqual(oo, result, "msg")
				s.Require().NotEqual(oo, result, "msg with arg %d", 42)
				s.Require().NotEqualf(oo, result, "msg")
				s.Require().NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(pp, result)
				s.Require().Equal(pp, result, "msg")
				s.Require().Equal(pp, result, "msg with arg %d", 42)
				s.Require().Equalf(pp, result, "msg")
				s.Require().Equalf(pp, result, "msg with arg %d", 42)

				s.Require().NotEqual(pp, result)
				s.Require().NotEqual(pp, result, "msg")
				s.Require().NotEqual(pp, result, "msg with arg %d", 42)
				s.Require().NotEqualf(pp, result, "msg")
				s.Require().NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(Monday, result)
				s.Require().Equal(Monday, result, "msg")
				s.Require().Equal(Monday, result, "msg with arg %d", 42)
				s.Require().Equalf(Monday, result, "msg")
				s.Require().Equalf(Monday, result, "msg with arg %d", 42)

				s.Require().NotEqual(Monday, result)
				s.Require().NotEqual(Monday, result, "msg")
				s.Require().NotEqual(Monday, result, "msg with arg %d", 42)
				s.Require().NotEqualf(Monday, result, "msg")
				s.Require().NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(DayMonday, result)
				s.Require().Equal(DayMonday, result, "msg")
				s.Require().Equal(DayMonday, result, "msg with arg %d", 42)
				s.Require().Equalf(DayMonday, result, "msg")
				s.Require().Equalf(DayMonday, result, "msg with arg %d", 42)

				s.Require().NotEqual(DayMonday, result)
				s.Require().NotEqual(DayMonday, result, "msg")
				s.Require().NotEqual(DayMonday, result, "msg with arg %d", 42)
				s.Require().NotEqualf(DayMonday, result, "msg")
				s.Require().NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(expected, result)
				s.Require().Equal(expected, result, "msg")
				s.Require().Equal(expected, result, "msg with arg %d", 42)
				s.Require().Equalf(expected, result, "msg")
				s.Require().Equalf(expected, result, "msg with arg %d", 42)

				s.Require().NotEqual(expected, result)
				s.Require().NotEqual(expected, result, "msg")
				s.Require().NotEqual(expected, result, "msg with arg %d", 42)
				s.Require().NotEqualf(expected, result, "msg")
				s.Require().NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(tt.expected, result)
				s.Require().Equal(tt.expected, result, "msg")
				s.Require().Equal(tt.expected, result, "msg with arg %d", 42)
				s.Require().Equalf(tt.expected, result, "msg")
				s.Require().Equalf(tt.expected, result, "msg with arg %d", 42)

				s.Require().NotEqual(tt.expected, result)
				s.Require().NotEqual(tt.expected, result, "msg")
				s.Require().NotEqual(tt.expected, result, "msg with arg %d", 42)
				s.Require().NotEqualf(tt.expected, result, "msg")
				s.Require().NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.Require().Equal(ttp.expected, result)
				s.Require().Equal(ttp.expected, result, "msg")
				s.Require().Equal(ttp.expected, result, "msg with arg %d", 42)
				s.Require().Equalf(ttp.expected, result, "msg")
				s.Require().Equalf(ttp.expected, result, "msg with arg %d", 42)

				s.Require().NotEqual(ttp.expected, result)
				s.Require().NotEqual(ttp.expected, result, "msg")
				s.Require().NotEqual(ttp.expected, result, "msg with arg %d", 42)
				s.Require().NotEqualf(ttp.expected, result, "msg")
				s.Require().NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				reqObj.Equal(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint(11), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint(11), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint(11), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint(11), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint(11), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint8(12), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint8(12), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint8(12), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint8(12), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint8(12), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint16(13), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint16(13), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint16(13), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint16(13), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint16(13), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint32(14), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint32(14), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint32(14), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint32(14), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint32(14), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(uint64(15), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint64(15), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(uint64(15), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint64(15), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(uint64(15), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(21, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(21, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(21, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(21, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(21, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int8(22), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int8(22), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int8(22), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int8(22), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int8(22), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int16(23), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int16(23), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int16(23), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int16(23), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int16(23), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int32(24), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int32(24), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int32(24), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int32(24), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int32(24), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(int64(25), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int64(25), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(int64(25), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int64(25), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(int64(25), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(float32(31.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float32(31.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float32(31.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float32(31.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float32(31.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(float64(32.), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float64(32.), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(float64(32.), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float64(32.), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(float64(32.), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(complex64(41-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex64(41-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(complex128(42-0.707i), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex128(42-0.707i), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual('r', result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual('r', result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual('r', result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf('r', result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf('r', result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(a, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(a, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(a, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(a, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(a, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(b, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(b, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(b, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(b, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(b, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(c, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(c, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(c, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(c, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(c, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(d, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(d, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(d, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(d, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(d, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(e, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(e, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(e, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(e, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(e, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(f, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(f, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(f, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(f, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(f, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(g, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(g, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(g, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(g, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(g, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(h, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(h, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(h, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(h, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(h, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(i, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(i, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(i, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(i, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(i, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(j, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(j, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(j, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(j, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(j, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(k, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(k, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(k, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(k, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(k, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(l, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(l, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(l, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(l, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(l, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(m, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(m, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(m, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(m, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(m, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(n, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(n, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(n, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(n, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(n, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(p, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(p, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(p, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(p, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(p, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(aa, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(aa, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(aa, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(aa, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(aa, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(bb, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(bb, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(bb, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(bb, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(bb, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(cc, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(cc, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(cc, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(cc, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(cc, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(dd, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(dd, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(dd, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(dd, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(dd, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ee, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ee, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ee, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ee, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ee, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ff, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ff, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ff, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ff, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ff, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(gg, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(gg, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(gg, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(gg, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(gg, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(hh, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(hh, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(hh, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(hh, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(hh, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ii, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ii, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ii, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ii, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ii, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(jj, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(jj, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(jj, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(jj, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(jj, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(kk, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(kk, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(kk, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(kk, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(kk, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ll, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ll, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ll, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ll, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ll, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(mm, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(mm, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(mm, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(mm, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(mm, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(nn, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(nn, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(nn, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(nn, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(nn, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(pp, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(pp, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(pp, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(pp, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(pp, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(Monday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(Monday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(Monday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(Monday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(Monday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(DayMonday, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(DayMonday, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(DayMonday, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(DayMonday, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(DayMonday, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.Equal(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equal(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.Equalf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.NotEqual(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				reqObj.Equal(uint(11), result)
				reqObj.Equal(uint(11), result, "msg")
				reqObj.Equal(uint(11), result, "msg with arg %d", 42)
				reqObj.Equalf(uint(11), result, "msg")
				reqObj.Equalf(uint(11), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint(11), result)
				reqObj.NotEqual(uint(11), result, "msg")
				reqObj.NotEqual(uint(11), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint(11), result, "msg")
				reqObj.NotEqualf(uint(11), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint8(12), result)
				reqObj.Equal(uint8(12), result, "msg")
				reqObj.Equal(uint8(12), result, "msg with arg %d", 42)
				reqObj.Equalf(uint8(12), result, "msg")
				reqObj.Equalf(uint8(12), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint8(12), result)
				reqObj.NotEqual(uint8(12), result, "msg")
				reqObj.NotEqual(uint8(12), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint8(12), result, "msg")
				reqObj.NotEqualf(uint8(12), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint16(13), result)
				reqObj.Equal(uint16(13), result, "msg")
				reqObj.Equal(uint16(13), result, "msg with arg %d", 42)
				reqObj.Equalf(uint16(13), result, "msg")
				reqObj.Equalf(uint16(13), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint16(13), result)
				reqObj.NotEqual(uint16(13), result, "msg")
				reqObj.NotEqual(uint16(13), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint16(13), result, "msg")
				reqObj.NotEqualf(uint16(13), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint32(14), result)
				reqObj.Equal(uint32(14), result, "msg")
				reqObj.Equal(uint32(14), result, "msg with arg %d", 42)
				reqObj.Equalf(uint32(14), result, "msg")
				reqObj.Equalf(uint32(14), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint32(14), result)
				reqObj.NotEqual(uint32(14), result, "msg")
				reqObj.NotEqual(uint32(14), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint32(14), result, "msg")
				reqObj.NotEqualf(uint32(14), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(uint64(15), result)
				reqObj.Equal(uint64(15), result, "msg")
				reqObj.Equal(uint64(15), result, "msg with arg %d", 42)
				reqObj.Equalf(uint64(15), result, "msg")
				reqObj.Equalf(uint64(15), result, "msg with arg %d", 42)

				reqObj.NotEqual(uint64(15), result)
				reqObj.NotEqual(uint64(15), result, "msg")
				reqObj.NotEqual(uint64(15), result, "msg with arg %d", 42)
				reqObj.NotEqualf(uint64(15), result, "msg")
				reqObj.NotEqualf(uint64(15), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(21, result)
				reqObj.Equal(21, result, "msg")
				reqObj.Equal(21, result, "msg with arg %d", 42)
				reqObj.Equalf(21, result, "msg")
				reqObj.Equalf(21, result, "msg with arg %d", 42)

				reqObj.NotEqual(21, result)
				reqObj.NotEqual(21, result, "msg")
				reqObj.NotEqual(21, result, "msg with arg %d", 42)
				reqObj.NotEqualf(21, result, "msg")
				reqObj.NotEqualf(21, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int8(22), result)
				reqObj.Equal(int8(22), result, "msg")
				reqObj.Equal(int8(22), result, "msg with arg %d", 42)
				reqObj.Equalf(int8(22), result, "msg")
				reqObj.Equalf(int8(22), result, "msg with arg %d", 42)

				reqObj.NotEqual(int8(22), result)
				reqObj.NotEqual(int8(22), result, "msg")
				reqObj.NotEqual(int8(22), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int8(22), result, "msg")
				reqObj.NotEqualf(int8(22), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int16(23), result)
				reqObj.Equal(int16(23), result, "msg")
				reqObj.Equal(int16(23), result, "msg with arg %d", 42)
				reqObj.Equalf(int16(23), result, "msg")
				reqObj.Equalf(int16(23), result, "msg with arg %d", 42)

				reqObj.NotEqual(int16(23), result)
				reqObj.NotEqual(int16(23), result, "msg")
				reqObj.NotEqual(int16(23), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int16(23), result, "msg")
				reqObj.NotEqualf(int16(23), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int32(24), result)
				reqObj.Equal(int32(24), result, "msg")
				reqObj.Equal(int32(24), result, "msg with arg %d", 42)
				reqObj.Equalf(int32(24), result, "msg")
				reqObj.Equalf(int32(24), result, "msg with arg %d", 42)

				reqObj.NotEqual(int32(24), result)
				reqObj.NotEqual(int32(24), result, "msg")
				reqObj.NotEqual(int32(24), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int32(24), result, "msg")
				reqObj.NotEqualf(int32(24), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(int64(25), result)
				reqObj.Equal(int64(25), result, "msg")
				reqObj.Equal(int64(25), result, "msg with arg %d", 42)
				reqObj.Equalf(int64(25), result, "msg")
				reqObj.Equalf(int64(25), result, "msg with arg %d", 42)

				reqObj.NotEqual(int64(25), result)
				reqObj.NotEqual(int64(25), result, "msg")
				reqObj.NotEqual(int64(25), result, "msg with arg %d", 42)
				reqObj.NotEqualf(int64(25), result, "msg")
				reqObj.NotEqualf(int64(25), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(float32(31.), result)
				reqObj.Equal(float32(31.), result, "msg")
				reqObj.Equal(float32(31.), result, "msg with arg %d", 42)
				reqObj.Equalf(float32(31.), result, "msg")
				reqObj.Equalf(float32(31.), result, "msg with arg %d", 42)

				reqObj.NotEqual(float32(31.), result)
				reqObj.NotEqual(float32(31.), result, "msg")
				reqObj.NotEqual(float32(31.), result, "msg with arg %d", 42)
				reqObj.NotEqualf(float32(31.), result, "msg")
				reqObj.NotEqualf(float32(31.), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(float64(32.), result)
				reqObj.Equal(float64(32.), result, "msg")
				reqObj.Equal(float64(32.), result, "msg with arg %d", 42)
				reqObj.Equalf(float64(32.), result, "msg")
				reqObj.Equalf(float64(32.), result, "msg with arg %d", 42)

				reqObj.NotEqual(float64(32.), result)
				reqObj.NotEqual(float64(32.), result, "msg")
				reqObj.NotEqual(float64(32.), result, "msg with arg %d", 42)
				reqObj.NotEqualf(float64(32.), result, "msg")
				reqObj.NotEqualf(float64(32.), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(complex64(41-0.707i), result)
				reqObj.Equal(complex64(41-0.707i), result, "msg")
				reqObj.Equal(complex64(41-0.707i), result, "msg with arg %d", 42)
				reqObj.Equalf(complex64(41-0.707i), result, "msg")
				reqObj.Equalf(complex64(41-0.707i), result, "msg with arg %d", 42)

				reqObj.NotEqual(complex64(41-0.707i), result)
				reqObj.NotEqual(complex64(41-0.707i), result, "msg")
				reqObj.NotEqual(complex64(41-0.707i), result, "msg with arg %d", 42)
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg")
				reqObj.NotEqualf(complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(complex128(42-0.707i), result)
				reqObj.Equal(complex128(42-0.707i), result, "msg")
				reqObj.Equal(complex128(42-0.707i), result, "msg with arg %d", 42)
				reqObj.Equalf(complex128(42-0.707i), result, "msg")
				reqObj.Equalf(complex128(42-0.707i), result, "msg with arg %d", 42)

				reqObj.NotEqual(complex128(42-0.707i), result)
				reqObj.NotEqual(complex128(42-0.707i), result, "msg")
				reqObj.NotEqual(complex128(42-0.707i), result, "msg with arg %d", 42)
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg")
				reqObj.NotEqualf(complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal("string", result)
				reqObj.Equal("string", result, "msg")
				reqObj.Equal("string", result, "msg with arg %d", 42)
				reqObj.Equalf("string", result, "msg")
				reqObj.Equalf("string", result, "msg with arg %d", 42)

				reqObj.NotEqual("string", result)
				reqObj.NotEqual("string", result, "msg")
				reqObj.NotEqual("string", result, "msg with arg %d", 42)
				reqObj.NotEqualf("string", result, "msg")
				reqObj.NotEqualf("string", result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal('r', result)
				reqObj.Equal('r', result, "msg")
				reqObj.Equal('r', result, "msg with arg %d", 42)
				reqObj.Equalf('r', result, "msg")
				reqObj.Equalf('r', result, "msg with arg %d", 42)

				reqObj.NotEqual('r', result)
				reqObj.NotEqual('r', result, "msg")
				reqObj.NotEqual('r', result, "msg with arg %d", 42)
				reqObj.NotEqualf('r', result, "msg")
				reqObj.NotEqualf('r', result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(a, result)
				reqObj.Equal(a, result, "msg")
				reqObj.Equal(a, result, "msg with arg %d", 42)
				reqObj.Equalf(a, result, "msg")
				reqObj.Equalf(a, result, "msg with arg %d", 42)

				reqObj.NotEqual(a, result)
				reqObj.NotEqual(a, result, "msg")
				reqObj.NotEqual(a, result, "msg with arg %d", 42)
				reqObj.NotEqualf(a, result, "msg")
				reqObj.NotEqualf(a, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(b, result)
				reqObj.Equal(b, result, "msg")
				reqObj.Equal(b, result, "msg with arg %d", 42)
				reqObj.Equalf(b, result, "msg")
				reqObj.Equalf(b, result, "msg with arg %d", 42)

				reqObj.NotEqual(b, result)
				reqObj.NotEqual(b, result, "msg")
				reqObj.NotEqual(b, result, "msg with arg %d", 42)
				reqObj.NotEqualf(b, result, "msg")
				reqObj.NotEqualf(b, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(c, result)
				reqObj.Equal(c, result, "msg")
				reqObj.Equal(c, result, "msg with arg %d", 42)
				reqObj.Equalf(c, result, "msg")
				reqObj.Equalf(c, result, "msg with arg %d", 42)

				reqObj.NotEqual(c, result)
				reqObj.NotEqual(c, result, "msg")
				reqObj.NotEqual(c, result, "msg with arg %d", 42)
				reqObj.NotEqualf(c, result, "msg")
				reqObj.NotEqualf(c, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(d, result)
				reqObj.Equal(d, result, "msg")
				reqObj.Equal(d, result, "msg with arg %d", 42)
				reqObj.Equalf(d, result, "msg")
				reqObj.Equalf(d, result, "msg with arg %d", 42)

				reqObj.NotEqual(d, result)
				reqObj.NotEqual(d, result, "msg")
				reqObj.NotEqual(d, result, "msg with arg %d", 42)
				reqObj.NotEqualf(d, result, "msg")
				reqObj.NotEqualf(d, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(e, result)
				reqObj.Equal(e, result, "msg")
				reqObj.Equal(e, result, "msg with arg %d", 42)
				reqObj.Equalf(e, result, "msg")
				reqObj.Equalf(e, result, "msg with arg %d", 42)

				reqObj.NotEqual(e, result)
				reqObj.NotEqual(e, result, "msg")
				reqObj.NotEqual(e, result, "msg with arg %d", 42)
				reqObj.NotEqualf(e, result, "msg")
				reqObj.NotEqualf(e, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(f, result)
				reqObj.Equal(f, result, "msg")
				reqObj.Equal(f, result, "msg with arg %d", 42)
				reqObj.Equalf(f, result, "msg")
				reqObj.Equalf(f, result, "msg with arg %d", 42)

				reqObj.NotEqual(f, result)
				reqObj.NotEqual(f, result, "msg")
				reqObj.NotEqual(f, result, "msg with arg %d", 42)
				reqObj.NotEqualf(f, result, "msg")
				reqObj.NotEqualf(f, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(g, result)
				reqObj.Equal(g, result, "msg")
				reqObj.Equal(g, result, "msg with arg %d", 42)
				reqObj.Equalf(g, result, "msg")
				reqObj.Equalf(g, result, "msg with arg %d", 42)

				reqObj.NotEqual(g, result)
				reqObj.NotEqual(g, result, "msg")
				reqObj.NotEqual(g, result, "msg with arg %d", 42)
				reqObj.NotEqualf(g, result, "msg")
				reqObj.NotEqualf(g, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(h, result)
				reqObj.Equal(h, result, "msg")
				reqObj.Equal(h, result, "msg with arg %d", 42)
				reqObj.Equalf(h, result, "msg")
				reqObj.Equalf(h, result, "msg with arg %d", 42)

				reqObj.NotEqual(h, result)
				reqObj.NotEqual(h, result, "msg")
				reqObj.NotEqual(h, result, "msg with arg %d", 42)
				reqObj.NotEqualf(h, result, "msg")
				reqObj.NotEqualf(h, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(i, result)
				reqObj.Equal(i, result, "msg")
				reqObj.Equal(i, result, "msg with arg %d", 42)
				reqObj.Equalf(i, result, "msg")
				reqObj.Equalf(i, result, "msg with arg %d", 42)

				reqObj.NotEqual(i, result)
				reqObj.NotEqual(i, result, "msg")
				reqObj.NotEqual(i, result, "msg with arg %d", 42)
				reqObj.NotEqualf(i, result, "msg")
				reqObj.NotEqualf(i, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(j, result)
				reqObj.Equal(j, result, "msg")
				reqObj.Equal(j, result, "msg with arg %d", 42)
				reqObj.Equalf(j, result, "msg")
				reqObj.Equalf(j, result, "msg with arg %d", 42)

				reqObj.NotEqual(j, result)
				reqObj.NotEqual(j, result, "msg")
				reqObj.NotEqual(j, result, "msg with arg %d", 42)
				reqObj.NotEqualf(j, result, "msg")
				reqObj.NotEqualf(j, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(k, result)
				reqObj.Equal(k, result, "msg")
				reqObj.Equal(k, result, "msg with arg %d", 42)
				reqObj.Equalf(k, result, "msg")
				reqObj.Equalf(k, result, "msg with arg %d", 42)

				reqObj.NotEqual(k, result)
				reqObj.NotEqual(k, result, "msg")
				reqObj.NotEqual(k, result, "msg with arg %d", 42)
				reqObj.NotEqualf(k, result, "msg")
				reqObj.NotEqualf(k, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(l, result)
				reqObj.Equal(l, result, "msg")
				reqObj.Equal(l, result, "msg with arg %d", 42)
				reqObj.Equalf(l, result, "msg")
				reqObj.Equalf(l, result, "msg with arg %d", 42)

				reqObj.NotEqual(l, result)
				reqObj.NotEqual(l, result, "msg")
				reqObj.NotEqual(l, result, "msg with arg %d", 42)
				reqObj.NotEqualf(l, result, "msg")
				reqObj.NotEqualf(l, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(m, result)
				reqObj.Equal(m, result, "msg")
				reqObj.Equal(m, result, "msg with arg %d", 42)
				reqObj.Equalf(m, result, "msg")
				reqObj.Equalf(m, result, "msg with arg %d", 42)

				reqObj.NotEqual(m, result)
				reqObj.NotEqual(m, result, "msg")
				reqObj.NotEqual(m, result, "msg with arg %d", 42)
				reqObj.NotEqualf(m, result, "msg")
				reqObj.NotEqualf(m, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(n, result)
				reqObj.Equal(n, result, "msg")
				reqObj.Equal(n, result, "msg with arg %d", 42)
				reqObj.Equalf(n, result, "msg")
				reqObj.Equalf(n, result, "msg with arg %d", 42)

				reqObj.NotEqual(n, result)
				reqObj.NotEqual(n, result, "msg")
				reqObj.NotEqual(n, result, "msg with arg %d", 42)
				reqObj.NotEqualf(n, result, "msg")
				reqObj.NotEqualf(n, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(o, result)
				reqObj.Equal(o, result, "msg")
				reqObj.Equal(o, result, "msg with arg %d", 42)
				reqObj.Equalf(o, result, "msg")
				reqObj.Equalf(o, result, "msg with arg %d", 42)

				reqObj.NotEqual(o, result)
				reqObj.NotEqual(o, result, "msg")
				reqObj.NotEqual(o, result, "msg with arg %d", 42)
				reqObj.NotEqualf(o, result, "msg")
				reqObj.NotEqualf(o, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(p, result)
				reqObj.Equal(p, result, "msg")
				reqObj.Equal(p, result, "msg with arg %d", 42)
				reqObj.Equalf(p, result, "msg")
				reqObj.Equalf(p, result, "msg with arg %d", 42)

				reqObj.NotEqual(p, result)
				reqObj.NotEqual(p, result, "msg")
				reqObj.NotEqual(p, result, "msg with arg %d", 42)
				reqObj.NotEqualf(p, result, "msg")
				reqObj.NotEqualf(p, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(aa, result)
				reqObj.Equal(aa, result, "msg")
				reqObj.Equal(aa, result, "msg with arg %d", 42)
				reqObj.Equalf(aa, result, "msg")
				reqObj.Equalf(aa, result, "msg with arg %d", 42)

				reqObj.NotEqual(aa, result)
				reqObj.NotEqual(aa, result, "msg")
				reqObj.NotEqual(aa, result, "msg with arg %d", 42)
				reqObj.NotEqualf(aa, result, "msg")
				reqObj.NotEqualf(aa, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(bb, result)
				reqObj.Equal(bb, result, "msg")
				reqObj.Equal(bb, result, "msg with arg %d", 42)
				reqObj.Equalf(bb, result, "msg")
				reqObj.Equalf(bb, result, "msg with arg %d", 42)

				reqObj.NotEqual(bb, result)
				reqObj.NotEqual(bb, result, "msg")
				reqObj.NotEqual(bb, result, "msg with arg %d", 42)
				reqObj.NotEqualf(bb, result, "msg")
				reqObj.NotEqualf(bb, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(cc, result)
				reqObj.Equal(cc, result, "msg")
				reqObj.Equal(cc, result, "msg with arg %d", 42)
				reqObj.Equalf(cc, result, "msg")
				reqObj.Equalf(cc, result, "msg with arg %d", 42)

				reqObj.NotEqual(cc, result)
				reqObj.NotEqual(cc, result, "msg")
				reqObj.NotEqual(cc, result, "msg with arg %d", 42)
				reqObj.NotEqualf(cc, result, "msg")
				reqObj.NotEqualf(cc, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(dd, result)
				reqObj.Equal(dd, result, "msg")
				reqObj.Equal(dd, result, "msg with arg %d", 42)
				reqObj.Equalf(dd, result, "msg")
				reqObj.Equalf(dd, result, "msg with arg %d", 42)

				reqObj.NotEqual(dd, result)
				reqObj.NotEqual(dd, result, "msg")
				reqObj.NotEqual(dd, result, "msg with arg %d", 42)
				reqObj.NotEqualf(dd, result, "msg")
				reqObj.NotEqualf(dd, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ee, result)
				reqObj.Equal(ee, result, "msg")
				reqObj.Equal(ee, result, "msg with arg %d", 42)
				reqObj.Equalf(ee, result, "msg")
				reqObj.Equalf(ee, result, "msg with arg %d", 42)

				reqObj.NotEqual(ee, result)
				reqObj.NotEqual(ee, result, "msg")
				reqObj.NotEqual(ee, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ee, result, "msg")
				reqObj.NotEqualf(ee, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ff, result)
				reqObj.Equal(ff, result, "msg")
				reqObj.Equal(ff, result, "msg with arg %d", 42)
				reqObj.Equalf(ff, result, "msg")
				reqObj.Equalf(ff, result, "msg with arg %d", 42)

				reqObj.NotEqual(ff, result)
				reqObj.NotEqual(ff, result, "msg")
				reqObj.NotEqual(ff, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ff, result, "msg")
				reqObj.NotEqualf(ff, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(gg, result)
				reqObj.Equal(gg, result, "msg")
				reqObj.Equal(gg, result, "msg with arg %d", 42)
				reqObj.Equalf(gg, result, "msg")
				reqObj.Equalf(gg, result, "msg with arg %d", 42)

				reqObj.NotEqual(gg, result)
				reqObj.NotEqual(gg, result, "msg")
				reqObj.NotEqual(gg, result, "msg with arg %d", 42)
				reqObj.NotEqualf(gg, result, "msg")
				reqObj.NotEqualf(gg, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(hh, result)
				reqObj.Equal(hh, result, "msg")
				reqObj.Equal(hh, result, "msg with arg %d", 42)
				reqObj.Equalf(hh, result, "msg")
				reqObj.Equalf(hh, result, "msg with arg %d", 42)

				reqObj.NotEqual(hh, result)
				reqObj.NotEqual(hh, result, "msg")
				reqObj.NotEqual(hh, result, "msg with arg %d", 42)
				reqObj.NotEqualf(hh, result, "msg")
				reqObj.NotEqualf(hh, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ii, result)
				reqObj.Equal(ii, result, "msg")
				reqObj.Equal(ii, result, "msg with arg %d", 42)
				reqObj.Equalf(ii, result, "msg")
				reqObj.Equalf(ii, result, "msg with arg %d", 42)

				reqObj.NotEqual(ii, result)
				reqObj.NotEqual(ii, result, "msg")
				reqObj.NotEqual(ii, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ii, result, "msg")
				reqObj.NotEqualf(ii, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(jj, result)
				reqObj.Equal(jj, result, "msg")
				reqObj.Equal(jj, result, "msg with arg %d", 42)
				reqObj.Equalf(jj, result, "msg")
				reqObj.Equalf(jj, result, "msg with arg %d", 42)

				reqObj.NotEqual(jj, result)
				reqObj.NotEqual(jj, result, "msg")
				reqObj.NotEqual(jj, result, "msg with arg %d", 42)
				reqObj.NotEqualf(jj, result, "msg")
				reqObj.NotEqualf(jj, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(kk, result)
				reqObj.Equal(kk, result, "msg")
				reqObj.Equal(kk, result, "msg with arg %d", 42)
				reqObj.Equalf(kk, result, "msg")
				reqObj.Equalf(kk, result, "msg with arg %d", 42)

				reqObj.NotEqual(kk, result)
				reqObj.NotEqual(kk, result, "msg")
				reqObj.NotEqual(kk, result, "msg with arg %d", 42)
				reqObj.NotEqualf(kk, result, "msg")
				reqObj.NotEqualf(kk, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ll, result)
				reqObj.Equal(ll, result, "msg")
				reqObj.Equal(ll, result, "msg with arg %d", 42)
				reqObj.Equalf(ll, result, "msg")
				reqObj.Equalf(ll, result, "msg with arg %d", 42)

				reqObj.NotEqual(ll, result)
				reqObj.NotEqual(ll, result, "msg")
				reqObj.NotEqual(ll, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ll, result, "msg")
				reqObj.NotEqualf(ll, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(mm, result)
				reqObj.Equal(mm, result, "msg")
				reqObj.Equal(mm, result, "msg with arg %d", 42)
				reqObj.Equalf(mm, result, "msg")
				reqObj.Equalf(mm, result, "msg with arg %d", 42)

				reqObj.NotEqual(mm, result)
				reqObj.NotEqual(mm, result, "msg")
				reqObj.NotEqual(mm, result, "msg with arg %d", 42)
				reqObj.NotEqualf(mm, result, "msg")
				reqObj.NotEqualf(mm, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(nn, result)
				reqObj.Equal(nn, result, "msg")
				reqObj.Equal(nn, result, "msg with arg %d", 42)
				reqObj.Equalf(nn, result, "msg")
				reqObj.Equalf(nn, result, "msg with arg %d", 42)

				reqObj.NotEqual(nn, result)
				reqObj.NotEqual(nn, result, "msg")
				reqObj.NotEqual(nn, result, "msg with arg %d", 42)
				reqObj.NotEqualf(nn, result, "msg")
				reqObj.NotEqualf(nn, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(oo, result)
				reqObj.Equal(oo, result, "msg")
				reqObj.Equal(oo, result, "msg with arg %d", 42)
				reqObj.Equalf(oo, result, "msg")
				reqObj.Equalf(oo, result, "msg with arg %d", 42)

				reqObj.NotEqual(oo, result)
				reqObj.NotEqual(oo, result, "msg")
				reqObj.NotEqual(oo, result, "msg with arg %d", 42)
				reqObj.NotEqualf(oo, result, "msg")
				reqObj.NotEqualf(oo, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(pp, result)
				reqObj.Equal(pp, result, "msg")
				reqObj.Equal(pp, result, "msg with arg %d", 42)
				reqObj.Equalf(pp, result, "msg")
				reqObj.Equalf(pp, result, "msg with arg %d", 42)

				reqObj.NotEqual(pp, result)
				reqObj.NotEqual(pp, result, "msg")
				reqObj.NotEqual(pp, result, "msg with arg %d", 42)
				reqObj.NotEqualf(pp, result, "msg")
				reqObj.NotEqualf(pp, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(Monday, result)
				reqObj.Equal(Monday, result, "msg")
				reqObj.Equal(Monday, result, "msg with arg %d", 42)
				reqObj.Equalf(Monday, result, "msg")
				reqObj.Equalf(Monday, result, "msg with arg %d", 42)

				reqObj.NotEqual(Monday, result)
				reqObj.NotEqual(Monday, result, "msg")
				reqObj.NotEqual(Monday, result, "msg with arg %d", 42)
				reqObj.NotEqualf(Monday, result, "msg")
				reqObj.NotEqualf(Monday, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(DayMonday, result)
				reqObj.Equal(DayMonday, result, "msg")
				reqObj.Equal(DayMonday, result, "msg with arg %d", 42)
				reqObj.Equalf(DayMonday, result, "msg")
				reqObj.Equalf(DayMonday, result, "msg with arg %d", 42)

				reqObj.NotEqual(DayMonday, result)
				reqObj.NotEqual(DayMonday, result, "msg")
				reqObj.NotEqual(DayMonday, result, "msg with arg %d", 42)
				reqObj.NotEqualf(DayMonday, result, "msg")
				reqObj.NotEqualf(DayMonday, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(expected, result)
				reqObj.Equal(expected, result, "msg")
				reqObj.Equal(expected, result, "msg with arg %d", 42)
				reqObj.Equalf(expected, result, "msg")
				reqObj.Equalf(expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(expected, result)
				reqObj.NotEqual(expected, result, "msg")
				reqObj.NotEqual(expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(expected, result, "msg")
				reqObj.NotEqualf(expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(tt.expected, result)
				reqObj.Equal(tt.expected, result, "msg")
				reqObj.Equal(tt.expected, result, "msg with arg %d", 42)
				reqObj.Equalf(tt.expected, result, "msg")
				reqObj.Equalf(tt.expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(tt.expected, result)
				reqObj.NotEqual(tt.expected, result, "msg")
				reqObj.NotEqual(tt.expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(tt.expected, result, "msg")
				reqObj.NotEqualf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.Equal(ttp.expected, result)
				reqObj.Equal(ttp.expected, result, "msg")
				reqObj.Equal(ttp.expected, result, "msg with arg %d", 42)
				reqObj.Equalf(ttp.expected, result, "msg")
				reqObj.Equalf(ttp.expected, result, "msg with arg %d", 42)

				reqObj.NotEqual(ttp.expected, result)
				reqObj.NotEqual(ttp.expected, result, "msg")
				reqObj.NotEqual(ttp.expected, result, "msg with arg %d", 42)
				reqObj.NotEqualf(ttp.expected, result, "msg")
				reqObj.NotEqualf(ttp.expected, result, "msg with arg %d", 42)
			}
		}
	}

	// String.
	{
		{
			{
				s.JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.JSONEq("string", result)
				s.JSONEq("string", result, "msg")
				s.JSONEq("string", result, "msg with arg %d", 42)
				s.JSONEqf("string", result, "msg")
				s.JSONEqf("string", result, "msg with arg %d", 42)

				s.YAMLEq("string", result)
				s.YAMLEq("string", result, "msg")
				s.YAMLEq("string", result, "msg with arg %d", 42)
				s.YAMLEqf("string", result, "msg")
				s.YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(o, result)
				s.JSONEq(o, result, "msg")
				s.JSONEq(o, result, "msg with arg %d", 42)
				s.JSONEqf(o, result, "msg")
				s.JSONEqf(o, result, "msg with arg %d", 42)

				s.YAMLEq(o, result)
				s.YAMLEq(o, result, "msg")
				s.YAMLEq(o, result, "msg with arg %d", 42)
				s.YAMLEqf(o, result, "msg")
				s.YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(oo, result)
				s.JSONEq(oo, result, "msg")
				s.JSONEq(oo, result, "msg with arg %d", 42)
				s.JSONEqf(oo, result, "msg")
				s.JSONEqf(oo, result, "msg with arg %d", 42)

				s.YAMLEq(oo, result)
				s.YAMLEq(oo, result, "msg")
				s.YAMLEq(oo, result, "msg with arg %d", 42)
				s.YAMLEqf(oo, result, "msg")
				s.YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(string(DayNameMonday), result)
				s.JSONEq(string(DayNameMonday), result, "msg")
				s.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.JSONEqf(string(DayNameMonday), result, "msg")
				s.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				s.YAMLEq(string(DayNameMonday), result)
				s.YAMLEq(string(DayNameMonday), result, "msg")
				s.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.YAMLEqf(string(DayNameMonday), result, "msg")
				s.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(expected, result)
				s.JSONEq(expected, result, "msg")
				s.JSONEq(expected, result, "msg with arg %d", 42)
				s.JSONEqf(expected, result, "msg")
				s.JSONEqf(expected, result, "msg with arg %d", 42)

				s.YAMLEq(expected, result)
				s.YAMLEq(expected, result, "msg")
				s.YAMLEq(expected, result, "msg with arg %d", 42)
				s.YAMLEqf(expected, result, "msg")
				s.YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(tt.expected, result)
				s.JSONEq(tt.expected, result, "msg")
				s.JSONEq(tt.expected, result, "msg with arg %d", 42)
				s.JSONEqf(tt.expected, result, "msg")
				s.JSONEqf(tt.expected, result, "msg with arg %d", 42)

				s.YAMLEq(tt.expected, result)
				s.YAMLEq(tt.expected, result, "msg")
				s.YAMLEq(tt.expected, result, "msg with arg %d", 42)
				s.YAMLEqf(tt.expected, result, "msg")
				s.YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.JSONEq(ttp.expected, result)
				s.JSONEq(ttp.expected, result, "msg")
				s.JSONEq(ttp.expected, result, "msg with arg %d", 42)
				s.JSONEqf(ttp.expected, result, "msg")
				s.JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				s.YAMLEq(ttp.expected, result)
				s.YAMLEq(ttp.expected, result, "msg")
				s.YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				s.YAMLEqf(ttp.expected, result, "msg")
				s.YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				s.Assert().JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Assert().JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Assert().YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Assert().YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.Assert().JSONEq("string", result)
				s.Assert().JSONEq("string", result, "msg")
				s.Assert().JSONEq("string", result, "msg with arg %d", 42)
				s.Assert().JSONEqf("string", result, "msg")
				s.Assert().JSONEqf("string", result, "msg with arg %d", 42)

				s.Assert().YAMLEq("string", result)
				s.Assert().YAMLEq("string", result, "msg")
				s.Assert().YAMLEq("string", result, "msg with arg %d", 42)
				s.Assert().YAMLEqf("string", result, "msg")
				s.Assert().YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(o, result)
				s.Assert().JSONEq(o, result, "msg")
				s.Assert().JSONEq(o, result, "msg with arg %d", 42)
				s.Assert().JSONEqf(o, result, "msg")
				s.Assert().JSONEqf(o, result, "msg with arg %d", 42)

				s.Assert().YAMLEq(o, result)
				s.Assert().YAMLEq(o, result, "msg")
				s.Assert().YAMLEq(o, result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(o, result, "msg")
				s.Assert().YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(oo, result)
				s.Assert().JSONEq(oo, result, "msg")
				s.Assert().JSONEq(oo, result, "msg with arg %d", 42)
				s.Assert().JSONEqf(oo, result, "msg")
				s.Assert().JSONEqf(oo, result, "msg with arg %d", 42)

				s.Assert().YAMLEq(oo, result)
				s.Assert().YAMLEq(oo, result, "msg")
				s.Assert().YAMLEq(oo, result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(oo, result, "msg")
				s.Assert().YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(string(DayNameMonday), result)
				s.Assert().JSONEq(string(DayNameMonday), result, "msg")
				s.Assert().JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.Assert().JSONEqf(string(DayNameMonday), result, "msg")
				s.Assert().JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				s.Assert().YAMLEq(string(DayNameMonday), result)
				s.Assert().YAMLEq(string(DayNameMonday), result, "msg")
				s.Assert().YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(string(DayNameMonday), result, "msg")
				s.Assert().YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(expected, result)
				s.Assert().JSONEq(expected, result, "msg")
				s.Assert().JSONEq(expected, result, "msg with arg %d", 42)
				s.Assert().JSONEqf(expected, result, "msg")
				s.Assert().JSONEqf(expected, result, "msg with arg %d", 42)

				s.Assert().YAMLEq(expected, result)
				s.Assert().YAMLEq(expected, result, "msg")
				s.Assert().YAMLEq(expected, result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(expected, result, "msg")
				s.Assert().YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(tt.expected, result)
				s.Assert().JSONEq(tt.expected, result, "msg")
				s.Assert().JSONEq(tt.expected, result, "msg with arg %d", 42)
				s.Assert().JSONEqf(tt.expected, result, "msg")
				s.Assert().JSONEqf(tt.expected, result, "msg with arg %d", 42)

				s.Assert().YAMLEq(tt.expected, result)
				s.Assert().YAMLEq(tt.expected, result, "msg")
				s.Assert().YAMLEq(tt.expected, result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(tt.expected, result, "msg")
				s.Assert().YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.Assert().JSONEq(ttp.expected, result)
				s.Assert().JSONEq(ttp.expected, result, "msg")
				s.Assert().JSONEq(ttp.expected, result, "msg with arg %d", 42)
				s.Assert().JSONEqf(ttp.expected, result, "msg")
				s.Assert().JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				s.Assert().YAMLEq(ttp.expected, result)
				s.Assert().YAMLEq(ttp.expected, result, "msg")
				s.Assert().YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				s.Assert().YAMLEqf(ttp.expected, result, "msg")
				s.Assert().YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				assObj.JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				assObj.JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				assObj.YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				assObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				assObj.JSONEq("string", result)
				assObj.JSONEq("string", result, "msg")
				assObj.JSONEq("string", result, "msg with arg %d", 42)
				assObj.JSONEqf("string", result, "msg")
				assObj.JSONEqf("string", result, "msg with arg %d", 42)

				assObj.YAMLEq("string", result)
				assObj.YAMLEq("string", result, "msg")
				assObj.YAMLEq("string", result, "msg with arg %d", 42)
				assObj.YAMLEqf("string", result, "msg")
				assObj.YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(o, result)
				assObj.JSONEq(o, result, "msg")
				assObj.JSONEq(o, result, "msg with arg %d", 42)
				assObj.JSONEqf(o, result, "msg")
				assObj.JSONEqf(o, result, "msg with arg %d", 42)

				assObj.YAMLEq(o, result)
				assObj.YAMLEq(o, result, "msg")
				assObj.YAMLEq(o, result, "msg with arg %d", 42)
				assObj.YAMLEqf(o, result, "msg")
				assObj.YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(oo, result)
				assObj.JSONEq(oo, result, "msg")
				assObj.JSONEq(oo, result, "msg with arg %d", 42)
				assObj.JSONEqf(oo, result, "msg")
				assObj.JSONEqf(oo, result, "msg with arg %d", 42)

				assObj.YAMLEq(oo, result)
				assObj.YAMLEq(oo, result, "msg")
				assObj.YAMLEq(oo, result, "msg with arg %d", 42)
				assObj.YAMLEqf(oo, result, "msg")
				assObj.YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(string(DayNameMonday), result)
				assObj.JSONEq(string(DayNameMonday), result, "msg")
				assObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				assObj.JSONEqf(string(DayNameMonday), result, "msg")
				assObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				assObj.YAMLEq(string(DayNameMonday), result)
				assObj.YAMLEq(string(DayNameMonday), result, "msg")
				assObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				assObj.YAMLEqf(string(DayNameMonday), result, "msg")
				assObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(expected, result)
				assObj.JSONEq(expected, result, "msg")
				assObj.JSONEq(expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(expected, result, "msg")
				assObj.JSONEqf(expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(expected, result)
				assObj.YAMLEq(expected, result, "msg")
				assObj.YAMLEq(expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(expected, result, "msg")
				assObj.YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(tt.expected, result)
				assObj.JSONEq(tt.expected, result, "msg")
				assObj.JSONEq(tt.expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(tt.expected, result, "msg")
				assObj.JSONEqf(tt.expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(tt.expected, result)
				assObj.YAMLEq(tt.expected, result, "msg")
				assObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(tt.expected, result, "msg")
				assObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				assObj.JSONEq(ttp.expected, result)
				assObj.JSONEq(ttp.expected, result, "msg")
				assObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)
				assObj.JSONEqf(ttp.expected, result, "msg")
				assObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				assObj.YAMLEq(ttp.expected, result)
				assObj.YAMLEq(ttp.expected, result, "msg")
				assObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				assObj.YAMLEqf(ttp.expected, result, "msg")
				assObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				s.Require().JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				s.Require().JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				s.Require().YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				s.Require().YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				s.Require().JSONEq("string", result)
				s.Require().JSONEq("string", result, "msg")
				s.Require().JSONEq("string", result, "msg with arg %d", 42)
				s.Require().JSONEqf("string", result, "msg")
				s.Require().JSONEqf("string", result, "msg with arg %d", 42)

				s.Require().YAMLEq("string", result)
				s.Require().YAMLEq("string", result, "msg")
				s.Require().YAMLEq("string", result, "msg with arg %d", 42)
				s.Require().YAMLEqf("string", result, "msg")
				s.Require().YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(o, result)
				s.Require().JSONEq(o, result, "msg")
				s.Require().JSONEq(o, result, "msg with arg %d", 42)
				s.Require().JSONEqf(o, result, "msg")
				s.Require().JSONEqf(o, result, "msg with arg %d", 42)

				s.Require().YAMLEq(o, result)
				s.Require().YAMLEq(o, result, "msg")
				s.Require().YAMLEq(o, result, "msg with arg %d", 42)
				s.Require().YAMLEqf(o, result, "msg")
				s.Require().YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(oo, result)
				s.Require().JSONEq(oo, result, "msg")
				s.Require().JSONEq(oo, result, "msg with arg %d", 42)
				s.Require().JSONEqf(oo, result, "msg")
				s.Require().JSONEqf(oo, result, "msg with arg %d", 42)

				s.Require().YAMLEq(oo, result)
				s.Require().YAMLEq(oo, result, "msg")
				s.Require().YAMLEq(oo, result, "msg with arg %d", 42)
				s.Require().YAMLEqf(oo, result, "msg")
				s.Require().YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(string(DayNameMonday), result)
				s.Require().JSONEq(string(DayNameMonday), result, "msg")
				s.Require().JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.Require().JSONEqf(string(DayNameMonday), result, "msg")
				s.Require().JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				s.Require().YAMLEq(string(DayNameMonday), result)
				s.Require().YAMLEq(string(DayNameMonday), result, "msg")
				s.Require().YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				s.Require().YAMLEqf(string(DayNameMonday), result, "msg")
				s.Require().YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(expected, result)
				s.Require().JSONEq(expected, result, "msg")
				s.Require().JSONEq(expected, result, "msg with arg %d", 42)
				s.Require().JSONEqf(expected, result, "msg")
				s.Require().JSONEqf(expected, result, "msg with arg %d", 42)

				s.Require().YAMLEq(expected, result)
				s.Require().YAMLEq(expected, result, "msg")
				s.Require().YAMLEq(expected, result, "msg with arg %d", 42)
				s.Require().YAMLEqf(expected, result, "msg")
				s.Require().YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(tt.expected, result)
				s.Require().JSONEq(tt.expected, result, "msg")
				s.Require().JSONEq(tt.expected, result, "msg with arg %d", 42)
				s.Require().JSONEqf(tt.expected, result, "msg")
				s.Require().JSONEqf(tt.expected, result, "msg with arg %d", 42)

				s.Require().YAMLEq(tt.expected, result)
				s.Require().YAMLEq(tt.expected, result, "msg")
				s.Require().YAMLEq(tt.expected, result, "msg with arg %d", 42)
				s.Require().YAMLEqf(tt.expected, result, "msg")
				s.Require().YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				s.Require().JSONEq(ttp.expected, result)
				s.Require().JSONEq(ttp.expected, result, "msg")
				s.Require().JSONEq(ttp.expected, result, "msg with arg %d", 42)
				s.Require().JSONEqf(ttp.expected, result, "msg")
				s.Require().JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				s.Require().YAMLEq(ttp.expected, result)
				s.Require().YAMLEq(ttp.expected, result, "msg")
				s.Require().YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				s.Require().YAMLEqf(ttp.expected, result, "msg")
				s.Require().YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}

		{
			{
				reqObj.JSONEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq("string", result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq("string", result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq("string", result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf("string", result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf("string", result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(o, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(o, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(o, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(o, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(o, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(oo, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(oo, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(oo, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(oo, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(oo, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(string(DayNameMonday), result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(string(DayNameMonday), result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(tt.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(tt.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(tt.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			{
				reqObj.JSONEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"

				reqObj.YAMLEq(ttp.expected, result)                         // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(ttp.expected, result, "msg")                  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)  // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(ttp.expected, result, "msg")                 // want "expected-actual: need to reverse actual and expected values"
				reqObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42) // want "expected-actual: need to reverse actual and expected values"
			}

			// Valid.

			{
				reqObj.JSONEq("string", result)
				reqObj.JSONEq("string", result, "msg")
				reqObj.JSONEq("string", result, "msg with arg %d", 42)
				reqObj.JSONEqf("string", result, "msg")
				reqObj.JSONEqf("string", result, "msg with arg %d", 42)

				reqObj.YAMLEq("string", result)
				reqObj.YAMLEq("string", result, "msg")
				reqObj.YAMLEq("string", result, "msg with arg %d", 42)
				reqObj.YAMLEqf("string", result, "msg")
				reqObj.YAMLEqf("string", result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(o, result)
				reqObj.JSONEq(o, result, "msg")
				reqObj.JSONEq(o, result, "msg with arg %d", 42)
				reqObj.JSONEqf(o, result, "msg")
				reqObj.JSONEqf(o, result, "msg with arg %d", 42)

				reqObj.YAMLEq(o, result)
				reqObj.YAMLEq(o, result, "msg")
				reqObj.YAMLEq(o, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(o, result, "msg")
				reqObj.YAMLEqf(o, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(oo, result)
				reqObj.JSONEq(oo, result, "msg")
				reqObj.JSONEq(oo, result, "msg with arg %d", 42)
				reqObj.JSONEqf(oo, result, "msg")
				reqObj.JSONEqf(oo, result, "msg with arg %d", 42)

				reqObj.YAMLEq(oo, result)
				reqObj.YAMLEq(oo, result, "msg")
				reqObj.YAMLEq(oo, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(oo, result, "msg")
				reqObj.YAMLEqf(oo, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(string(DayNameMonday), result)
				reqObj.JSONEq(string(DayNameMonday), result, "msg")
				reqObj.JSONEq(string(DayNameMonday), result, "msg with arg %d", 42)
				reqObj.JSONEqf(string(DayNameMonday), result, "msg")
				reqObj.JSONEqf(string(DayNameMonday), result, "msg with arg %d", 42)

				reqObj.YAMLEq(string(DayNameMonday), result)
				reqObj.YAMLEq(string(DayNameMonday), result, "msg")
				reqObj.YAMLEq(string(DayNameMonday), result, "msg with arg %d", 42)
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg")
				reqObj.YAMLEqf(string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(expected, result)
				reqObj.JSONEq(expected, result, "msg")
				reqObj.JSONEq(expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(expected, result, "msg")
				reqObj.JSONEqf(expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(expected, result)
				reqObj.YAMLEq(expected, result, "msg")
				reqObj.YAMLEq(expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(expected, result, "msg")
				reqObj.YAMLEqf(expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(tt.expected, result)
				reqObj.JSONEq(tt.expected, result, "msg")
				reqObj.JSONEq(tt.expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(tt.expected, result, "msg")
				reqObj.JSONEqf(tt.expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(tt.expected, result)
				reqObj.YAMLEq(tt.expected, result, "msg")
				reqObj.YAMLEq(tt.expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(tt.expected, result, "msg")
				reqObj.YAMLEqf(tt.expected, result, "msg with arg %d", 42)
			}

			{
				reqObj.JSONEq(ttp.expected, result)
				reqObj.JSONEq(ttp.expected, result, "msg")
				reqObj.JSONEq(ttp.expected, result, "msg with arg %d", 42)
				reqObj.JSONEqf(ttp.expected, result, "msg")
				reqObj.JSONEqf(ttp.expected, result, "msg with arg %d", 42)

				reqObj.YAMLEq(ttp.expected, result)
				reqObj.YAMLEq(ttp.expected, result, "msg")
				reqObj.YAMLEq(ttp.expected, result, "msg with arg %d", 42)
				reqObj.YAMLEqf(ttp.expected, result, "msg")
				reqObj.YAMLEqf(ttp.expected, result, "msg with arg %d", 42)
			}
		}
	}
}
