// Code generated by testifylint/internal/cmd/testgen. DO NOT EDIT.

package basic

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConfusedWithExpectedActual(t *testing.T) {
	var result string

	const (
		a = uint(11)
		b = uint8(12)
		c = uint16(13)
		d = uint32(14)
		e = uint64(15)

		f = int(21)
		g = int8(22)
		h = int16(23)
		i = int32(24)
		j = int64(25)

		k = float32(31.)
		l = float64(32.)

		m = complex64(41 - 0.707i)
		n = complex128(42 - 0.707i)

		o = "string"
		p = 'r'
	)

	const (
		aa uint   = 11
		bb uint8  = 12
		cc uint16 = 13
		dd uint32 = 14
		ee uint64 = 15

		ff int   = 21
		gg int8  = 22
		hh int16 = 23
		ii int32 = 24
		jj int64 = 25

		kk float32 = 31.
		ll float64 = 32.

		mm complex64  = 41 - 0.707i
		nn complex128 = 42 - 0.707i

		oo string = "string"
		pp rune   = 'r'
	)

	const (
		Sunday = iota
		Monday
	)

	type Day int
	const (
		DaySunday = iota
		DayMonday
	)

	type DayName string
	const DayNameMonday DayName = "Monday"

	var expected string
	var tt struct{ expected string }
	ttp := &struct{ expected string }{}

	t.Run("assert", func(t *testing.T) {
		{
			{
				assert.Equal(t, result, uint(11))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint(11), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint(11), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint(11), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint(11), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, uint(11))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint(11), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint(11), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint(11), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint(11), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, uint8(12))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint8(12), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint8(12), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint8(12), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint8(12), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, uint8(12))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint8(12), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint8(12), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint8(12), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint8(12), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, uint16(13))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint16(13), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint16(13), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint16(13), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint16(13), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, uint16(13))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint16(13), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint16(13), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint16(13), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint16(13), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, uint32(14))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint32(14), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint32(14), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint32(14), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint32(14), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, uint32(14))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint32(14), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint32(14), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint32(14), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint32(14), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, uint64(15))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint64(15), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, uint64(15), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint64(15), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, uint64(15), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, uint64(15))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint64(15), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, uint64(15), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint64(15), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, uint64(15), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, 21)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, 21, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, 21, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, 21, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, 21, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, 21)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, 21, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, 21, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, 21, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, 21, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, int8(22))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, int8(22), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, int8(22), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int8(22), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int8(22), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, int8(22))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int8(22), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int8(22), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int8(22), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int8(22), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, int16(23))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, int16(23), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, int16(23), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int16(23), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int16(23), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, int16(23))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int16(23), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int16(23), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int16(23), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int16(23), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, int32(24))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, int32(24), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, int32(24), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int32(24), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int32(24), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, int32(24))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int32(24), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int32(24), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int32(24), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int32(24), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, int64(25))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, int64(25), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, int64(25), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int64(25), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, int64(25), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, int64(25))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int64(25), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, int64(25), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int64(25), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, int64(25), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, float32(31.))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, float32(31.), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, float32(31.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, float32(31.), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, float32(31.), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, float32(31.))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, float32(31.), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, float32(31.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, float32(31.), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, float32(31.), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, float64(32.))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, float64(32.), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, float64(32.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, float64(32.), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, float64(32.), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, float64(32.))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, float64(32.), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, float64(32.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, float64(32.), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, float64(32.), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, complex64(41-0.707i))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, complex64(41-0.707i), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, complex64(41-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, complex64(41-0.707i), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, complex64(41-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, complex64(41-0.707i))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, complex64(41-0.707i), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, complex64(41-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, complex64(41-0.707i), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, complex64(41-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, complex128(42-0.707i))                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, complex128(42-0.707i), "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, complex128(42-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, complex128(42-0.707i), "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, complex128(42-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, complex128(42-0.707i))                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, complex128(42-0.707i), "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, complex128(42-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, complex128(42-0.707i), "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, complex128(42-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, "string")                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, "string")                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, 'r')                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, 'r', "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, 'r', "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, 'r', "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, 'r', "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, 'r')                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, 'r', "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, 'r', "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, 'r', "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, 'r', "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, a)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, a, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, a, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, a, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, a, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, a)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, a, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, a, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, a, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, a, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, b)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, b, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, b, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, b, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, b, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, b)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, b, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, b, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, b, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, b, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, c)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, c, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, c, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, c, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, c, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, c)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, c, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, c, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, c, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, c, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, d)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, d, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, d, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, d, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, d, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, d)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, d, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, d, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, d, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, d, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, e)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, e, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, e, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, e, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, e, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, e)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, e, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, e, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, e, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, e, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, f)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, f, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, f, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, f, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, f, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, f)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, f, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, f, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, f, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, f, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, g)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, g, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, g, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, g, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, g, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, g)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, g, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, g, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, g, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, g, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, h)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, h, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, h, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, h, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, h, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, h)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, h, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, h, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, h, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, h, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, i)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, i, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, i, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, i, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, i, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, i)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, i, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, i, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, i, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, i, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, j)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, j, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, j, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, j, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, j, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, j)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, j, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, j, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, j, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, j, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, k)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, k, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, k, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, k, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, k, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, k)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, k, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, k, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, k, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, k, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, l)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, l, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, l, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, l, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, l, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, l)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, l, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, l, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, l, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, l, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, m)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, m, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, m, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, m, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, m, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, m)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, m, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, m, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, m, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, m, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, n)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, n, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, n, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, n, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, n, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, n)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, n, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, n, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, n, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, n, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, o)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, o)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, p)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, p, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, p, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, p, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, p, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, p)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, p, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, p, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, p, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, p, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, aa)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, aa, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, aa, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, aa, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, aa, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, aa)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, aa, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, aa, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, aa, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, aa, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, bb)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, bb, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, bb, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, bb, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, bb, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, bb)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, bb, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, bb, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, bb, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, bb, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, cc)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, cc, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, cc, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, cc, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, cc, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, cc)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, cc, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, cc, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, cc, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, cc, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, dd)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, dd, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, dd, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, dd, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, dd, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, dd)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, dd, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, dd, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, dd, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, dd, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, ee)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, ee, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, ee, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ee, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ee, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, ee)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ee, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ee, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ee, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ee, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, ff)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, ff, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, ff, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ff, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ff, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, ff)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ff, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ff, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ff, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ff, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, gg)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, gg, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, gg, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, gg, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, gg, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, gg)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, gg, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, gg, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, gg, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, gg, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, hh)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, hh, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, hh, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, hh, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, hh, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, hh)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, hh, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, hh, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, hh, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, hh, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, ii)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, ii, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, ii, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ii, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ii, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, ii)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ii, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ii, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ii, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ii, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, jj)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, jj, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, jj, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, jj, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, jj, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, jj)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, jj, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, jj, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, jj, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, jj, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, kk)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, kk, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, kk, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, kk, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, kk, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, kk)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, kk, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, kk, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, kk, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, kk, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, ll)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, ll, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, ll, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ll, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ll, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, ll)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ll, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ll, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ll, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ll, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, mm)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, mm, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, mm, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, mm, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, mm, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, mm)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, mm, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, mm, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, mm, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, mm, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, nn)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, nn, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, nn, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, nn, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, nn, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, nn)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, nn, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, nn, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, nn, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, nn, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, oo)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, oo)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, pp)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, pp, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, pp, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, pp, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, pp, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, pp)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, pp, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, pp, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, pp, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, pp, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, Monday)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, Monday, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, Monday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, Monday, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, Monday, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, Monday)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, Monday, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, Monday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, Monday, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, Monday, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, DayMonday)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, DayMonday, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, DayMonday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, DayMonday, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, DayMonday, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, DayMonday)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, DayMonday, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, DayMonday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, DayMonday, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, DayMonday, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, expected)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, expected)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.Equal(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				assert.Equal(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.Equal(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.Equalf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.NotEqual(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.NotEqual(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.NotEqualf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			// Valid asserts.

			{
				assert.Equal(t, uint(11), result)
				assert.Equal(t, uint(11), result, "msg")
				assert.Equal(t, uint(11), result, "msg with arg %d", 42)
				assert.Equalf(t, uint(11), result, "msg")
				assert.Equalf(t, uint(11), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint(11), result)
				assert.NotEqual(t, uint(11), result, "msg")
				assert.NotEqual(t, uint(11), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint(11), result, "msg")
				assert.NotEqualf(t, uint(11), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint8(12), result)
				assert.Equal(t, uint8(12), result, "msg")
				assert.Equal(t, uint8(12), result, "msg with arg %d", 42)
				assert.Equalf(t, uint8(12), result, "msg")
				assert.Equalf(t, uint8(12), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint8(12), result)
				assert.NotEqual(t, uint8(12), result, "msg")
				assert.NotEqual(t, uint8(12), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint8(12), result, "msg")
				assert.NotEqualf(t, uint8(12), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint16(13), result)
				assert.Equal(t, uint16(13), result, "msg")
				assert.Equal(t, uint16(13), result, "msg with arg %d", 42)
				assert.Equalf(t, uint16(13), result, "msg")
				assert.Equalf(t, uint16(13), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint16(13), result)
				assert.NotEqual(t, uint16(13), result, "msg")
				assert.NotEqual(t, uint16(13), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint16(13), result, "msg")
				assert.NotEqualf(t, uint16(13), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint32(14), result)
				assert.Equal(t, uint32(14), result, "msg")
				assert.Equal(t, uint32(14), result, "msg with arg %d", 42)
				assert.Equalf(t, uint32(14), result, "msg")
				assert.Equalf(t, uint32(14), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint32(14), result)
				assert.NotEqual(t, uint32(14), result, "msg")
				assert.NotEqual(t, uint32(14), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint32(14), result, "msg")
				assert.NotEqualf(t, uint32(14), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, uint64(15), result)
				assert.Equal(t, uint64(15), result, "msg")
				assert.Equal(t, uint64(15), result, "msg with arg %d", 42)
				assert.Equalf(t, uint64(15), result, "msg")
				assert.Equalf(t, uint64(15), result, "msg with arg %d", 42)

				assert.NotEqual(t, uint64(15), result)
				assert.NotEqual(t, uint64(15), result, "msg")
				assert.NotEqual(t, uint64(15), result, "msg with arg %d", 42)
				assert.NotEqualf(t, uint64(15), result, "msg")
				assert.NotEqualf(t, uint64(15), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, 21, result)
				assert.Equal(t, 21, result, "msg")
				assert.Equal(t, 21, result, "msg with arg %d", 42)
				assert.Equalf(t, 21, result, "msg")
				assert.Equalf(t, 21, result, "msg with arg %d", 42)

				assert.NotEqual(t, 21, result)
				assert.NotEqual(t, 21, result, "msg")
				assert.NotEqual(t, 21, result, "msg with arg %d", 42)
				assert.NotEqualf(t, 21, result, "msg")
				assert.NotEqualf(t, 21, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int8(22), result)
				assert.Equal(t, int8(22), result, "msg")
				assert.Equal(t, int8(22), result, "msg with arg %d", 42)
				assert.Equalf(t, int8(22), result, "msg")
				assert.Equalf(t, int8(22), result, "msg with arg %d", 42)

				assert.NotEqual(t, int8(22), result)
				assert.NotEqual(t, int8(22), result, "msg")
				assert.NotEqual(t, int8(22), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int8(22), result, "msg")
				assert.NotEqualf(t, int8(22), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int16(23), result)
				assert.Equal(t, int16(23), result, "msg")
				assert.Equal(t, int16(23), result, "msg with arg %d", 42)
				assert.Equalf(t, int16(23), result, "msg")
				assert.Equalf(t, int16(23), result, "msg with arg %d", 42)

				assert.NotEqual(t, int16(23), result)
				assert.NotEqual(t, int16(23), result, "msg")
				assert.NotEqual(t, int16(23), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int16(23), result, "msg")
				assert.NotEqualf(t, int16(23), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int32(24), result)
				assert.Equal(t, int32(24), result, "msg")
				assert.Equal(t, int32(24), result, "msg with arg %d", 42)
				assert.Equalf(t, int32(24), result, "msg")
				assert.Equalf(t, int32(24), result, "msg with arg %d", 42)

				assert.NotEqual(t, int32(24), result)
				assert.NotEqual(t, int32(24), result, "msg")
				assert.NotEqual(t, int32(24), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int32(24), result, "msg")
				assert.NotEqualf(t, int32(24), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, int64(25), result)
				assert.Equal(t, int64(25), result, "msg")
				assert.Equal(t, int64(25), result, "msg with arg %d", 42)
				assert.Equalf(t, int64(25), result, "msg")
				assert.Equalf(t, int64(25), result, "msg with arg %d", 42)

				assert.NotEqual(t, int64(25), result)
				assert.NotEqual(t, int64(25), result, "msg")
				assert.NotEqual(t, int64(25), result, "msg with arg %d", 42)
				assert.NotEqualf(t, int64(25), result, "msg")
				assert.NotEqualf(t, int64(25), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, float32(31.), result)
				assert.Equal(t, float32(31.), result, "msg")
				assert.Equal(t, float32(31.), result, "msg with arg %d", 42)
				assert.Equalf(t, float32(31.), result, "msg")
				assert.Equalf(t, float32(31.), result, "msg with arg %d", 42)

				assert.NotEqual(t, float32(31.), result)
				assert.NotEqual(t, float32(31.), result, "msg")
				assert.NotEqual(t, float32(31.), result, "msg with arg %d", 42)
				assert.NotEqualf(t, float32(31.), result, "msg")
				assert.NotEqualf(t, float32(31.), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, float64(32.), result)
				assert.Equal(t, float64(32.), result, "msg")
				assert.Equal(t, float64(32.), result, "msg with arg %d", 42)
				assert.Equalf(t, float64(32.), result, "msg")
				assert.Equalf(t, float64(32.), result, "msg with arg %d", 42)

				assert.NotEqual(t, float64(32.), result)
				assert.NotEqual(t, float64(32.), result, "msg")
				assert.NotEqual(t, float64(32.), result, "msg with arg %d", 42)
				assert.NotEqualf(t, float64(32.), result, "msg")
				assert.NotEqualf(t, float64(32.), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, complex64(41-0.707i), result)
				assert.Equal(t, complex64(41-0.707i), result, "msg")
				assert.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				assert.Equalf(t, complex64(41-0.707i), result, "msg")
				assert.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42)

				assert.NotEqual(t, complex64(41-0.707i), result)
				assert.NotEqual(t, complex64(41-0.707i), result, "msg")
				assert.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg")
				assert.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, complex128(42-0.707i), result)
				assert.Equal(t, complex128(42-0.707i), result, "msg")
				assert.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				assert.Equalf(t, complex128(42-0.707i), result, "msg")
				assert.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42)

				assert.NotEqual(t, complex128(42-0.707i), result)
				assert.NotEqual(t, complex128(42-0.707i), result, "msg")
				assert.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg")
				assert.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, "string", result)
				assert.Equal(t, "string", result, "msg")
				assert.Equal(t, "string", result, "msg with arg %d", 42)
				assert.Equalf(t, "string", result, "msg")
				assert.Equalf(t, "string", result, "msg with arg %d", 42)

				assert.NotEqual(t, "string", result)
				assert.NotEqual(t, "string", result, "msg")
				assert.NotEqual(t, "string", result, "msg with arg %d", 42)
				assert.NotEqualf(t, "string", result, "msg")
				assert.NotEqualf(t, "string", result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, 'r', result)
				assert.Equal(t, 'r', result, "msg")
				assert.Equal(t, 'r', result, "msg with arg %d", 42)
				assert.Equalf(t, 'r', result, "msg")
				assert.Equalf(t, 'r', result, "msg with arg %d", 42)

				assert.NotEqual(t, 'r', result)
				assert.NotEqual(t, 'r', result, "msg")
				assert.NotEqual(t, 'r', result, "msg with arg %d", 42)
				assert.NotEqualf(t, 'r', result, "msg")
				assert.NotEqualf(t, 'r', result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, a, result)
				assert.Equal(t, a, result, "msg")
				assert.Equal(t, a, result, "msg with arg %d", 42)
				assert.Equalf(t, a, result, "msg")
				assert.Equalf(t, a, result, "msg with arg %d", 42)

				assert.NotEqual(t, a, result)
				assert.NotEqual(t, a, result, "msg")
				assert.NotEqual(t, a, result, "msg with arg %d", 42)
				assert.NotEqualf(t, a, result, "msg")
				assert.NotEqualf(t, a, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, b, result)
				assert.Equal(t, b, result, "msg")
				assert.Equal(t, b, result, "msg with arg %d", 42)
				assert.Equalf(t, b, result, "msg")
				assert.Equalf(t, b, result, "msg with arg %d", 42)

				assert.NotEqual(t, b, result)
				assert.NotEqual(t, b, result, "msg")
				assert.NotEqual(t, b, result, "msg with arg %d", 42)
				assert.NotEqualf(t, b, result, "msg")
				assert.NotEqualf(t, b, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, c, result)
				assert.Equal(t, c, result, "msg")
				assert.Equal(t, c, result, "msg with arg %d", 42)
				assert.Equalf(t, c, result, "msg")
				assert.Equalf(t, c, result, "msg with arg %d", 42)

				assert.NotEqual(t, c, result)
				assert.NotEqual(t, c, result, "msg")
				assert.NotEqual(t, c, result, "msg with arg %d", 42)
				assert.NotEqualf(t, c, result, "msg")
				assert.NotEqualf(t, c, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, d, result)
				assert.Equal(t, d, result, "msg")
				assert.Equal(t, d, result, "msg with arg %d", 42)
				assert.Equalf(t, d, result, "msg")
				assert.Equalf(t, d, result, "msg with arg %d", 42)

				assert.NotEqual(t, d, result)
				assert.NotEqual(t, d, result, "msg")
				assert.NotEqual(t, d, result, "msg with arg %d", 42)
				assert.NotEqualf(t, d, result, "msg")
				assert.NotEqualf(t, d, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, e, result)
				assert.Equal(t, e, result, "msg")
				assert.Equal(t, e, result, "msg with arg %d", 42)
				assert.Equalf(t, e, result, "msg")
				assert.Equalf(t, e, result, "msg with arg %d", 42)

				assert.NotEqual(t, e, result)
				assert.NotEqual(t, e, result, "msg")
				assert.NotEqual(t, e, result, "msg with arg %d", 42)
				assert.NotEqualf(t, e, result, "msg")
				assert.NotEqualf(t, e, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, f, result)
				assert.Equal(t, f, result, "msg")
				assert.Equal(t, f, result, "msg with arg %d", 42)
				assert.Equalf(t, f, result, "msg")
				assert.Equalf(t, f, result, "msg with arg %d", 42)

				assert.NotEqual(t, f, result)
				assert.NotEqual(t, f, result, "msg")
				assert.NotEqual(t, f, result, "msg with arg %d", 42)
				assert.NotEqualf(t, f, result, "msg")
				assert.NotEqualf(t, f, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, g, result)
				assert.Equal(t, g, result, "msg")
				assert.Equal(t, g, result, "msg with arg %d", 42)
				assert.Equalf(t, g, result, "msg")
				assert.Equalf(t, g, result, "msg with arg %d", 42)

				assert.NotEqual(t, g, result)
				assert.NotEqual(t, g, result, "msg")
				assert.NotEqual(t, g, result, "msg with arg %d", 42)
				assert.NotEqualf(t, g, result, "msg")
				assert.NotEqualf(t, g, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, h, result)
				assert.Equal(t, h, result, "msg")
				assert.Equal(t, h, result, "msg with arg %d", 42)
				assert.Equalf(t, h, result, "msg")
				assert.Equalf(t, h, result, "msg with arg %d", 42)

				assert.NotEqual(t, h, result)
				assert.NotEqual(t, h, result, "msg")
				assert.NotEqual(t, h, result, "msg with arg %d", 42)
				assert.NotEqualf(t, h, result, "msg")
				assert.NotEqualf(t, h, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, i, result)
				assert.Equal(t, i, result, "msg")
				assert.Equal(t, i, result, "msg with arg %d", 42)
				assert.Equalf(t, i, result, "msg")
				assert.Equalf(t, i, result, "msg with arg %d", 42)

				assert.NotEqual(t, i, result)
				assert.NotEqual(t, i, result, "msg")
				assert.NotEqual(t, i, result, "msg with arg %d", 42)
				assert.NotEqualf(t, i, result, "msg")
				assert.NotEqualf(t, i, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, j, result)
				assert.Equal(t, j, result, "msg")
				assert.Equal(t, j, result, "msg with arg %d", 42)
				assert.Equalf(t, j, result, "msg")
				assert.Equalf(t, j, result, "msg with arg %d", 42)

				assert.NotEqual(t, j, result)
				assert.NotEqual(t, j, result, "msg")
				assert.NotEqual(t, j, result, "msg with arg %d", 42)
				assert.NotEqualf(t, j, result, "msg")
				assert.NotEqualf(t, j, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, k, result)
				assert.Equal(t, k, result, "msg")
				assert.Equal(t, k, result, "msg with arg %d", 42)
				assert.Equalf(t, k, result, "msg")
				assert.Equalf(t, k, result, "msg with arg %d", 42)

				assert.NotEqual(t, k, result)
				assert.NotEqual(t, k, result, "msg")
				assert.NotEqual(t, k, result, "msg with arg %d", 42)
				assert.NotEqualf(t, k, result, "msg")
				assert.NotEqualf(t, k, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, l, result)
				assert.Equal(t, l, result, "msg")
				assert.Equal(t, l, result, "msg with arg %d", 42)
				assert.Equalf(t, l, result, "msg")
				assert.Equalf(t, l, result, "msg with arg %d", 42)

				assert.NotEqual(t, l, result)
				assert.NotEqual(t, l, result, "msg")
				assert.NotEqual(t, l, result, "msg with arg %d", 42)
				assert.NotEqualf(t, l, result, "msg")
				assert.NotEqualf(t, l, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, m, result)
				assert.Equal(t, m, result, "msg")
				assert.Equal(t, m, result, "msg with arg %d", 42)
				assert.Equalf(t, m, result, "msg")
				assert.Equalf(t, m, result, "msg with arg %d", 42)

				assert.NotEqual(t, m, result)
				assert.NotEqual(t, m, result, "msg")
				assert.NotEqual(t, m, result, "msg with arg %d", 42)
				assert.NotEqualf(t, m, result, "msg")
				assert.NotEqualf(t, m, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, n, result)
				assert.Equal(t, n, result, "msg")
				assert.Equal(t, n, result, "msg with arg %d", 42)
				assert.Equalf(t, n, result, "msg")
				assert.Equalf(t, n, result, "msg with arg %d", 42)

				assert.NotEqual(t, n, result)
				assert.NotEqual(t, n, result, "msg")
				assert.NotEqual(t, n, result, "msg with arg %d", 42)
				assert.NotEqualf(t, n, result, "msg")
				assert.NotEqualf(t, n, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, o, result)
				assert.Equal(t, o, result, "msg")
				assert.Equal(t, o, result, "msg with arg %d", 42)
				assert.Equalf(t, o, result, "msg")
				assert.Equalf(t, o, result, "msg with arg %d", 42)

				assert.NotEqual(t, o, result)
				assert.NotEqual(t, o, result, "msg")
				assert.NotEqual(t, o, result, "msg with arg %d", 42)
				assert.NotEqualf(t, o, result, "msg")
				assert.NotEqualf(t, o, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, p, result)
				assert.Equal(t, p, result, "msg")
				assert.Equal(t, p, result, "msg with arg %d", 42)
				assert.Equalf(t, p, result, "msg")
				assert.Equalf(t, p, result, "msg with arg %d", 42)

				assert.NotEqual(t, p, result)
				assert.NotEqual(t, p, result, "msg")
				assert.NotEqual(t, p, result, "msg with arg %d", 42)
				assert.NotEqualf(t, p, result, "msg")
				assert.NotEqualf(t, p, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, aa, result)
				assert.Equal(t, aa, result, "msg")
				assert.Equal(t, aa, result, "msg with arg %d", 42)
				assert.Equalf(t, aa, result, "msg")
				assert.Equalf(t, aa, result, "msg with arg %d", 42)

				assert.NotEqual(t, aa, result)
				assert.NotEqual(t, aa, result, "msg")
				assert.NotEqual(t, aa, result, "msg with arg %d", 42)
				assert.NotEqualf(t, aa, result, "msg")
				assert.NotEqualf(t, aa, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, bb, result)
				assert.Equal(t, bb, result, "msg")
				assert.Equal(t, bb, result, "msg with arg %d", 42)
				assert.Equalf(t, bb, result, "msg")
				assert.Equalf(t, bb, result, "msg with arg %d", 42)

				assert.NotEqual(t, bb, result)
				assert.NotEqual(t, bb, result, "msg")
				assert.NotEqual(t, bb, result, "msg with arg %d", 42)
				assert.NotEqualf(t, bb, result, "msg")
				assert.NotEqualf(t, bb, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, cc, result)
				assert.Equal(t, cc, result, "msg")
				assert.Equal(t, cc, result, "msg with arg %d", 42)
				assert.Equalf(t, cc, result, "msg")
				assert.Equalf(t, cc, result, "msg with arg %d", 42)

				assert.NotEqual(t, cc, result)
				assert.NotEqual(t, cc, result, "msg")
				assert.NotEqual(t, cc, result, "msg with arg %d", 42)
				assert.NotEqualf(t, cc, result, "msg")
				assert.NotEqualf(t, cc, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, dd, result)
				assert.Equal(t, dd, result, "msg")
				assert.Equal(t, dd, result, "msg with arg %d", 42)
				assert.Equalf(t, dd, result, "msg")
				assert.Equalf(t, dd, result, "msg with arg %d", 42)

				assert.NotEqual(t, dd, result)
				assert.NotEqual(t, dd, result, "msg")
				assert.NotEqual(t, dd, result, "msg with arg %d", 42)
				assert.NotEqualf(t, dd, result, "msg")
				assert.NotEqualf(t, dd, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ee, result)
				assert.Equal(t, ee, result, "msg")
				assert.Equal(t, ee, result, "msg with arg %d", 42)
				assert.Equalf(t, ee, result, "msg")
				assert.Equalf(t, ee, result, "msg with arg %d", 42)

				assert.NotEqual(t, ee, result)
				assert.NotEqual(t, ee, result, "msg")
				assert.NotEqual(t, ee, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ee, result, "msg")
				assert.NotEqualf(t, ee, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ff, result)
				assert.Equal(t, ff, result, "msg")
				assert.Equal(t, ff, result, "msg with arg %d", 42)
				assert.Equalf(t, ff, result, "msg")
				assert.Equalf(t, ff, result, "msg with arg %d", 42)

				assert.NotEqual(t, ff, result)
				assert.NotEqual(t, ff, result, "msg")
				assert.NotEqual(t, ff, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ff, result, "msg")
				assert.NotEqualf(t, ff, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, gg, result)
				assert.Equal(t, gg, result, "msg")
				assert.Equal(t, gg, result, "msg with arg %d", 42)
				assert.Equalf(t, gg, result, "msg")
				assert.Equalf(t, gg, result, "msg with arg %d", 42)

				assert.NotEqual(t, gg, result)
				assert.NotEqual(t, gg, result, "msg")
				assert.NotEqual(t, gg, result, "msg with arg %d", 42)
				assert.NotEqualf(t, gg, result, "msg")
				assert.NotEqualf(t, gg, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, hh, result)
				assert.Equal(t, hh, result, "msg")
				assert.Equal(t, hh, result, "msg with arg %d", 42)
				assert.Equalf(t, hh, result, "msg")
				assert.Equalf(t, hh, result, "msg with arg %d", 42)

				assert.NotEqual(t, hh, result)
				assert.NotEqual(t, hh, result, "msg")
				assert.NotEqual(t, hh, result, "msg with arg %d", 42)
				assert.NotEqualf(t, hh, result, "msg")
				assert.NotEqualf(t, hh, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ii, result)
				assert.Equal(t, ii, result, "msg")
				assert.Equal(t, ii, result, "msg with arg %d", 42)
				assert.Equalf(t, ii, result, "msg")
				assert.Equalf(t, ii, result, "msg with arg %d", 42)

				assert.NotEqual(t, ii, result)
				assert.NotEqual(t, ii, result, "msg")
				assert.NotEqual(t, ii, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ii, result, "msg")
				assert.NotEqualf(t, ii, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, jj, result)
				assert.Equal(t, jj, result, "msg")
				assert.Equal(t, jj, result, "msg with arg %d", 42)
				assert.Equalf(t, jj, result, "msg")
				assert.Equalf(t, jj, result, "msg with arg %d", 42)

				assert.NotEqual(t, jj, result)
				assert.NotEqual(t, jj, result, "msg")
				assert.NotEqual(t, jj, result, "msg with arg %d", 42)
				assert.NotEqualf(t, jj, result, "msg")
				assert.NotEqualf(t, jj, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, kk, result)
				assert.Equal(t, kk, result, "msg")
				assert.Equal(t, kk, result, "msg with arg %d", 42)
				assert.Equalf(t, kk, result, "msg")
				assert.Equalf(t, kk, result, "msg with arg %d", 42)

				assert.NotEqual(t, kk, result)
				assert.NotEqual(t, kk, result, "msg")
				assert.NotEqual(t, kk, result, "msg with arg %d", 42)
				assert.NotEqualf(t, kk, result, "msg")
				assert.NotEqualf(t, kk, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ll, result)
				assert.Equal(t, ll, result, "msg")
				assert.Equal(t, ll, result, "msg with arg %d", 42)
				assert.Equalf(t, ll, result, "msg")
				assert.Equalf(t, ll, result, "msg with arg %d", 42)

				assert.NotEqual(t, ll, result)
				assert.NotEqual(t, ll, result, "msg")
				assert.NotEqual(t, ll, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ll, result, "msg")
				assert.NotEqualf(t, ll, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, mm, result)
				assert.Equal(t, mm, result, "msg")
				assert.Equal(t, mm, result, "msg with arg %d", 42)
				assert.Equalf(t, mm, result, "msg")
				assert.Equalf(t, mm, result, "msg with arg %d", 42)

				assert.NotEqual(t, mm, result)
				assert.NotEqual(t, mm, result, "msg")
				assert.NotEqual(t, mm, result, "msg with arg %d", 42)
				assert.NotEqualf(t, mm, result, "msg")
				assert.NotEqualf(t, mm, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, nn, result)
				assert.Equal(t, nn, result, "msg")
				assert.Equal(t, nn, result, "msg with arg %d", 42)
				assert.Equalf(t, nn, result, "msg")
				assert.Equalf(t, nn, result, "msg with arg %d", 42)

				assert.NotEqual(t, nn, result)
				assert.NotEqual(t, nn, result, "msg")
				assert.NotEqual(t, nn, result, "msg with arg %d", 42)
				assert.NotEqualf(t, nn, result, "msg")
				assert.NotEqualf(t, nn, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, oo, result)
				assert.Equal(t, oo, result, "msg")
				assert.Equal(t, oo, result, "msg with arg %d", 42)
				assert.Equalf(t, oo, result, "msg")
				assert.Equalf(t, oo, result, "msg with arg %d", 42)

				assert.NotEqual(t, oo, result)
				assert.NotEqual(t, oo, result, "msg")
				assert.NotEqual(t, oo, result, "msg with arg %d", 42)
				assert.NotEqualf(t, oo, result, "msg")
				assert.NotEqualf(t, oo, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, pp, result)
				assert.Equal(t, pp, result, "msg")
				assert.Equal(t, pp, result, "msg with arg %d", 42)
				assert.Equalf(t, pp, result, "msg")
				assert.Equalf(t, pp, result, "msg with arg %d", 42)

				assert.NotEqual(t, pp, result)
				assert.NotEqual(t, pp, result, "msg")
				assert.NotEqual(t, pp, result, "msg with arg %d", 42)
				assert.NotEqualf(t, pp, result, "msg")
				assert.NotEqualf(t, pp, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, Monday, result)
				assert.Equal(t, Monday, result, "msg")
				assert.Equal(t, Monday, result, "msg with arg %d", 42)
				assert.Equalf(t, Monday, result, "msg")
				assert.Equalf(t, Monday, result, "msg with arg %d", 42)

				assert.NotEqual(t, Monday, result)
				assert.NotEqual(t, Monday, result, "msg")
				assert.NotEqual(t, Monday, result, "msg with arg %d", 42)
				assert.NotEqualf(t, Monday, result, "msg")
				assert.NotEqualf(t, Monday, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, DayMonday, result)
				assert.Equal(t, DayMonday, result, "msg")
				assert.Equal(t, DayMonday, result, "msg with arg %d", 42)
				assert.Equalf(t, DayMonday, result, "msg")
				assert.Equalf(t, DayMonday, result, "msg with arg %d", 42)

				assert.NotEqual(t, DayMonday, result)
				assert.NotEqual(t, DayMonday, result, "msg")
				assert.NotEqual(t, DayMonday, result, "msg with arg %d", 42)
				assert.NotEqualf(t, DayMonday, result, "msg")
				assert.NotEqualf(t, DayMonday, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, expected, result)
				assert.Equal(t, expected, result, "msg")
				assert.Equal(t, expected, result, "msg with arg %d", 42)
				assert.Equalf(t, expected, result, "msg")
				assert.Equalf(t, expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, expected, result)
				assert.NotEqual(t, expected, result, "msg")
				assert.NotEqual(t, expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, expected, result, "msg")
				assert.NotEqualf(t, expected, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, tt.expected, result)
				assert.Equal(t, tt.expected, result, "msg")
				assert.Equal(t, tt.expected, result, "msg with arg %d", 42)
				assert.Equalf(t, tt.expected, result, "msg")
				assert.Equalf(t, tt.expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, tt.expected, result)
				assert.NotEqual(t, tt.expected, result, "msg")
				assert.NotEqual(t, tt.expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, tt.expected, result, "msg")
				assert.NotEqualf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				assert.Equal(t, ttp.expected, result)
				assert.Equal(t, ttp.expected, result, "msg")
				assert.Equal(t, ttp.expected, result, "msg with arg %d", 42)
				assert.Equalf(t, ttp.expected, result, "msg")
				assert.Equalf(t, ttp.expected, result, "msg with arg %d", 42)

				assert.NotEqual(t, ttp.expected, result)
				assert.NotEqual(t, ttp.expected, result, "msg")
				assert.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)
				assert.NotEqualf(t, ttp.expected, result, "msg")
				assert.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.

		{
			{
				assert.JSONEq(t, result, "string")                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, "string")                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, o)                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, o)                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, oo)                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, oo)                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, string(DayNameMonday))                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, string(DayNameMonday), "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, string(DayNameMonday), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, string(DayNameMonday), "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, string(DayNameMonday), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, string(DayNameMonday))                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, string(DayNameMonday), "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, string(DayNameMonday), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, string(DayNameMonday), "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, string(DayNameMonday), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, expected)                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, expected)                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				assert.JSONEq(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.JSONEq(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.JSONEqf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				assert.YAMLEq(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				assert.YAMLEq(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				assert.YAMLEqf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			// Valid asserts.

			{
				assert.JSONEq(t, "string", result)
				assert.JSONEq(t, "string", result, "msg")
				assert.JSONEq(t, "string", result, "msg with arg %d", 42)
				assert.JSONEqf(t, "string", result, "msg")
				assert.JSONEqf(t, "string", result, "msg with arg %d", 42)

				assert.YAMLEq(t, "string", result)
				assert.YAMLEq(t, "string", result, "msg")
				assert.YAMLEq(t, "string", result, "msg with arg %d", 42)
				assert.YAMLEqf(t, "string", result, "msg")
				assert.YAMLEqf(t, "string", result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, o, result)
				assert.JSONEq(t, o, result, "msg")
				assert.JSONEq(t, o, result, "msg with arg %d", 42)
				assert.JSONEqf(t, o, result, "msg")
				assert.JSONEqf(t, o, result, "msg with arg %d", 42)

				assert.YAMLEq(t, o, result)
				assert.YAMLEq(t, o, result, "msg")
				assert.YAMLEq(t, o, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, o, result, "msg")
				assert.YAMLEqf(t, o, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, oo, result)
				assert.JSONEq(t, oo, result, "msg")
				assert.JSONEq(t, oo, result, "msg with arg %d", 42)
				assert.JSONEqf(t, oo, result, "msg")
				assert.JSONEqf(t, oo, result, "msg with arg %d", 42)

				assert.YAMLEq(t, oo, result)
				assert.YAMLEq(t, oo, result, "msg")
				assert.YAMLEq(t, oo, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, oo, result, "msg")
				assert.YAMLEqf(t, oo, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, string(DayNameMonday), result)
				assert.JSONEq(t, string(DayNameMonday), result, "msg")
				assert.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				assert.JSONEqf(t, string(DayNameMonday), result, "msg")
				assert.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)

				assert.YAMLEq(t, string(DayNameMonday), result)
				assert.YAMLEq(t, string(DayNameMonday), result, "msg")
				assert.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg")
				assert.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, expected, result)
				assert.JSONEq(t, expected, result, "msg")
				assert.JSONEq(t, expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, expected, result, "msg")
				assert.JSONEqf(t, expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, expected, result)
				assert.YAMLEq(t, expected, result, "msg")
				assert.YAMLEq(t, expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, expected, result, "msg")
				assert.YAMLEqf(t, expected, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, tt.expected, result)
				assert.JSONEq(t, tt.expected, result, "msg")
				assert.JSONEq(t, tt.expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, tt.expected, result, "msg")
				assert.JSONEqf(t, tt.expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, tt.expected, result)
				assert.YAMLEq(t, tt.expected, result, "msg")
				assert.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, tt.expected, result, "msg")
				assert.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				assert.JSONEq(t, ttp.expected, result)
				assert.JSONEq(t, ttp.expected, result, "msg")
				assert.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)
				assert.JSONEqf(t, ttp.expected, result, "msg")
				assert.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42)

				assert.YAMLEq(t, ttp.expected, result)
				assert.YAMLEq(t, ttp.expected, result, "msg")
				assert.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)
				assert.YAMLEqf(t, ttp.expected, result, "msg")
				assert.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})

	t.Run("require", func(t *testing.T) {
		{
			{
				require.Equal(t, result, uint(11))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, uint(11), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, uint(11), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint(11), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint(11), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, uint(11))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint(11), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint(11), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint(11), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint(11), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, uint8(12))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, uint8(12), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, uint8(12), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint8(12), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint8(12), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, uint8(12))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint8(12), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint8(12), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint8(12), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint8(12), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, uint16(13))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, uint16(13), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, uint16(13), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint16(13), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint16(13), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, uint16(13))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint16(13), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint16(13), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint16(13), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint16(13), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, uint32(14))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, uint32(14), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, uint32(14), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint32(14), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint32(14), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, uint32(14))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint32(14), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint32(14), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint32(14), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint32(14), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, uint64(15))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, uint64(15), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, uint64(15), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint64(15), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, uint64(15), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, uint64(15))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint64(15), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, uint64(15), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint64(15), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, uint64(15), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, 21)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, 21, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, 21, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, 21, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, 21, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, 21)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, 21, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, 21, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, 21, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, 21, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, int8(22))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, int8(22), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, int8(22), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, int8(22), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, int8(22), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, int8(22))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int8(22), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int8(22), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int8(22), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int8(22), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, int16(23))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, int16(23), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, int16(23), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, int16(23), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, int16(23), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, int16(23))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int16(23), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int16(23), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int16(23), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int16(23), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, int32(24))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, int32(24), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, int32(24), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, int32(24), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, int32(24), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, int32(24))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int32(24), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int32(24), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int32(24), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int32(24), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, int64(25))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, int64(25), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, int64(25), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, int64(25), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, int64(25), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, int64(25))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int64(25), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, int64(25), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int64(25), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, int64(25), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, float32(31.))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, float32(31.), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, float32(31.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, float32(31.), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, float32(31.), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, float32(31.))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, float32(31.), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, float32(31.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, float32(31.), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, float32(31.), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, float64(32.))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, float64(32.), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, float64(32.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, float64(32.), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, float64(32.), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, float64(32.))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, float64(32.), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, float64(32.), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, float64(32.), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, float64(32.), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, complex64(41-0.707i))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, complex64(41-0.707i), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, complex64(41-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, complex64(41-0.707i), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, complex64(41-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, complex64(41-0.707i))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, complex64(41-0.707i), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, complex64(41-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, complex64(41-0.707i), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, complex64(41-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, complex128(42-0.707i))                         // want "need to reverse actual and expected values"
				require.Equal(t, result, complex128(42-0.707i), "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, complex128(42-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, complex128(42-0.707i), "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, complex128(42-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, complex128(42-0.707i))                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, complex128(42-0.707i), "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, complex128(42-0.707i), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, complex128(42-0.707i), "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, complex128(42-0.707i), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, "string")                         // want "need to reverse actual and expected values"
				require.Equal(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, "string")                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, 'r')                         // want "need to reverse actual and expected values"
				require.Equal(t, result, 'r', "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, 'r', "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, 'r', "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, 'r', "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, 'r')                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, 'r', "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, 'r', "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, 'r', "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, 'r', "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, a)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, a, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, a, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, a, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, a, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, a)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, a, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, a, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, a, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, a, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, b)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, b, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, b, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, b, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, b, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, b)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, b, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, b, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, b, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, b, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, c)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, c, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, c, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, c, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, c, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, c)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, c, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, c, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, c, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, c, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, d)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, d, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, d, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, d, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, d, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, d)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, d, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, d, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, d, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, d, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, e)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, e, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, e, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, e, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, e, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, e)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, e, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, e, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, e, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, e, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, f)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, f, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, f, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, f, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, f, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, f)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, f, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, f, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, f, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, f, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, g)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, g, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, g, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, g, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, g, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, g)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, g, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, g, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, g, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, g, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, h)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, h, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, h, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, h, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, h, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, h)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, h, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, h, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, h, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, h, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, i)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, i, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, i, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, i, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, i, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, i)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, i, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, i, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, i, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, i, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, j)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, j, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, j, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, j, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, j, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, j)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, j, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, j, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, j, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, j, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, k)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, k, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, k, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, k, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, k, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, k)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, k, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, k, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, k, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, k, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, l)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, l, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, l, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, l, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, l, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, l)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, l, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, l, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, l, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, l, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, m)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, m, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, m, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, m, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, m, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, m)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, m, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, m, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, m, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, m, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, n)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, n, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, n, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, n, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, n, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, n)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, n, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, n, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, n, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, n, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, o)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, o)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, p)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, p, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, p, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, p, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, p, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, p)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, p, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, p, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, p, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, p, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, aa)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, aa, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, aa, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, aa, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, aa, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, aa)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, aa, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, aa, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, aa, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, aa, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, bb)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, bb, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, bb, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, bb, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, bb, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, bb)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, bb, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, bb, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, bb, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, bb, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, cc)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, cc, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, cc, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, cc, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, cc, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, cc)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, cc, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, cc, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, cc, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, cc, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, dd)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, dd, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, dd, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, dd, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, dd, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, dd)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, dd, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, dd, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, dd, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, dd, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, ee)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, ee, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, ee, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, ee, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, ee, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, ee)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ee, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ee, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ee, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ee, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, ff)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, ff, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, ff, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, ff, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, ff, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, ff)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ff, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ff, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ff, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ff, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, gg)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, gg, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, gg, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, gg, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, gg, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, gg)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, gg, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, gg, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, gg, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, gg, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, hh)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, hh, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, hh, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, hh, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, hh, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, hh)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, hh, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, hh, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, hh, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, hh, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, ii)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, ii, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, ii, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, ii, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, ii, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, ii)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ii, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ii, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ii, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ii, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, jj)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, jj, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, jj, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, jj, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, jj, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, jj)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, jj, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, jj, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, jj, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, jj, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, kk)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, kk, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, kk, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, kk, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, kk, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, kk)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, kk, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, kk, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, kk, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, kk, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, ll)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, ll, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, ll, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, ll, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, ll, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, ll)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ll, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ll, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ll, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ll, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, mm)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, mm, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, mm, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, mm, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, mm, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, mm)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, mm, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, mm, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, mm, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, mm, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, nn)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, nn, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, nn, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, nn, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, nn, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, nn)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, nn, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, nn, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, nn, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, nn, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, oo)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, oo)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, pp)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, pp, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, pp, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, pp, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, pp, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, pp)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, pp, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, pp, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, pp, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, pp, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, Monday)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, Monday, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, Monday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, Monday, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, Monday, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, Monday)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, Monday, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, Monday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, Monday, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, Monday, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, DayMonday)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, DayMonday, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, DayMonday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, DayMonday, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, DayMonday, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, DayMonday)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, DayMonday, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, DayMonday, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, DayMonday, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, DayMonday, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, expected)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, expected)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.Equal(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				require.Equal(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				require.Equal(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.Equalf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				require.Equalf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.NotEqual(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				require.NotEqual(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				require.NotEqualf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			// Valid requires.

			{
				require.Equal(t, uint(11), result)
				require.Equal(t, uint(11), result, "msg")
				require.Equal(t, uint(11), result, "msg with arg %d", 42)
				require.Equalf(t, uint(11), result, "msg")
				require.Equalf(t, uint(11), result, "msg with arg %d", 42)

				require.NotEqual(t, uint(11), result)
				require.NotEqual(t, uint(11), result, "msg")
				require.NotEqual(t, uint(11), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint(11), result, "msg")
				require.NotEqualf(t, uint(11), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint8(12), result)
				require.Equal(t, uint8(12), result, "msg")
				require.Equal(t, uint8(12), result, "msg with arg %d", 42)
				require.Equalf(t, uint8(12), result, "msg")
				require.Equalf(t, uint8(12), result, "msg with arg %d", 42)

				require.NotEqual(t, uint8(12), result)
				require.NotEqual(t, uint8(12), result, "msg")
				require.NotEqual(t, uint8(12), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint8(12), result, "msg")
				require.NotEqualf(t, uint8(12), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint16(13), result)
				require.Equal(t, uint16(13), result, "msg")
				require.Equal(t, uint16(13), result, "msg with arg %d", 42)
				require.Equalf(t, uint16(13), result, "msg")
				require.Equalf(t, uint16(13), result, "msg with arg %d", 42)

				require.NotEqual(t, uint16(13), result)
				require.NotEqual(t, uint16(13), result, "msg")
				require.NotEqual(t, uint16(13), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint16(13), result, "msg")
				require.NotEqualf(t, uint16(13), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint32(14), result)
				require.Equal(t, uint32(14), result, "msg")
				require.Equal(t, uint32(14), result, "msg with arg %d", 42)
				require.Equalf(t, uint32(14), result, "msg")
				require.Equalf(t, uint32(14), result, "msg with arg %d", 42)

				require.NotEqual(t, uint32(14), result)
				require.NotEqual(t, uint32(14), result, "msg")
				require.NotEqual(t, uint32(14), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint32(14), result, "msg")
				require.NotEqualf(t, uint32(14), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, uint64(15), result)
				require.Equal(t, uint64(15), result, "msg")
				require.Equal(t, uint64(15), result, "msg with arg %d", 42)
				require.Equalf(t, uint64(15), result, "msg")
				require.Equalf(t, uint64(15), result, "msg with arg %d", 42)

				require.NotEqual(t, uint64(15), result)
				require.NotEqual(t, uint64(15), result, "msg")
				require.NotEqual(t, uint64(15), result, "msg with arg %d", 42)
				require.NotEqualf(t, uint64(15), result, "msg")
				require.NotEqualf(t, uint64(15), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, 21, result)
				require.Equal(t, 21, result, "msg")
				require.Equal(t, 21, result, "msg with arg %d", 42)
				require.Equalf(t, 21, result, "msg")
				require.Equalf(t, 21, result, "msg with arg %d", 42)

				require.NotEqual(t, 21, result)
				require.NotEqual(t, 21, result, "msg")
				require.NotEqual(t, 21, result, "msg with arg %d", 42)
				require.NotEqualf(t, 21, result, "msg")
				require.NotEqualf(t, 21, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int8(22), result)
				require.Equal(t, int8(22), result, "msg")
				require.Equal(t, int8(22), result, "msg with arg %d", 42)
				require.Equalf(t, int8(22), result, "msg")
				require.Equalf(t, int8(22), result, "msg with arg %d", 42)

				require.NotEqual(t, int8(22), result)
				require.NotEqual(t, int8(22), result, "msg")
				require.NotEqual(t, int8(22), result, "msg with arg %d", 42)
				require.NotEqualf(t, int8(22), result, "msg")
				require.NotEqualf(t, int8(22), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int16(23), result)
				require.Equal(t, int16(23), result, "msg")
				require.Equal(t, int16(23), result, "msg with arg %d", 42)
				require.Equalf(t, int16(23), result, "msg")
				require.Equalf(t, int16(23), result, "msg with arg %d", 42)

				require.NotEqual(t, int16(23), result)
				require.NotEqual(t, int16(23), result, "msg")
				require.NotEqual(t, int16(23), result, "msg with arg %d", 42)
				require.NotEqualf(t, int16(23), result, "msg")
				require.NotEqualf(t, int16(23), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int32(24), result)
				require.Equal(t, int32(24), result, "msg")
				require.Equal(t, int32(24), result, "msg with arg %d", 42)
				require.Equalf(t, int32(24), result, "msg")
				require.Equalf(t, int32(24), result, "msg with arg %d", 42)

				require.NotEqual(t, int32(24), result)
				require.NotEqual(t, int32(24), result, "msg")
				require.NotEqual(t, int32(24), result, "msg with arg %d", 42)
				require.NotEqualf(t, int32(24), result, "msg")
				require.NotEqualf(t, int32(24), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, int64(25), result)
				require.Equal(t, int64(25), result, "msg")
				require.Equal(t, int64(25), result, "msg with arg %d", 42)
				require.Equalf(t, int64(25), result, "msg")
				require.Equalf(t, int64(25), result, "msg with arg %d", 42)

				require.NotEqual(t, int64(25), result)
				require.NotEqual(t, int64(25), result, "msg")
				require.NotEqual(t, int64(25), result, "msg with arg %d", 42)
				require.NotEqualf(t, int64(25), result, "msg")
				require.NotEqualf(t, int64(25), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, float32(31.), result)
				require.Equal(t, float32(31.), result, "msg")
				require.Equal(t, float32(31.), result, "msg with arg %d", 42)
				require.Equalf(t, float32(31.), result, "msg")
				require.Equalf(t, float32(31.), result, "msg with arg %d", 42)

				require.NotEqual(t, float32(31.), result)
				require.NotEqual(t, float32(31.), result, "msg")
				require.NotEqual(t, float32(31.), result, "msg with arg %d", 42)
				require.NotEqualf(t, float32(31.), result, "msg")
				require.NotEqualf(t, float32(31.), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, float64(32.), result)
				require.Equal(t, float64(32.), result, "msg")
				require.Equal(t, float64(32.), result, "msg with arg %d", 42)
				require.Equalf(t, float64(32.), result, "msg")
				require.Equalf(t, float64(32.), result, "msg with arg %d", 42)

				require.NotEqual(t, float64(32.), result)
				require.NotEqual(t, float64(32.), result, "msg")
				require.NotEqual(t, float64(32.), result, "msg with arg %d", 42)
				require.NotEqualf(t, float64(32.), result, "msg")
				require.NotEqualf(t, float64(32.), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, complex64(41-0.707i), result)
				require.Equal(t, complex64(41-0.707i), result, "msg")
				require.Equal(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				require.Equalf(t, complex64(41-0.707i), result, "msg")
				require.Equalf(t, complex64(41-0.707i), result, "msg with arg %d", 42)

				require.NotEqual(t, complex64(41-0.707i), result)
				require.NotEqual(t, complex64(41-0.707i), result, "msg")
				require.NotEqual(t, complex64(41-0.707i), result, "msg with arg %d", 42)
				require.NotEqualf(t, complex64(41-0.707i), result, "msg")
				require.NotEqualf(t, complex64(41-0.707i), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, complex128(42-0.707i), result)
				require.Equal(t, complex128(42-0.707i), result, "msg")
				require.Equal(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				require.Equalf(t, complex128(42-0.707i), result, "msg")
				require.Equalf(t, complex128(42-0.707i), result, "msg with arg %d", 42)

				require.NotEqual(t, complex128(42-0.707i), result)
				require.NotEqual(t, complex128(42-0.707i), result, "msg")
				require.NotEqual(t, complex128(42-0.707i), result, "msg with arg %d", 42)
				require.NotEqualf(t, complex128(42-0.707i), result, "msg")
				require.NotEqualf(t, complex128(42-0.707i), result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, "string", result)
				require.Equal(t, "string", result, "msg")
				require.Equal(t, "string", result, "msg with arg %d", 42)
				require.Equalf(t, "string", result, "msg")
				require.Equalf(t, "string", result, "msg with arg %d", 42)

				require.NotEqual(t, "string", result)
				require.NotEqual(t, "string", result, "msg")
				require.NotEqual(t, "string", result, "msg with arg %d", 42)
				require.NotEqualf(t, "string", result, "msg")
				require.NotEqualf(t, "string", result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, 'r', result)
				require.Equal(t, 'r', result, "msg")
				require.Equal(t, 'r', result, "msg with arg %d", 42)
				require.Equalf(t, 'r', result, "msg")
				require.Equalf(t, 'r', result, "msg with arg %d", 42)

				require.NotEqual(t, 'r', result)
				require.NotEqual(t, 'r', result, "msg")
				require.NotEqual(t, 'r', result, "msg with arg %d", 42)
				require.NotEqualf(t, 'r', result, "msg")
				require.NotEqualf(t, 'r', result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, a, result)
				require.Equal(t, a, result, "msg")
				require.Equal(t, a, result, "msg with arg %d", 42)
				require.Equalf(t, a, result, "msg")
				require.Equalf(t, a, result, "msg with arg %d", 42)

				require.NotEqual(t, a, result)
				require.NotEqual(t, a, result, "msg")
				require.NotEqual(t, a, result, "msg with arg %d", 42)
				require.NotEqualf(t, a, result, "msg")
				require.NotEqualf(t, a, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, b, result)
				require.Equal(t, b, result, "msg")
				require.Equal(t, b, result, "msg with arg %d", 42)
				require.Equalf(t, b, result, "msg")
				require.Equalf(t, b, result, "msg with arg %d", 42)

				require.NotEqual(t, b, result)
				require.NotEqual(t, b, result, "msg")
				require.NotEqual(t, b, result, "msg with arg %d", 42)
				require.NotEqualf(t, b, result, "msg")
				require.NotEqualf(t, b, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, c, result)
				require.Equal(t, c, result, "msg")
				require.Equal(t, c, result, "msg with arg %d", 42)
				require.Equalf(t, c, result, "msg")
				require.Equalf(t, c, result, "msg with arg %d", 42)

				require.NotEqual(t, c, result)
				require.NotEqual(t, c, result, "msg")
				require.NotEqual(t, c, result, "msg with arg %d", 42)
				require.NotEqualf(t, c, result, "msg")
				require.NotEqualf(t, c, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, d, result)
				require.Equal(t, d, result, "msg")
				require.Equal(t, d, result, "msg with arg %d", 42)
				require.Equalf(t, d, result, "msg")
				require.Equalf(t, d, result, "msg with arg %d", 42)

				require.NotEqual(t, d, result)
				require.NotEqual(t, d, result, "msg")
				require.NotEqual(t, d, result, "msg with arg %d", 42)
				require.NotEqualf(t, d, result, "msg")
				require.NotEqualf(t, d, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, e, result)
				require.Equal(t, e, result, "msg")
				require.Equal(t, e, result, "msg with arg %d", 42)
				require.Equalf(t, e, result, "msg")
				require.Equalf(t, e, result, "msg with arg %d", 42)

				require.NotEqual(t, e, result)
				require.NotEqual(t, e, result, "msg")
				require.NotEqual(t, e, result, "msg with arg %d", 42)
				require.NotEqualf(t, e, result, "msg")
				require.NotEqualf(t, e, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, f, result)
				require.Equal(t, f, result, "msg")
				require.Equal(t, f, result, "msg with arg %d", 42)
				require.Equalf(t, f, result, "msg")
				require.Equalf(t, f, result, "msg with arg %d", 42)

				require.NotEqual(t, f, result)
				require.NotEqual(t, f, result, "msg")
				require.NotEqual(t, f, result, "msg with arg %d", 42)
				require.NotEqualf(t, f, result, "msg")
				require.NotEqualf(t, f, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, g, result)
				require.Equal(t, g, result, "msg")
				require.Equal(t, g, result, "msg with arg %d", 42)
				require.Equalf(t, g, result, "msg")
				require.Equalf(t, g, result, "msg with arg %d", 42)

				require.NotEqual(t, g, result)
				require.NotEqual(t, g, result, "msg")
				require.NotEqual(t, g, result, "msg with arg %d", 42)
				require.NotEqualf(t, g, result, "msg")
				require.NotEqualf(t, g, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, h, result)
				require.Equal(t, h, result, "msg")
				require.Equal(t, h, result, "msg with arg %d", 42)
				require.Equalf(t, h, result, "msg")
				require.Equalf(t, h, result, "msg with arg %d", 42)

				require.NotEqual(t, h, result)
				require.NotEqual(t, h, result, "msg")
				require.NotEqual(t, h, result, "msg with arg %d", 42)
				require.NotEqualf(t, h, result, "msg")
				require.NotEqualf(t, h, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, i, result)
				require.Equal(t, i, result, "msg")
				require.Equal(t, i, result, "msg with arg %d", 42)
				require.Equalf(t, i, result, "msg")
				require.Equalf(t, i, result, "msg with arg %d", 42)

				require.NotEqual(t, i, result)
				require.NotEqual(t, i, result, "msg")
				require.NotEqual(t, i, result, "msg with arg %d", 42)
				require.NotEqualf(t, i, result, "msg")
				require.NotEqualf(t, i, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, j, result)
				require.Equal(t, j, result, "msg")
				require.Equal(t, j, result, "msg with arg %d", 42)
				require.Equalf(t, j, result, "msg")
				require.Equalf(t, j, result, "msg with arg %d", 42)

				require.NotEqual(t, j, result)
				require.NotEqual(t, j, result, "msg")
				require.NotEqual(t, j, result, "msg with arg %d", 42)
				require.NotEqualf(t, j, result, "msg")
				require.NotEqualf(t, j, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, k, result)
				require.Equal(t, k, result, "msg")
				require.Equal(t, k, result, "msg with arg %d", 42)
				require.Equalf(t, k, result, "msg")
				require.Equalf(t, k, result, "msg with arg %d", 42)

				require.NotEqual(t, k, result)
				require.NotEqual(t, k, result, "msg")
				require.NotEqual(t, k, result, "msg with arg %d", 42)
				require.NotEqualf(t, k, result, "msg")
				require.NotEqualf(t, k, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, l, result)
				require.Equal(t, l, result, "msg")
				require.Equal(t, l, result, "msg with arg %d", 42)
				require.Equalf(t, l, result, "msg")
				require.Equalf(t, l, result, "msg with arg %d", 42)

				require.NotEqual(t, l, result)
				require.NotEqual(t, l, result, "msg")
				require.NotEqual(t, l, result, "msg with arg %d", 42)
				require.NotEqualf(t, l, result, "msg")
				require.NotEqualf(t, l, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, m, result)
				require.Equal(t, m, result, "msg")
				require.Equal(t, m, result, "msg with arg %d", 42)
				require.Equalf(t, m, result, "msg")
				require.Equalf(t, m, result, "msg with arg %d", 42)

				require.NotEqual(t, m, result)
				require.NotEqual(t, m, result, "msg")
				require.NotEqual(t, m, result, "msg with arg %d", 42)
				require.NotEqualf(t, m, result, "msg")
				require.NotEqualf(t, m, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, n, result)
				require.Equal(t, n, result, "msg")
				require.Equal(t, n, result, "msg with arg %d", 42)
				require.Equalf(t, n, result, "msg")
				require.Equalf(t, n, result, "msg with arg %d", 42)

				require.NotEqual(t, n, result)
				require.NotEqual(t, n, result, "msg")
				require.NotEqual(t, n, result, "msg with arg %d", 42)
				require.NotEqualf(t, n, result, "msg")
				require.NotEqualf(t, n, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, o, result)
				require.Equal(t, o, result, "msg")
				require.Equal(t, o, result, "msg with arg %d", 42)
				require.Equalf(t, o, result, "msg")
				require.Equalf(t, o, result, "msg with arg %d", 42)

				require.NotEqual(t, o, result)
				require.NotEqual(t, o, result, "msg")
				require.NotEqual(t, o, result, "msg with arg %d", 42)
				require.NotEqualf(t, o, result, "msg")
				require.NotEqualf(t, o, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, p, result)
				require.Equal(t, p, result, "msg")
				require.Equal(t, p, result, "msg with arg %d", 42)
				require.Equalf(t, p, result, "msg")
				require.Equalf(t, p, result, "msg with arg %d", 42)

				require.NotEqual(t, p, result)
				require.NotEqual(t, p, result, "msg")
				require.NotEqual(t, p, result, "msg with arg %d", 42)
				require.NotEqualf(t, p, result, "msg")
				require.NotEqualf(t, p, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, aa, result)
				require.Equal(t, aa, result, "msg")
				require.Equal(t, aa, result, "msg with arg %d", 42)
				require.Equalf(t, aa, result, "msg")
				require.Equalf(t, aa, result, "msg with arg %d", 42)

				require.NotEqual(t, aa, result)
				require.NotEqual(t, aa, result, "msg")
				require.NotEqual(t, aa, result, "msg with arg %d", 42)
				require.NotEqualf(t, aa, result, "msg")
				require.NotEqualf(t, aa, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, bb, result)
				require.Equal(t, bb, result, "msg")
				require.Equal(t, bb, result, "msg with arg %d", 42)
				require.Equalf(t, bb, result, "msg")
				require.Equalf(t, bb, result, "msg with arg %d", 42)

				require.NotEqual(t, bb, result)
				require.NotEqual(t, bb, result, "msg")
				require.NotEqual(t, bb, result, "msg with arg %d", 42)
				require.NotEqualf(t, bb, result, "msg")
				require.NotEqualf(t, bb, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, cc, result)
				require.Equal(t, cc, result, "msg")
				require.Equal(t, cc, result, "msg with arg %d", 42)
				require.Equalf(t, cc, result, "msg")
				require.Equalf(t, cc, result, "msg with arg %d", 42)

				require.NotEqual(t, cc, result)
				require.NotEqual(t, cc, result, "msg")
				require.NotEqual(t, cc, result, "msg with arg %d", 42)
				require.NotEqualf(t, cc, result, "msg")
				require.NotEqualf(t, cc, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, dd, result)
				require.Equal(t, dd, result, "msg")
				require.Equal(t, dd, result, "msg with arg %d", 42)
				require.Equalf(t, dd, result, "msg")
				require.Equalf(t, dd, result, "msg with arg %d", 42)

				require.NotEqual(t, dd, result)
				require.NotEqual(t, dd, result, "msg")
				require.NotEqual(t, dd, result, "msg with arg %d", 42)
				require.NotEqualf(t, dd, result, "msg")
				require.NotEqualf(t, dd, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ee, result)
				require.Equal(t, ee, result, "msg")
				require.Equal(t, ee, result, "msg with arg %d", 42)
				require.Equalf(t, ee, result, "msg")
				require.Equalf(t, ee, result, "msg with arg %d", 42)

				require.NotEqual(t, ee, result)
				require.NotEqual(t, ee, result, "msg")
				require.NotEqual(t, ee, result, "msg with arg %d", 42)
				require.NotEqualf(t, ee, result, "msg")
				require.NotEqualf(t, ee, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ff, result)
				require.Equal(t, ff, result, "msg")
				require.Equal(t, ff, result, "msg with arg %d", 42)
				require.Equalf(t, ff, result, "msg")
				require.Equalf(t, ff, result, "msg with arg %d", 42)

				require.NotEqual(t, ff, result)
				require.NotEqual(t, ff, result, "msg")
				require.NotEqual(t, ff, result, "msg with arg %d", 42)
				require.NotEqualf(t, ff, result, "msg")
				require.NotEqualf(t, ff, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, gg, result)
				require.Equal(t, gg, result, "msg")
				require.Equal(t, gg, result, "msg with arg %d", 42)
				require.Equalf(t, gg, result, "msg")
				require.Equalf(t, gg, result, "msg with arg %d", 42)

				require.NotEqual(t, gg, result)
				require.NotEqual(t, gg, result, "msg")
				require.NotEqual(t, gg, result, "msg with arg %d", 42)
				require.NotEqualf(t, gg, result, "msg")
				require.NotEqualf(t, gg, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, hh, result)
				require.Equal(t, hh, result, "msg")
				require.Equal(t, hh, result, "msg with arg %d", 42)
				require.Equalf(t, hh, result, "msg")
				require.Equalf(t, hh, result, "msg with arg %d", 42)

				require.NotEqual(t, hh, result)
				require.NotEqual(t, hh, result, "msg")
				require.NotEqual(t, hh, result, "msg with arg %d", 42)
				require.NotEqualf(t, hh, result, "msg")
				require.NotEqualf(t, hh, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ii, result)
				require.Equal(t, ii, result, "msg")
				require.Equal(t, ii, result, "msg with arg %d", 42)
				require.Equalf(t, ii, result, "msg")
				require.Equalf(t, ii, result, "msg with arg %d", 42)

				require.NotEqual(t, ii, result)
				require.NotEqual(t, ii, result, "msg")
				require.NotEqual(t, ii, result, "msg with arg %d", 42)
				require.NotEqualf(t, ii, result, "msg")
				require.NotEqualf(t, ii, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, jj, result)
				require.Equal(t, jj, result, "msg")
				require.Equal(t, jj, result, "msg with arg %d", 42)
				require.Equalf(t, jj, result, "msg")
				require.Equalf(t, jj, result, "msg with arg %d", 42)

				require.NotEqual(t, jj, result)
				require.NotEqual(t, jj, result, "msg")
				require.NotEqual(t, jj, result, "msg with arg %d", 42)
				require.NotEqualf(t, jj, result, "msg")
				require.NotEqualf(t, jj, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, kk, result)
				require.Equal(t, kk, result, "msg")
				require.Equal(t, kk, result, "msg with arg %d", 42)
				require.Equalf(t, kk, result, "msg")
				require.Equalf(t, kk, result, "msg with arg %d", 42)

				require.NotEqual(t, kk, result)
				require.NotEqual(t, kk, result, "msg")
				require.NotEqual(t, kk, result, "msg with arg %d", 42)
				require.NotEqualf(t, kk, result, "msg")
				require.NotEqualf(t, kk, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ll, result)
				require.Equal(t, ll, result, "msg")
				require.Equal(t, ll, result, "msg with arg %d", 42)
				require.Equalf(t, ll, result, "msg")
				require.Equalf(t, ll, result, "msg with arg %d", 42)

				require.NotEqual(t, ll, result)
				require.NotEqual(t, ll, result, "msg")
				require.NotEqual(t, ll, result, "msg with arg %d", 42)
				require.NotEqualf(t, ll, result, "msg")
				require.NotEqualf(t, ll, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, mm, result)
				require.Equal(t, mm, result, "msg")
				require.Equal(t, mm, result, "msg with arg %d", 42)
				require.Equalf(t, mm, result, "msg")
				require.Equalf(t, mm, result, "msg with arg %d", 42)

				require.NotEqual(t, mm, result)
				require.NotEqual(t, mm, result, "msg")
				require.NotEqual(t, mm, result, "msg with arg %d", 42)
				require.NotEqualf(t, mm, result, "msg")
				require.NotEqualf(t, mm, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, nn, result)
				require.Equal(t, nn, result, "msg")
				require.Equal(t, nn, result, "msg with arg %d", 42)
				require.Equalf(t, nn, result, "msg")
				require.Equalf(t, nn, result, "msg with arg %d", 42)

				require.NotEqual(t, nn, result)
				require.NotEqual(t, nn, result, "msg")
				require.NotEqual(t, nn, result, "msg with arg %d", 42)
				require.NotEqualf(t, nn, result, "msg")
				require.NotEqualf(t, nn, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, oo, result)
				require.Equal(t, oo, result, "msg")
				require.Equal(t, oo, result, "msg with arg %d", 42)
				require.Equalf(t, oo, result, "msg")
				require.Equalf(t, oo, result, "msg with arg %d", 42)

				require.NotEqual(t, oo, result)
				require.NotEqual(t, oo, result, "msg")
				require.NotEqual(t, oo, result, "msg with arg %d", 42)
				require.NotEqualf(t, oo, result, "msg")
				require.NotEqualf(t, oo, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, pp, result)
				require.Equal(t, pp, result, "msg")
				require.Equal(t, pp, result, "msg with arg %d", 42)
				require.Equalf(t, pp, result, "msg")
				require.Equalf(t, pp, result, "msg with arg %d", 42)

				require.NotEqual(t, pp, result)
				require.NotEqual(t, pp, result, "msg")
				require.NotEqual(t, pp, result, "msg with arg %d", 42)
				require.NotEqualf(t, pp, result, "msg")
				require.NotEqualf(t, pp, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, Monday, result)
				require.Equal(t, Monday, result, "msg")
				require.Equal(t, Monday, result, "msg with arg %d", 42)
				require.Equalf(t, Monday, result, "msg")
				require.Equalf(t, Monday, result, "msg with arg %d", 42)

				require.NotEqual(t, Monday, result)
				require.NotEqual(t, Monday, result, "msg")
				require.NotEqual(t, Monday, result, "msg with arg %d", 42)
				require.NotEqualf(t, Monday, result, "msg")
				require.NotEqualf(t, Monday, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, DayMonday, result)
				require.Equal(t, DayMonday, result, "msg")
				require.Equal(t, DayMonday, result, "msg with arg %d", 42)
				require.Equalf(t, DayMonday, result, "msg")
				require.Equalf(t, DayMonday, result, "msg with arg %d", 42)

				require.NotEqual(t, DayMonday, result)
				require.NotEqual(t, DayMonday, result, "msg")
				require.NotEqual(t, DayMonday, result, "msg with arg %d", 42)
				require.NotEqualf(t, DayMonday, result, "msg")
				require.NotEqualf(t, DayMonday, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, expected, result)
				require.Equal(t, expected, result, "msg")
				require.Equal(t, expected, result, "msg with arg %d", 42)
				require.Equalf(t, expected, result, "msg")
				require.Equalf(t, expected, result, "msg with arg %d", 42)

				require.NotEqual(t, expected, result)
				require.NotEqual(t, expected, result, "msg")
				require.NotEqual(t, expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, expected, result, "msg")
				require.NotEqualf(t, expected, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, tt.expected, result)
				require.Equal(t, tt.expected, result, "msg")
				require.Equal(t, tt.expected, result, "msg with arg %d", 42)
				require.Equalf(t, tt.expected, result, "msg")
				require.Equalf(t, tt.expected, result, "msg with arg %d", 42)

				require.NotEqual(t, tt.expected, result)
				require.NotEqual(t, tt.expected, result, "msg")
				require.NotEqual(t, tt.expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, tt.expected, result, "msg")
				require.NotEqualf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				require.Equal(t, ttp.expected, result)
				require.Equal(t, ttp.expected, result, "msg")
				require.Equal(t, ttp.expected, result, "msg with arg %d", 42)
				require.Equalf(t, ttp.expected, result, "msg")
				require.Equalf(t, ttp.expected, result, "msg with arg %d", 42)

				require.NotEqual(t, ttp.expected, result)
				require.NotEqual(t, ttp.expected, result, "msg")
				require.NotEqual(t, ttp.expected, result, "msg with arg %d", 42)
				require.NotEqualf(t, ttp.expected, result, "msg")
				require.NotEqualf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}

		// String.

		{
			{
				require.JSONEq(t, result, "string")                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, "string")                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, "string", "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, "string", "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, "string", "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, "string", "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, o)                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, o)                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, o, "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, o, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, o, "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, o, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, oo)                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, oo)                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, oo, "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, oo, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, oo, "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, oo, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, string(DayNameMonday))                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, string(DayNameMonday), "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, string(DayNameMonday), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, string(DayNameMonday), "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, string(DayNameMonday), "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, string(DayNameMonday))                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, string(DayNameMonday), "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, string(DayNameMonday), "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, string(DayNameMonday), "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, string(DayNameMonday), "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, expected)                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, expected)                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, expected, "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, expected, "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, tt.expected)                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, tt.expected, "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, tt.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, tt.expected, "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, tt.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			{
				require.JSONEq(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				require.JSONEq(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				require.JSONEq(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				require.JSONEqf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"

				require.YAMLEq(t, result, ttp.expected)                         // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, ttp.expected, "msg")                  // want "need to reverse actual and expected values"
				require.YAMLEq(t, result, ttp.expected, "msg with arg %d", 42)  // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, ttp.expected, "msg")                 // want "need to reverse actual and expected values"
				require.YAMLEqf(t, result, ttp.expected, "msg with arg %d", 42) // want "need to reverse actual and expected values"
			}

			// Valid requires.

			{
				require.JSONEq(t, "string", result)
				require.JSONEq(t, "string", result, "msg")
				require.JSONEq(t, "string", result, "msg with arg %d", 42)
				require.JSONEqf(t, "string", result, "msg")
				require.JSONEqf(t, "string", result, "msg with arg %d", 42)

				require.YAMLEq(t, "string", result)
				require.YAMLEq(t, "string", result, "msg")
				require.YAMLEq(t, "string", result, "msg with arg %d", 42)
				require.YAMLEqf(t, "string", result, "msg")
				require.YAMLEqf(t, "string", result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, o, result)
				require.JSONEq(t, o, result, "msg")
				require.JSONEq(t, o, result, "msg with arg %d", 42)
				require.JSONEqf(t, o, result, "msg")
				require.JSONEqf(t, o, result, "msg with arg %d", 42)

				require.YAMLEq(t, o, result)
				require.YAMLEq(t, o, result, "msg")
				require.YAMLEq(t, o, result, "msg with arg %d", 42)
				require.YAMLEqf(t, o, result, "msg")
				require.YAMLEqf(t, o, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, oo, result)
				require.JSONEq(t, oo, result, "msg")
				require.JSONEq(t, oo, result, "msg with arg %d", 42)
				require.JSONEqf(t, oo, result, "msg")
				require.JSONEqf(t, oo, result, "msg with arg %d", 42)

				require.YAMLEq(t, oo, result)
				require.YAMLEq(t, oo, result, "msg")
				require.YAMLEq(t, oo, result, "msg with arg %d", 42)
				require.YAMLEqf(t, oo, result, "msg")
				require.YAMLEqf(t, oo, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, string(DayNameMonday), result)
				require.JSONEq(t, string(DayNameMonday), result, "msg")
				require.JSONEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				require.JSONEqf(t, string(DayNameMonday), result, "msg")
				require.JSONEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)

				require.YAMLEq(t, string(DayNameMonday), result)
				require.YAMLEq(t, string(DayNameMonday), result, "msg")
				require.YAMLEq(t, string(DayNameMonday), result, "msg with arg %d", 42)
				require.YAMLEqf(t, string(DayNameMonday), result, "msg")
				require.YAMLEqf(t, string(DayNameMonday), result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, expected, result)
				require.JSONEq(t, expected, result, "msg")
				require.JSONEq(t, expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, expected, result, "msg")
				require.JSONEqf(t, expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, expected, result)
				require.YAMLEq(t, expected, result, "msg")
				require.YAMLEq(t, expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, expected, result, "msg")
				require.YAMLEqf(t, expected, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, tt.expected, result)
				require.JSONEq(t, tt.expected, result, "msg")
				require.JSONEq(t, tt.expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, tt.expected, result, "msg")
				require.JSONEqf(t, tt.expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, tt.expected, result)
				require.YAMLEq(t, tt.expected, result, "msg")
				require.YAMLEq(t, tt.expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, tt.expected, result, "msg")
				require.YAMLEqf(t, tt.expected, result, "msg with arg %d", 42)
			}

			{
				require.JSONEq(t, ttp.expected, result)
				require.JSONEq(t, ttp.expected, result, "msg")
				require.JSONEq(t, ttp.expected, result, "msg with arg %d", 42)
				require.JSONEqf(t, ttp.expected, result, "msg")
				require.JSONEqf(t, ttp.expected, result, "msg with arg %d", 42)

				require.YAMLEq(t, ttp.expected, result)
				require.YAMLEq(t, ttp.expected, result, "msg")
				require.YAMLEq(t, ttp.expected, result, "msg with arg %d", 42)
				require.YAMLEqf(t, ttp.expected, result, "msg")
				require.YAMLEqf(t, ttp.expected, result, "msg with arg %d", 42)
			}
		}
	})
}
